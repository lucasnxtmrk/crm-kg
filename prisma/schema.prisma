generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cadastros_influenciadores {
  id                          String @id @db.Uuid
  influenciador_id            String @db.Uuid
  plataforma_id               String @db.VarChar(50)
  influenciador_plataforma_id String @db.VarChar(100)

  influenciadores influenciadores @relation(fields: [influenciador_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plataformas     plataformas     @relation(fields: [plataforma_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recargas        recargas[]

  @@map("cadastros_influenciadores")
}

model influenciadores {
  id               String   @id @db.Uuid
  nome             String   @db.VarChar(255)
  imagem           String?
  instagram        String   @db.VarChar(100)
  email            String?  @db.VarChar(255)
  telefone         String?  @db.VarChar(20)
  data_cadastro    DateTime @db.Date
  cpf              String   @unique @db.VarChar(20)
  chavepix         String?  @db.VarChar(255)
  status           String   @db.VarChar(20)
  motivo_banimento String?

  contratado   Boolean @default(false) // tem contrato com a agência
  salario_fixo Boolean @default(false) // recebe salário mensal fixo?

  cadastros_influenciadores cadastros_influenciadores[]
  salarios_mensais          salarios_mensais[]
  participacoes             ParticipanteEvento[] // <-- adicione isso

  @@map("influenciadores")
}

model grupos {
  id          String        @id @default(uuid()) @db.Uuid
  nome        String        @db.VarChar(100)
  imagem      String?
  plataformas plataformas[]
}

model plataformas {
  id     String  @id @db.VarChar(50)
  nome   String  @db.VarChar(255)
  imagem String?
  cor    String

  grupoId String? @db.Uuid
  grupo   grupos? @relation(fields: [grupoId], references: [id])

  cadastros_influenciadores cadastros_influenciadores[]
  eventos                   eventos[]

  @@map("plataformas")
}

model recargas {
  id                    String   @id @db.Uuid
  cadastro_id           String   @db.Uuid
  inicio                DateTime @db.Date
  termino               DateTime @db.Date
  salario               Decimal  @db.Decimal(10, 2)
  meta                  Decimal  @db.Decimal(10, 2)
  atingido              Decimal  @db.Decimal(10, 2)
  reembolso             Decimal  @db.Decimal(10, 2)
  depositantes_meta     Int
  depositantes_atingido Int

  tipo String @db.VarChar(20) // normal | evento

  status_meta      String @db.VarChar(20)
  reembolso_status String @db.VarChar(20)

  cadastros_influenciadores cadastros_influenciadores @relation(fields: [cadastro_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("recargas")
}

model salarios_mensais {
  id               String  @id @default(uuid()) @db.Uuid
  influenciador_id String  @db.Uuid
  ano              Int
  mes              Int
  valor            Decimal @db.Decimal(10, 2)

  influenciador influenciadores @relation(fields: [influenciador_id], references: [id], onDelete: Cascade)

  @@unique([influenciador_id, ano, mes])
  @@map("salarios_mensais")
}

model eventos {
  id            String               @id @default(uuid()) @db.Uuid
  nome          String
  plataforma_id String
  plataforma    plataformas          @relation(fields: [plataforma_id], references: [id])
  participantes ParticipanteEvento[]

  createdAt DateTime @default(now()) // ✅ já tinha
  updatedAt DateTime @default(now()) @updatedAt
}

model ParticipanteEvento {
  id            String @id @default(uuid())
  evento_id     String @db.Uuid // <- Adicionado
  influencer_id String @db.Uuid // <- Adicionado
  meta          Int
  atingido      Int

  evento        eventos         @relation(fields: [evento_id], references: [id])
  influenciador influenciadores @relation(fields: [influencer_id], references: [id])
}
