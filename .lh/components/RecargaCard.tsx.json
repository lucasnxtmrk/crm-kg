{
    "sourceFile": "components/RecargaCard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746917623129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746917623129,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\nimport {\r\n  Select as ShadSelect,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport Image from \"next/image\";\r\nimport { Influenciador } from \"@/lib/types\";\r\n\r\nfunction formatCurrency(value: number): string {\r\n  return value.toLocaleString(\"pt-BR\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  });\r\n}\r\n\r\nfunction parseCurrency(value: string): number {\r\n  const clean = value.replace(/[^\\d,.-]/g, \"\");\r\n  const noThousand = clean.replace(/\\./g, \"\");\r\n  const normalized = noThousand.replace(/,/g, \".\");\r\n  const parsed = parseFloat(normalized);\r\n  return isNaN(parsed) ? 0 : parsed;\r\n}\r\n\r\ntype CurrencyInputProps = Omit<\r\n  React.InputHTMLAttributes<HTMLInputElement>,\r\n  \"value\" | \"onChange\" | \"color\"\r\n> & {\r\n  value: number;\r\n  onChange: (num: number) => void;\r\n};\r\n\r\nfunction CurrencyInput({ value, onChange, ...rest }: CurrencyInputProps) {\r\n  const [display, setDisplay] = useState(formatCurrency(value));\r\n\r\n  useEffect(() => {\r\n    setDisplay(formatCurrency(value));\r\n  }, [value]);\r\n\r\n  return (\r\n    <Input\r\n      {...rest}\r\n      value={display}\r\n      onChange={(e) => setDisplay(e.target.value)}\r\n      onBlur={() => {\r\n        const num = parseCurrency(display);\r\n        onChange(num);\r\n        setDisplay(formatCurrency(num));\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\ninterface Props {\r\n  rec: Influenciador[\"recargas\"][0];\r\n  cadastro?: Influenciador[\"cadastros_influenciadores\"][0];\r\n  onUpdateRecarga?: (updated: Influenciador[\"recargas\"][0]) => void;\r\n}\r\n\r\nexport default function RecargaCard({ rec, cadastro, onUpdateRecarga }: Props) {\r\n  const [plataformas, setPlataformas] = useState<{ id: string; nome: string; imagem?: string }[]>([]);\r\nuseEffect(() => {\r\n  const fetchPlataformas = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/plataformas\");\r\n      const data = await res.json();\r\n      setPlataformas(data);\r\n    } catch (error) {\r\n      console.error(\"Erro ao carregar plataformas:\", error);\r\n    }\r\n  };\r\n\r\n  fetchPlataformas();\r\n}, []);\r\n  const plataforma = cadastro\r\n  ? plataformas.find((p) => p.id === cadastro.plataforma_id)\r\n  : undefined;\r\n  \r\n  const tipoMeta = rec.tipo;\r\n\r\n  const handleUpdate = (changes: Partial<Influenciador[\"recargas\"][0]>) => {\r\n    const updated = { ...rec, ...changes };\r\n\r\n    if (\r\n      Object.prototype.hasOwnProperty.call(changes, \"meta\") ||\r\n      Object.prototype.hasOwnProperty.call(changes, \"atingido\")\r\n    ) {\r\n      const diferenca = (updated.meta ?? 0) - (updated.atingido ?? 0);\r\n      updated.reembolso = Math.max(diferenca, 0);\r\n      updated.reembolso_status = updated.reembolso > 0 ? \"pendente\" : \"pago\";\r\n    }\r\n\r\n    onUpdateRecarga?.(updated);\r\n  };\r\n\r\n  return (\r\n    <div className=\"border border-muted rounded-md m-2 p-4 space-y-3\">\r\n      <div className=\"flex items-center justify-between gap-4\">\r\n        <div className=\"flex items-center gap-2\">\r\n          {plataforma?.imagem && (\r\n            <Image\r\n              src={plataforma.imagem}\r\n              alt={plataforma.nome}\r\n              width={64}\r\n              height={32}\r\n              className=\"rounded-md object-contain\"\r\n            />\r\n          )}\r\n          <div className=\"flex flex-col text-xs text-muted-foreground\">\r\n            <span>ID Influenciador:</span>\r\n            <span className=\"font-semibold\">\r\n              {cadastro?.influenciador_plataforma_id || \"Sem ID\"}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"w-40\">\r\n          <Label>Status da Meta</Label>\r\n          <ShadSelect\r\n            value={rec.status_meta}\r\n            onValueChange={(value: \"completo\" | \"incompleto\") =>\r\n              handleUpdate({ status_meta: value })\r\n            }\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Status\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"completo\">Meta Batida</SelectItem>\r\n              <SelectItem value=\"incompleto\">Meta Incompleta</SelectItem>\r\n            </SelectContent>\r\n          </ShadSelect>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-3 gap-4 text-sm\">\r\n        <div className=\"space-y-1.5\">\r\n          <Label>Sal√°rio (R$)</Label>\r\n          <InputGroup>\r\n            <InputGroupText>R$</InputGroupText>\r\n            <CurrencyInput\r\n              value={rec.salario}\r\n              onChange={(num) => handleUpdate({ salario: num })}\r\n            />\r\n          </InputGroup>\r\n        </div>\r\n\r\n        {tipoMeta === \"depositantes\" && (\r\n          <>\r\n            <div className=\"space-y-1.5\">\r\n              <Label>Meta (Depositantes)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                value={rec.depositantes_meta ?? \"\"}\r\n                onChange={(e) =>\r\n                  handleUpdate({\r\n                    depositantes_meta: e.target.value === \"\" ? undefined : Number(e.target.value),\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"space-y-1.5\">\r\n              <Label>Atingido (Depositantes)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                value={rec.depositantes_atingido ?? \"\"}\r\n                onChange={(e) =>\r\n                  handleUpdate({\r\n                    depositantes_atingido: e.target.value === \"\" ? undefined : Number(e.target.value),\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        <div className=\"space-y-1.5\">\r\n          <Label>Meta (R$)</Label>\r\n          <InputGroup>\r\n            <InputGroupText>R$</InputGroupText>\r\n            <CurrencyInput\r\n              value={rec.meta}\r\n              onChange={(num) => handleUpdate({ meta: num })}\r\n            />\r\n          </InputGroup>\r\n        </div>\r\n\r\n        <div className=\"space-y-1.5\">\r\n          <Label>Atingido (R$)</Label>\r\n          <InputGroup>\r\n            <InputGroupText>R$</InputGroupText>\r\n            <CurrencyInput\r\n              value={rec.atingido}\r\n              onChange={(num) => handleUpdate({ atingido: num })}\r\n            />\r\n          </InputGroup>\r\n        </div>\r\n\r\n        <div className=\"space-y-1.5\">\r\n          <Label>Reembolso (R$)</Label>\r\n          <InputGroup>\r\n            <InputGroupText>R$</InputGroupText>\r\n            <CurrencyInput\r\n              value={rec.reembolso}\r\n              onChange={(num) =>\r\n                handleUpdate({\r\n                  reembolso: num,\r\n                  reembolso_status: num > 0 ? \"pendente\" : \"pago\",\r\n                })\r\n              }\r\n            />\r\n          </InputGroup>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}