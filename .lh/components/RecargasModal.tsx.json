{
    "sourceFile": "components/RecargasModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1745463040798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745463430592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+\"use client\";\r\n+\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+} from \"@/components/ui/dialog\";\r\n+import { Input } from \"@/components/ui/input\";\r\n+import { Label } from \"@/components/ui/label\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { CalendarIcon } from \"lucide-react\";\r\n+import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\n+import { Calendar } from \"@/components/ui/calendar\";\r\n+import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n+import { format } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+import Select from \"react-select\";\r\n+import { Influenciador } from \"@/lib/influenciadores\";\r\n+import { plataformas } from \"@/lib/data\";\r\n+\r\n+interface Props {\r\n+  open: boolean;\r\n+  setOpen: (open: boolean) => void;\r\n+  onSave: (recarga: {\r\n+    influenciadorId: string;\r\n+    plataformaId: string;\r\n+    valor: number;\r\n+    inicio: Date;\r\n+    termino: Date;\r\n+  }) => void;\r\n+  influenciadores: Influenciador[];\r\n+}\r\n+\r\n+const RecargasModal = ({ open, setOpen, onSave, influenciadores }: Props) => {\r\n+  const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n+  const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n+  const [valor, setValor] = useState<number>(0);\r\n+  const [inicio, setInicio] = useState<Date>(new Date());\r\n+  const [termino, setTermino] = useState<Date>(new Date());\r\n+\r\n+  const handleSubmit = () => {\r\n+    if (!influenciadorId || !plataformaId || !valor || !inicio || !termino) return;\r\n+    onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n+    setOpen(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <Dialog open={open} onOpenChange={setOpen}>\r\n+      <DialogContent>\r\n+        <DialogHeader>\r\n+          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n+        </DialogHeader>\r\n+\r\n+        <div className=\"space-y-4\">\r\n+          {/* Influenciador */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Influenciador</Label>\r\n+            <Select\r\n+              options={influenciadores.map((inf) => ({ value: inf.id, label: inf.nome }))}\r\n+              onChange={(e) => setInfluenciadorId(e?.value || null)}\r\n+              placeholder=\"Selecione um influenciador\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Plataforma */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Plataforma</Label>\r\n+            <Select\r\n+              options={plataformas.map((p) => ({ value: p.id, label: p.nome }))}\r\n+              onChange={(e) => setPlataformaId(e?.value || null)}\r\n+              placeholder=\"Selecione a plataforma\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Valor */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Valor da Recarga</Label>\r\n+            <InputGroup>\r\n+              <InputGroupText>R$</InputGroupText>\r\n+              <Input\r\n+                type=\"number\"\r\n+                value={valor}\r\n+                onChange={(e) => setValor(Number(e.target.value))}\r\n+              />\r\n+            </InputGroup>\r\n+          </div>\r\n+\r\n+          {/* Datas */}\r\n+          <div className=\"grid grid-cols-2 gap-4\">\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Data de Início</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(inicio, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={inicio}\r\n+                    onSelect={(date) => date && setInicio(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+            </div>\r\n+\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Data de Término</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(termino, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={termino}\r\n+                    onSelect={(date) => date && setTermino(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {/* Botões */}\r\n+          <div className=\"flex justify-end gap-2\">\r\n+            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+              Cancelar\r\n+            </Button>\r\n+            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+          </div>\r\n+        </div>\r\n+      </DialogContent>\r\n+    </Dialog>\r\n+  );\r\n+};\r\n+\r\n+export default RecargasModal;\r\n"
                },
                {
                    "date": 1745463780677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n \"use client\";\r\n \r\n import {\r\n   Dialog,\r\n+  DialogPortal,\r\n+  DialogOverlay,\r\n   DialogContent,\r\n   DialogHeader,\r\n   DialogTitle,\r\n } from \"@/components/ui/dialog\";\r\n@@ -46,97 +48,100 @@\n   };\r\n \r\n   return (\r\n     <Dialog open={open} onOpenChange={setOpen}>\r\n-      <DialogContent>\r\n-        <DialogHeader>\r\n-          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n-        </DialogHeader>\r\n+      <DialogPortal>\r\n+        <DialogOverlay className=\"fixed inset-0 bg-black/50 z-40\" />\r\n+        <DialogContent className=\"fixed z-50 top-1/2 left-1/2 w-full max-w-lg -translate-y-1/2 -translate-x-1/2 bg-white p-6 rounded-lg\">\r\n+          <DialogHeader>\r\n+            <DialogTitle>Adicionar Recarga</DialogTitle>\r\n+          </DialogHeader>\r\n \r\n-        <div className=\"space-y-4\">\r\n-          {/* Influenciador */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Influenciador</Label>\r\n-            <Select\r\n-              options={influenciadores.map((inf) => ({ value: inf.id, label: inf.nome }))}\r\n-              onChange={(e) => setInfluenciadorId(e?.value || null)}\r\n-              placeholder=\"Selecione um influenciador\"\r\n-            />\r\n-          </div>\r\n-\r\n-          {/* Plataforma */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Plataforma</Label>\r\n-            <Select\r\n-              options={plataformas.map((p) => ({ value: p.id, label: p.nome }))}\r\n-              onChange={(e) => setPlataformaId(e?.value || null)}\r\n-              placeholder=\"Selecione a plataforma\"\r\n-            />\r\n-          </div>\r\n-\r\n-          {/* Valor */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Valor da Recarga</Label>\r\n-            <InputGroup>\r\n-              <InputGroupText>R$</InputGroupText>\r\n-              <Input\r\n-                type=\"number\"\r\n-                value={valor}\r\n-                onChange={(e) => setValor(Number(e.target.value))}\r\n+          <div className=\"space-y-4\">\r\n+            {/* Influenciador */}\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                options={influenciadores.map((inf) => ({ value: inf.id, label: inf.nome }))}\r\n+                onChange={(e) => setInfluenciadorId(e?.value || null)}\r\n+                placeholder=\"Selecione um influenciador\"\r\n               />\r\n-            </InputGroup>\r\n-          </div>\r\n+            </div>\r\n \r\n-          {/* Datas */}\r\n-          <div className=\"grid grid-cols-2 gap-4\">\r\n+            {/* Plataforma */}\r\n             <div className=\"space-y-1.5\">\r\n-              <Label>Data de Início</Label>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {format(inicio, \"dd/MM/yyyy\")}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={inicio}\r\n-                    onSelect={(date) => date && setInicio(date)}\r\n-                  />\r\n-                </PopoverContent>\r\n-              </Popover>\r\n+              <Label>Plataforma</Label>\r\n+              <Select\r\n+                options={plataformas.map((p) => ({ value: p.id, label: p.nome }))}\r\n+                onChange={(e) => setPlataformaId(e?.value || null)}\r\n+                placeholder=\"Selecione a plataforma\"\r\n+              />\r\n             </div>\r\n \r\n+            {/* Valor */}\r\n             <div className=\"space-y-1.5\">\r\n-              <Label>Data de Término</Label>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {format(termino, \"dd/MM/yyyy\")}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={termino}\r\n-                    onSelect={(date) => date && setTermino(date)}\r\n-                  />\r\n-                </PopoverContent>\r\n-              </Popover>\r\n+              <Label>Valor da Recarga</Label>\r\n+              <InputGroup>\r\n+                <InputGroupText>R$</InputGroupText>\r\n+                <Input\r\n+                  type=\"number\"\r\n+                  value={valor}\r\n+                  onChange={(e) => setValor(Number(e.target.value))}\r\n+                />\r\n+              </InputGroup>\r\n             </div>\r\n-          </div>\r\n \r\n-          {/* Botões */}\r\n-          <div className=\"flex justify-end gap-2\">\r\n-            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n-              Cancelar\r\n-            </Button>\r\n-            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+            {/* Datas */}\r\n+            <div className=\"grid grid-cols-2 gap-4\">\r\n+              <div className=\"space-y-1.5\">\r\n+                <Label>Data de Início</Label>\r\n+                <Popover>\r\n+                  <PopoverTrigger asChild>\r\n+                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                      {format(inicio, \"dd/MM/yyyy\")}\r\n+                    </Button>\r\n+                  </PopoverTrigger>\r\n+                  <PopoverContent className=\"w-auto p-0\">\r\n+                    <Calendar\r\n+                      mode=\"single\"\r\n+                      selected={inicio}\r\n+                      onSelect={(date) => date && setInicio(date)}\r\n+                    />\r\n+                  </PopoverContent>\r\n+                </Popover>\r\n+              </div>\r\n+\r\n+              <div className=\"space-y-1.5\">\r\n+                <Label>Data de Término</Label>\r\n+                <Popover>\r\n+                  <PopoverTrigger asChild>\r\n+                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                      {format(termino, \"dd/MM/yyyy\")}\r\n+                    </Button>\r\n+                  </PopoverTrigger>\r\n+                  <PopoverContent className=\"w-auto p-0\">\r\n+                    <Calendar\r\n+                      mode=\"single\"\r\n+                      selected={termino}\r\n+                      onSelect={(date) => date && setTermino(date)}\r\n+                    />\r\n+                  </PopoverContent>\r\n+                </Popover>\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Botões */}\r\n+            <div className=\"flex justify-end gap-2\">\r\n+              <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+                Cancelar\r\n+              </Button>\r\n+              <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+            </div>\r\n           </div>\r\n-        </div>\r\n-      </DialogContent>\r\n+        </DialogContent>\r\n+      </DialogPortal>\r\n     </Dialog>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1745465070354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,148 +1,17 @@\n-\"use client\";\r\n-\r\n-import {\r\n-  Dialog,\r\n-  DialogPortal,\r\n-  DialogOverlay,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-} from \"@/components/ui/dialog\";\r\n-import { Input } from \"@/components/ui/input\";\r\n-import { Label } from \"@/components/ui/label\";\r\n+import { useState } from \"react\";\r\n+import { Dialog, DialogTrigger, DialogContent } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n-import { CalendarIcon } from \"lucide-react\";\r\n-import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\n-import { Calendar } from \"@/components/ui/calendar\";\r\n-import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n-import { format } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-import Select from \"react-select\";\r\n-import { Influenciador } from \"@/lib/influenciadores\";\r\n-import { plataformas } from \"@/lib/data\";\r\n \r\n-interface Props {\r\n-  open: boolean;\r\n-  setOpen: (open: boolean) => void;\r\n-  onSave: (recarga: {\r\n-    influenciadorId: string;\r\n-    plataformaId: string;\r\n-    valor: number;\r\n-    inicio: Date;\r\n-    termino: Date;\r\n-  }) => void;\r\n-  influenciadores: Influenciador[];\r\n-}\r\n-\r\n-const RecargasModal = ({ open, setOpen, onSave, influenciadores }: Props) => {\r\n-  const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n-  const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n-  const [valor, setValor] = useState<number>(0);\r\n-  const [inicio, setInicio] = useState<Date>(new Date());\r\n-  const [termino, setTermino] = useState<Date>(new Date());\r\n-\r\n-  const handleSubmit = () => {\r\n-    if (!influenciadorId || !plataformaId || !valor || !inicio || !termino) return;\r\n-    onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n-    setOpen(false);\r\n-  };\r\n-\r\n+export default function TesteModal() {\r\n+  const [open, setOpen] = useState(false);\r\n   return (\r\n     <Dialog open={open} onOpenChange={setOpen}>\r\n-      <DialogPortal>\r\n-        <DialogOverlay className=\"fixed inset-0 bg-black/50 z-40\" />\r\n-        <DialogContent className=\"fixed z-50 top-1/2 left-1/2 w-full max-w-lg -translate-y-1/2 -translate-x-1/2 bg-white p-6 rounded-lg\">\r\n-          <DialogHeader>\r\n-            <DialogTitle>Adicionar Recarga</DialogTitle>\r\n-          </DialogHeader>\r\n-\r\n-          <div className=\"space-y-4\">\r\n-            {/* Influenciador */}\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                options={influenciadores.map((inf) => ({ value: inf.id, label: inf.nome }))}\r\n-                onChange={(e) => setInfluenciadorId(e?.value || null)}\r\n-                placeholder=\"Selecione um influenciador\"\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Plataforma */}\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Plataforma</Label>\r\n-              <Select\r\n-                options={plataformas.map((p) => ({ value: p.id, label: p.nome }))}\r\n-                onChange={(e) => setPlataformaId(e?.value || null)}\r\n-                placeholder=\"Selecione a plataforma\"\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Valor */}\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Valor da Recarga</Label>\r\n-              <InputGroup>\r\n-                <InputGroupText>R$</InputGroupText>\r\n-                <Input\r\n-                  type=\"number\"\r\n-                  value={valor}\r\n-                  onChange={(e) => setValor(Number(e.target.value))}\r\n-                />\r\n-              </InputGroup>\r\n-            </div>\r\n-\r\n-            {/* Datas */}\r\n-            <div className=\"grid grid-cols-2 gap-4\">\r\n-              <div className=\"space-y-1.5\">\r\n-                <Label>Data de Início</Label>\r\n-                <Popover>\r\n-                  <PopoverTrigger asChild>\r\n-                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                      {format(inicio, \"dd/MM/yyyy\")}\r\n-                    </Button>\r\n-                  </PopoverTrigger>\r\n-                  <PopoverContent className=\"w-auto p-0\">\r\n-                    <Calendar\r\n-                      mode=\"single\"\r\n-                      selected={inicio}\r\n-                      onSelect={(date) => date && setInicio(date)}\r\n-                    />\r\n-                  </PopoverContent>\r\n-                </Popover>\r\n-              </div>\r\n-\r\n-              <div className=\"space-y-1.5\">\r\n-                <Label>Data de Término</Label>\r\n-                <Popover>\r\n-                  <PopoverTrigger asChild>\r\n-                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                      {format(termino, \"dd/MM/yyyy\")}\r\n-                    </Button>\r\n-                  </PopoverTrigger>\r\n-                  <PopoverContent className=\"w-auto p-0\">\r\n-                    <Calendar\r\n-                      mode=\"single\"\r\n-                      selected={termino}\r\n-                      onSelect={(date) => date && setTermino(date)}\r\n-                    />\r\n-                  </PopoverContent>\r\n-                </Popover>\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Botões */}\r\n-            <div className=\"flex justify-end gap-2\">\r\n-              <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n-                Cancelar\r\n-              </Button>\r\n-              <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n-            </div>\r\n-          </div>\r\n-        </DialogContent>\r\n-      </DialogPortal>\r\n+      <DialogTrigger asChild>\r\n+        <Button>Abrir Teste</Button>\r\n+      </DialogTrigger>\r\n+      <DialogContent>\r\n+        <p>Modal funcionando!</p>\r\n+      </DialogContent>\r\n     </Dialog>\r\n   );\r\n-};\r\n-\r\n-export default RecargasModal;\r\n+}\r\n"
                },
                {
                    "date": 1745465134834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,148 @@\n+\"use client\";\r\n+\r\n+import {\r\n+  Dialog,\r\n+  DialogPortal,\r\n+  DialogOverlay,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+} from \"@/components/ui/dialog\";\r\n+import { Input } from \"@/components/ui/input\";\r\n+import { Label } from \"@/components/ui/label\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { CalendarIcon } from \"lucide-react\";\r\n+import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\n+import { Calendar } from \"@/components/ui/calendar\";\r\n+import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n+import { format } from \"date-fns\";\r\n import { useState } from \"react\";\r\n-import { Dialog, DialogTrigger, DialogContent } from \"@/components/ui/dialog\";\r\n-import { Button } from \"@/components/ui/button\";\r\n+import Select from \"react-select\";\r\n+import { Influenciador } from \"@/lib/influenciadores\";\r\n+import { plataformas } from \"@/lib/data\";\r\n \r\n-export default function TesteModal() {\r\n-  const [open, setOpen] = useState(false);\r\n+interface Props {\r\n+  open: boolean;\r\n+  setOpen: (open: boolean) => void;\r\n+  onSave: (recarga: {\r\n+    influenciadorId: string;\r\n+    plataformaId: string;\r\n+    valor: number;\r\n+    inicio: Date;\r\n+    termino: Date;\r\n+  }) => void;\r\n+  influenciadores: Influenciador[];\r\n+}\r\n+\r\n+const RecargasModal = ({ open, setOpen, onSave, influenciadores }: Props) => {\r\n+  const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n+  const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n+  const [valor, setValor] = useState<number>(0);\r\n+  const [inicio, setInicio] = useState<Date>(new Date());\r\n+  const [termino, setTermino] = useState<Date>(new Date());\r\n+\r\n+  const handleSubmit = () => {\r\n+    if (!influenciadorId || !plataformaId || !valor || !inicio || !termino) return;\r\n+    onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n+    setOpen(false);\r\n+  };\r\n+\r\n   return (\r\n     <Dialog open={open} onOpenChange={setOpen}>\r\n-      <DialogTrigger asChild>\r\n-        <Button>Abrir Teste</Button>\r\n-      </DialogTrigger>\r\n-      <DialogContent>\r\n-        <p>Modal funcionando!</p>\r\n-      </DialogContent>\r\n+      <DialogPortal>\r\n+        <DialogOverlay className=\"fixed inset-0 bg-black/50 z-40\" />\r\n+        <DialogContent className=\"fixed z-50 top-1/2 left-1/2 w-full max-w-lg -translate-y-1/2 -translate-x-1/2 bg-white p-6 rounded-lg\">\r\n+          <DialogHeader>\r\n+            <DialogTitle>Adicionar Recarga</DialogTitle>\r\n+          </DialogHeader>\r\n+\r\n+          <div className=\"space-y-4\">\r\n+            {/* Influenciador */}\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                options={influenciadores.map((inf) => ({ value: inf.id, label: inf.nome }))}\r\n+                onChange={(e) => setInfluenciadorId(e?.value || null)}\r\n+                placeholder=\"Selecione um influenciador\"\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Plataforma */}\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Plataforma</Label>\r\n+              <Select\r\n+                options={plataformas.map((p) => ({ value: p.id, label: p.nome }))}\r\n+                onChange={(e) => setPlataformaId(e?.value || null)}\r\n+                placeholder=\"Selecione a plataforma\"\r\n+              />\r\n+            </div>\r\n+\r\n+            {/* Valor */}\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Valor da Recarga</Label>\r\n+              <InputGroup>\r\n+                <InputGroupText>R$</InputGroupText>\r\n+                <Input\r\n+                  type=\"number\"\r\n+                  value={valor}\r\n+                  onChange={(e) => setValor(Number(e.target.value))}\r\n+                />\r\n+              </InputGroup>\r\n+            </div>\r\n+\r\n+            {/* Datas */}\r\n+            <div className=\"grid grid-cols-2 gap-4\">\r\n+              <div className=\"space-y-1.5\">\r\n+                <Label>Data de Início</Label>\r\n+                <Popover>\r\n+                  <PopoverTrigger asChild>\r\n+                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                      {format(inicio, \"dd/MM/yyyy\")}\r\n+                    </Button>\r\n+                  </PopoverTrigger>\r\n+                  <PopoverContent className=\"w-auto p-0\">\r\n+                    <Calendar\r\n+                      mode=\"single\"\r\n+                      selected={inicio}\r\n+                      onSelect={(date) => date && setInicio(date)}\r\n+                    />\r\n+                  </PopoverContent>\r\n+                </Popover>\r\n+              </div>\r\n+\r\n+              <div className=\"space-y-1.5\">\r\n+                <Label>Data de Término</Label>\r\n+                <Popover>\r\n+                  <PopoverTrigger asChild>\r\n+                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                      {format(termino, \"dd/MM/yyyy\")}\r\n+                    </Button>\r\n+                  </PopoverTrigger>\r\n+                  <PopoverContent className=\"w-auto p-0\">\r\n+                    <Calendar\r\n+                      mode=\"single\"\r\n+                      selected={termino}\r\n+                      onSelect={(date) => date && setTermino(date)}\r\n+                    />\r\n+                  </PopoverContent>\r\n+                </Popover>\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Botões */}\r\n+            <div className=\"flex justify-end gap-2\">\r\n+              <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+                Cancelar\r\n+              </Button>\r\n+              <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+            </div>\r\n+          </div>\r\n+        </DialogContent>\r\n+      </DialogPortal>\r\n     </Dialog>\r\n   );\r\n-}\r\n+};\r\n+\r\n+export default RecargasModal;\r\n"
                },
                {
                    "date": 1745465214841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n+// components/RecargasModal.tsx\r\n+\r\n \"use client\";\r\n \r\n import {\r\n   Dialog,\r\n-  DialogPortal,\r\n-  DialogOverlay,\r\n   DialogContent,\r\n   DialogHeader,\r\n   DialogTitle,\r\n } from \"@/components/ui/dialog\";\r\n@@ -33,116 +33,121 @@\n   }) => void;\r\n   influenciadores: Influenciador[];\r\n }\r\n \r\n-const RecargasModal = ({ open, setOpen, onSave, influenciadores }: Props) => {\r\n+export default function RecargasModal({\r\n+  open,\r\n+  setOpen,\r\n+  onSave,\r\n+  influenciadores,\r\n+}: Props) {\r\n   const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n   const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n   const [valor, setValor] = useState<number>(0);\r\n   const [inicio, setInicio] = useState<Date>(new Date());\r\n   const [termino, setTermino] = useState<Date>(new Date());\r\n \r\n   const handleSubmit = () => {\r\n-    if (!influenciadorId || !plataformaId || !valor || !inicio || !termino) return;\r\n+    if (!influenciadorId || !plataformaId || !valor) return;\r\n     onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n     setOpen(false);\r\n   };\r\n \r\n   return (\r\n     <Dialog open={open} onOpenChange={setOpen}>\r\n-      <DialogPortal>\r\n-        <DialogOverlay className=\"fixed inset-0 bg-black/50 z-40\" />\r\n-        <DialogContent className=\"fixed z-50 top-1/2 left-1/2 w-full max-w-lg -translate-y-1/2 -translate-x-1/2 bg-white p-6 rounded-lg\">\r\n-          <DialogHeader>\r\n-            <DialogTitle>Adicionar Recarga</DialogTitle>\r\n-          </DialogHeader>\r\n+      <DialogContent className=\"max-w-lg w-full\">\r\n+        <DialogHeader>\r\n+          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n+        </DialogHeader>\r\n \r\n-          <div className=\"space-y-4\">\r\n-            {/* Influenciador */}\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                options={influenciadores.map((inf) => ({ value: inf.id, label: inf.nome }))}\r\n-                onChange={(e) => setInfluenciadorId(e?.value || null)}\r\n-                placeholder=\"Selecione um influenciador\"\r\n+        <div className=\"space-y-4\">\r\n+          {/* Influenciador */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Influenciador</Label>\r\n+            <Select\r\n+              options={influenciadores.map((inf) => ({\r\n+                value: inf.id,\r\n+                label: inf.nome,\r\n+              }))}\r\n+              onChange={(opt) => setInfluenciadorId(opt?.value || null)}\r\n+              placeholder=\"Selecione um influenciador\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Plataforma */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Plataforma</Label>\r\n+            <Select\r\n+              options={plataformas.map((p) => ({\r\n+                value: p.id,\r\n+                label: p.nome,\r\n+              }))}\r\n+              onChange={(opt) => setPlataformaId(opt?.value || null)}\r\n+              placeholder=\"Selecione a plataforma\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Valor */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Valor da Recarga</Label>\r\n+            <InputGroup>\r\n+              <InputGroupText>R$</InputGroupText>\r\n+              <Input\r\n+                type=\"number\"\r\n+                value={valor}\r\n+                onChange={(e) => setValor(Number(e.target.value))}\r\n               />\r\n-            </div>\r\n+            </InputGroup>\r\n+          </div>\r\n \r\n-            {/* Plataforma */}\r\n+          {/* Datas */}\r\n+          <div className=\"grid grid-cols-2 gap-4\">\r\n             <div className=\"space-y-1.5\">\r\n-              <Label>Plataforma</Label>\r\n-              <Select\r\n-                options={plataformas.map((p) => ({ value: p.id, label: p.nome }))}\r\n-                onChange={(e) => setPlataformaId(e?.value || null)}\r\n-                placeholder=\"Selecione a plataforma\"\r\n-              />\r\n+              <Label>Data de Início</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(inicio, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={inicio}\r\n+                    onSelect={(date) => date && setInicio(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n             </div>\r\n-\r\n-            {/* Valor */}\r\n             <div className=\"space-y-1.5\">\r\n-              <Label>Valor da Recarga</Label>\r\n-              <InputGroup>\r\n-                <InputGroupText>R$</InputGroupText>\r\n-                <Input\r\n-                  type=\"number\"\r\n-                  value={valor}\r\n-                  onChange={(e) => setValor(Number(e.target.value))}\r\n-                />\r\n-              </InputGroup>\r\n+              <Label>Data de Término</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(termino, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={termino}\r\n+                    onSelect={(date) => date && setTermino(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n             </div>\r\n+          </div>\r\n \r\n-            {/* Datas */}\r\n-            <div className=\"grid grid-cols-2 gap-4\">\r\n-              <div className=\"space-y-1.5\">\r\n-                <Label>Data de Início</Label>\r\n-                <Popover>\r\n-                  <PopoverTrigger asChild>\r\n-                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                      {format(inicio, \"dd/MM/yyyy\")}\r\n-                    </Button>\r\n-                  </PopoverTrigger>\r\n-                  <PopoverContent className=\"w-auto p-0\">\r\n-                    <Calendar\r\n-                      mode=\"single\"\r\n-                      selected={inicio}\r\n-                      onSelect={(date) => date && setInicio(date)}\r\n-                    />\r\n-                  </PopoverContent>\r\n-                </Popover>\r\n-              </div>\r\n-\r\n-              <div className=\"space-y-1.5\">\r\n-                <Label>Data de Término</Label>\r\n-                <Popover>\r\n-                  <PopoverTrigger asChild>\r\n-                    <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                      {format(termino, \"dd/MM/yyyy\")}\r\n-                    </Button>\r\n-                  </PopoverTrigger>\r\n-                  <PopoverContent className=\"w-auto p-0\">\r\n-                    <Calendar\r\n-                      mode=\"single\"\r\n-                      selected={termino}\r\n-                      onSelect={(date) => date && setTermino(date)}\r\n-                    />\r\n-                  </PopoverContent>\r\n-                </Popover>\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Botões */}\r\n-            <div className=\"flex justify-end gap-2\">\r\n-              <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n-                Cancelar\r\n-              </Button>\r\n-              <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n-            </div>\r\n+          {/* Botões */}\r\n+          <div className=\"flex justify-end gap-2\">\r\n+            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+              Cancelar\r\n+            </Button>\r\n+            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n           </div>\r\n-        </DialogContent>\r\n-      </DialogPortal>\r\n+        </div>\r\n+      </DialogContent>\r\n     </Dialog>\r\n   );\r\n-};\r\n-\r\n-export default RecargasModal;\r\n+}\r\n"
                },
                {
                    "date": 1745465641856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,101 +53,11 @@\n   };\r\n \r\n   return (\r\n     <Dialog open={open} onOpenChange={setOpen}>\r\n-      <DialogContent className=\"max-w-lg w-full\">\r\n-        <DialogHeader>\r\n-          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n-        </DialogHeader>\r\n-\r\n-        <div className=\"space-y-4\">\r\n-          {/* Influenciador */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Influenciador</Label>\r\n-            <Select\r\n-              options={influenciadores.map((inf) => ({\r\n-                value: inf.id,\r\n-                label: inf.nome,\r\n-              }))}\r\n-              onChange={(opt) => setInfluenciadorId(opt?.value || null)}\r\n-              placeholder=\"Selecione um influenciador\"\r\n-            />\r\n-          </div>\r\n-\r\n-          {/* Plataforma */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Plataforma</Label>\r\n-            <Select\r\n-              options={plataformas.map((p) => ({\r\n-                value: p.id,\r\n-                label: p.nome,\r\n-              }))}\r\n-              onChange={(opt) => setPlataformaId(opt?.value || null)}\r\n-              placeholder=\"Selecione a plataforma\"\r\n-            />\r\n-          </div>\r\n-\r\n-          {/* Valor */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Valor da Recarga</Label>\r\n-            <InputGroup>\r\n-              <InputGroupText>R$</InputGroupText>\r\n-              <Input\r\n-                type=\"number\"\r\n-                value={valor}\r\n-                onChange={(e) => setValor(Number(e.target.value))}\r\n-              />\r\n-            </InputGroup>\r\n-          </div>\r\n-\r\n-          {/* Datas */}\r\n-          <div className=\"grid grid-cols-2 gap-4\">\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Data de Início</Label>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {format(inicio, \"dd/MM/yyyy\")}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={inicio}\r\n-                    onSelect={(date) => date && setInicio(date)}\r\n-                  />\r\n-                </PopoverContent>\r\n-              </Popover>\r\n-            </div>\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Data de Término</Label>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {format(termino, \"dd/MM/yyyy\")}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={termino}\r\n-                    onSelect={(date) => date && setTermino(date)}\r\n-                  />\r\n-                </PopoverContent>\r\n-              </Popover>\r\n-            </div>\r\n-          </div>\r\n-\r\n-          {/* Botões */}\r\n-          <div className=\"flex justify-end gap-2\">\r\n-            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n-              Cancelar\r\n-            </Button>\r\n-            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n-          </div>\r\n-        </div>\r\n-      </DialogContent>\r\n-    </Dialog>\r\n+    <DialogContent className=\"max-w-lg w-full\">\r\n+      <p>Teste básico: se você vir isso, o modal abre normalmente.</p>\r\n+    </DialogContent>\r\n+  </Dialog>\r\n+  \r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745465796509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,101 @@\n   };\r\n \r\n   return (\r\n     <Dialog open={open} onOpenChange={setOpen}>\r\n-    <DialogContent className=\"max-w-lg w-full\">\r\n-      <p>Teste básico: se você vir isso, o modal abre normalmente.</p>\r\n-    </DialogContent>\r\n-  </Dialog>\r\n-  \r\n+      <DialogContent className=\"max-w-lg w-full\">\r\n+        <DialogHeader>\r\n+          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n+        </DialogHeader>\r\n+\r\n+        <div className=\"space-y-4\">\r\n+          {/* Influenciador */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Influenciador</Label>\r\n+            <Select\r\n+              options={influenciadores.map((inf) => ({\r\n+                value: inf.id,\r\n+                label: inf.nome,\r\n+              }))}\r\n+              onChange={(opt) => setInfluenciadorId(opt?.value || null)}\r\n+              placeholder=\"Selecione um influenciador\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Plataforma */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Plataforma</Label>\r\n+            <Select\r\n+              options={plataformas.map((p) => ({\r\n+                value: p.id,\r\n+                label: p.nome,\r\n+              }))}\r\n+              onChange={(opt) => setPlataformaId(opt?.value || null)}\r\n+              placeholder=\"Selecione a plataforma\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Valor */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Valor da Recarga</Label>\r\n+            <InputGroup>\r\n+              <InputGroupText>R$</InputGroupText>\r\n+              <Input\r\n+                type=\"number\"\r\n+                value={valor}\r\n+                onChange={(e) => setValor(Number(e.target.value))}\r\n+              />\r\n+            </InputGroup>\r\n+          </div>\r\n+\r\n+          {/* Datas */}\r\n+          <div className=\"grid grid-cols-2 gap-4\">\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Data de Início</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(inicio, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={inicio}\r\n+                    onSelect={(date) => date && setInicio(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+            </div>\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Data de Término</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(termino, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={termino}\r\n+                    onSelect={(date) => date && setTermino(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {/* Botões */}\r\n+          <div className=\"flex justify-end gap-2\">\r\n+            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+              Cancelar\r\n+            </Button>\r\n+            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+          </div>\r\n+        </div>\r\n+      </DialogContent>\r\n+    </Dialog>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745465827232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,153 +1,149 @@\n-// components/RecargasModal.tsx\r\n+'use client';\r\n \r\n-\"use client\";\r\n+import { useState } from 'react';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Card } from '@/components/ui/card';\r\n+import { RecargaTable } from './components/table';\r\n+import { format } from 'date-fns';\r\n+import Select from 'react-select';\r\n+import { CalendarIcon } from 'lucide-react';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n+import { Calendar } from '@/components/ui/calendar';\r\n+import { InputGroup, InputGroupText } from '@/components/ui/input-group';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { influenciadores } from '@/lib/influenciadores';\r\n+import { plataformas } from '@/lib/data';\r\n \r\n-import {\r\n-  Dialog,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-} from \"@/components/ui/dialog\";\r\n-import { Input } from \"@/components/ui/input\";\r\n-import { Label } from \"@/components/ui/label\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { CalendarIcon } from \"lucide-react\";\r\n-import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\n-import { Calendar } from \"@/components/ui/calendar\";\r\n-import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n-import { format } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-import Select from \"react-select\";\r\n-import { Influenciador } from \"@/lib/influenciadores\";\r\n-import { plataformas } from \"@/lib/data\";\r\n+export default function RecargasPage() {\r\n+  const [modalOpen, setModalOpen] = useState(false);\r\n \r\n-interface Props {\r\n-  open: boolean;\r\n-  setOpen: (open: boolean) => void;\r\n-  onSave: (recarga: {\r\n-    influenciadorId: string;\r\n-    plataformaId: string;\r\n-    valor: number;\r\n-    inicio: Date;\r\n-    termino: Date;\r\n-  }) => void;\r\n-  influenciadores: Influenciador[];\r\n-}\r\n-\r\n-export default function RecargasModal({\r\n-  open,\r\n-  setOpen,\r\n-  onSave,\r\n-  influenciadores,\r\n-}: Props) {\r\n+  // Campos do formulário\r\n   const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n   const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n   const [valor, setValor] = useState<number>(0);\r\n   const [inicio, setInicio] = useState<Date>(new Date());\r\n   const [termino, setTermino] = useState<Date>(new Date());\r\n \r\n-  const handleSubmit = () => {\r\n+  const handleSave = () => {\r\n     if (!influenciadorId || !plataformaId || !valor) return;\r\n-    onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n-    setOpen(false);\r\n+    console.log({ influenciadorId, plataformaId, valor, inicio, termino });\r\n+    setModalOpen(false);\r\n   };\r\n \r\n   return (\r\n-    <Dialog open={open} onOpenChange={setOpen}>\r\n-      <DialogContent className=\"max-w-lg w-full\">\r\n-        <DialogHeader>\r\n-          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n-        </DialogHeader>\r\n+    <div className=\"p-4 space-y-4\">\r\n+      <div className=\"flex justify-between items-center\">\r\n+        <h2 className=\"text-xl font-semibold\">Histórico de Recargas</h2>\r\n+        <Button onClick={() => setModalOpen(true)}>Nova Recarga</Button>\r\n+      </div>\r\n \r\n-        <div className=\"space-y-4\">\r\n-          {/* Influenciador */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Influenciador</Label>\r\n-            <Select\r\n-              options={influenciadores.map((inf) => ({\r\n-                value: inf.id,\r\n-                label: inf.nome,\r\n-              }))}\r\n-              onChange={(opt) => setInfluenciadorId(opt?.value || null)}\r\n-              placeholder=\"Selecione um influenciador\"\r\n-            />\r\n-          </div>\r\n+      <Card>\r\n+        <RecargaTable />\r\n+      </Card>\r\n \r\n-          {/* Plataforma */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Plataforma</Label>\r\n-            <Select\r\n-              options={plataformas.map((p) => ({\r\n-                value: p.id,\r\n-                label: p.nome,\r\n-              }))}\r\n-              onChange={(opt) => setPlataformaId(opt?.value || null)}\r\n-              placeholder=\"Selecione a plataforma\"\r\n-            />\r\n-          </div>\r\n+      {modalOpen && (\r\n+        // Overlay\r\n+        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center\">\r\n+          {/* Modal */}\r\n+          <div className=\"bg-white rounded-lg shadow-lg max-w-lg w-full p-6 relative\">\r\n+            <h3 className=\"text-lg font-medium mb-4\">Adicionar Recarga</h3>\r\n \r\n-          {/* Valor */}\r\n-          <div className=\"space-y-1.5\">\r\n-            <Label>Valor da Recarga</Label>\r\n-            <InputGroup>\r\n-              <InputGroupText>R$</InputGroupText>\r\n-              <Input\r\n-                type=\"number\"\r\n-                value={valor}\r\n-                onChange={(e) => setValor(Number(e.target.value))}\r\n+            {/* Influenciador */}\r\n+            <div className=\"space-y-1.5 mb-4\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                options={influenciadores.map((inf) => ({\r\n+                  value: inf.id,\r\n+                  label: inf.nome,\r\n+                }))}\r\n+                onChange={(opt) => setInfluenciadorId(opt?.value || null)}\r\n+                placeholder=\"Selecione um influenciador\"\r\n               />\r\n-            </InputGroup>\r\n-          </div>\r\n+            </div>\r\n \r\n-          {/* Datas */}\r\n-          <div className=\"grid grid-cols-2 gap-4\">\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Data de Início</Label>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {format(inicio, \"dd/MM/yyyy\")}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={inicio}\r\n-                    onSelect={(date) => date && setInicio(date)}\r\n-                  />\r\n-                </PopoverContent>\r\n-              </Popover>\r\n+            {/* Plataforma */}\r\n+            <div className=\"space-y-1.5 mb-4\">\r\n+              <Label>Plataforma</Label>\r\n+              <Select\r\n+                options={plataformas.map((p) => ({\r\n+                  value: p.id,\r\n+                  label: p.nome,\r\n+                }))}\r\n+                onChange={(opt) => setPlataformaId(opt?.value || null)}\r\n+                placeholder=\"Selecione a plataforma\"\r\n+              />\r\n             </div>\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label>Data de Término</Label>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {format(termino, \"dd/MM/yyyy\")}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={termino}\r\n-                    onSelect={(date) => date && setTermino(date)}\r\n-                  />\r\n-                </PopoverContent>\r\n-              </Popover>\r\n+\r\n+            {/* Valor */}\r\n+            <div className=\"space-y-1.5 mb-4\">\r\n+              <Label>Valor da Recarga</Label>\r\n+              <InputGroup>\r\n+                <InputGroupText>R$</InputGroupText>\r\n+                <Input\r\n+                  type=\"number\"\r\n+                  value={valor}\r\n+                  onChange={(e) => setValor(Number(e.target.value))}\r\n+                />\r\n+              </InputGroup>\r\n             </div>\r\n-          </div>\r\n \r\n-          {/* Botões */}\r\n-          <div className=\"flex justify-end gap-2\">\r\n-            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n-              Cancelar\r\n-            </Button>\r\n-            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+            {/* Datas */}\r\n+            <div className=\"grid grid-cols-2 gap-4 mb-6\">\r\n+              <div className=\"space-y-1.5\">\r\n+                <Label>Data de Início</Label>\r\n+                <Popover>\r\n+                  <PopoverTrigger asChild>\r\n+                    <Button\r\n+                      variant=\"outline\"\r\n+                      className=\"w-full justify-start text-left\"\r\n+                    >\r\n+                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                      {format(inicio, \"dd/MM/yyyy\")}\r\n+                    </Button>\r\n+                  </PopoverTrigger>\r\n+                  <PopoverContent className=\"w-auto p-0\">\r\n+                    <Calendar\r\n+                      mode=\"single\"\r\n+                      selected={inicio}\r\n+                      onSelect={(date) => date && setInicio(date)}\r\n+                    />\r\n+                  </PopoverContent>\r\n+                </Popover>\r\n+              </div>\r\n+              <div className=\"space-y-1.5\">\r\n+                <Label>Data de Término</Label>\r\n+                <Popover>\r\n+                  <PopoverTrigger asChild>\r\n+                    <Button\r\n+                      variant=\"outline\"\r\n+                      className=\"w-full justify-start text-left\"\r\n+                    >\r\n+                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                      {format(termino, \"dd/MM/yyyy\")}\r\n+                    </Button>\r\n+                  </PopoverTrigger>\r\n+                  <PopoverContent className=\"w-auto p-0\">\r\n+                    <Calendar\r\n+                      mode=\"single\"\r\n+                      selected={termino}\r\n+                      onSelect={(date) => date && setTermino(date)}\r\n+                    />\r\n+                  </PopoverContent>\r\n+                </Popover>\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Botões */}\r\n+            <div className=\"flex justify-end gap-2\">\r\n+              <Button variant=\"ghost\" onClick={() => setModalOpen(false)}>\r\n+                Cancelar\r\n+              </Button>\r\n+              <Button onClick={handleSave}>Adicionar Recarga</Button>\r\n+            </div>\r\n           </div>\r\n         </div>\r\n-      </DialogContent>\r\n-    </Dialog>\r\n+      )}\r\n+    </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745465840596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \r\n import { useState } from 'react';\r\n import { Button } from '@/components/ui/button';\r\n import { Card } from '@/components/ui/card';\r\n-import { RecargaTable } from './components/table';\r\n import { format } from 'date-fns';\r\n import Select from 'react-select';\r\n import { CalendarIcon } from 'lucide-react';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n"
                },
                {
                    "date": 1745466054854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+\"use client\";\r\n+\r\n+import { useState } from 'react';\r\n+import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { Label } from \"@/components/ui/label\";\r\n+import { Input } from \"@/components/ui/input\";\r\n+import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n+import { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\n+import { Calendar } from \"@/components/ui/calendar\";\r\n+import { CalendarIcon } from \"lucide-react\";\r\n+import Select from 'react-select';\r\n+import { format } from 'date-fns';\r\n+import { Influenciador } from \"@/lib/influenciadores\";\r\n+import { plataformas } from \"@/lib/data\";\r\n+\r\n+interface Props {\r\n+  open: boolean;\r\n+  setOpen: (open: boolean) => void;\r\n+  onSave: (recarga: {\r\n+    influenciadorId: string;\r\n+    plataformaId: string;\r\n+    valor: number;\r\n+    inicio: Date;\r\n+    termino: Date;\r\n+  }) => void;\r\n+  influenciadores: Influenciador[];\r\n+}\r\n+\r\n+export default function RecargasModal({ open, setOpen, onSave, influenciadores }: Props) {\r\n+  const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n+  const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n+  const [valor, setValor] = useState<number>(0);\r\n+  const [inicio, setInicio] = useState<Date>(new Date());\r\n+  const [termino, setTermino] = useState<Date>(new Date());\r\n+\r\n+  const handleSubmit = () => {\r\n+    if (!influenciadorId || !plataformaId || valor <= 0) return;\r\n+    onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n+    setOpen(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <Dialog open={open} onOpenChange={setOpen}>\r\n+      <DialogContent className=\"max-w-lg w-full\">\r\n+        <DialogHeader>\r\n+          <DialogTitle>Adicionar Recarga</DialogTitle>\r\n+        </DialogHeader>\r\n+        <div className=\"space-y-4\">\r\n+          {/* Influenciador */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Influenciador</Label>\r\n+            <Select\r\n+              options={influenciadores.map(inf => ({ value: inf.id, label: inf.nome }))}\r\n+              onChange={opt => setInfluenciadorId(opt?.value || null)}\r\n+              placeholder=\"Selecione um influenciador\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Plataforma */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Plataforma</Label>\r\n+            <Select\r\n+              options={plataformas.map(p => ({ value: p.id, label: p.nome }))}\r\n+              onChange={opt => setPlataformaId(opt?.value || null)}\r\n+              placeholder=\"Selecione a plataforma\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Valor */}\r\n+          <div className=\"space-y-1.5\">\r\n+            <Label>Valor da Recarga</Label>\r\n+            <InputGroup>\r\n+              <InputGroupText>R$</InputGroupText>\r\n+              <Input\r\n+                type=\"number\"\r\n+                value={valor}\r\n+                onChange={e => setValor(Number(e.target.value))}\r\n+              />\r\n+            </InputGroup>\r\n+          </div>\r\n+\r\n+          {/* Datas */}\r\n+          <div className=\"grid grid-cols-2 gap-4\">\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Data de Início</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(inicio, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={inicio}\r\n+                    onSelect={date => date && setInicio(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+            </div>\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label>Data de Término</Label>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    {format(termino, \"dd/MM/yyyy\")}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={termino}\r\n+                    onSelect={date => date && setTermino(date)}\r\n+                  />\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {/* Botões */}\r\n+          <div className=\"flex justify-end gap-2\">\r\n+            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+              Cancelar\r\n+            </Button>\r\n+            <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n+          </div>\r\n+        </div>\r\n+      </DialogContent>\r\n+    </Dialog>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1745466381643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,152 +131,4 @@\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n }\r\n-'use client';\r\n-\r\n-import { useState } from 'react';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card } from '@/components/ui/card';\r\n-import { format } from 'date-fns';\r\n-import Select from 'react-select';\r\n-import { CalendarIcon } from 'lucide-react';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { Calendar } from '@/components/ui/calendar';\r\n-import { InputGroup, InputGroupText } from '@/components/ui/input-group';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { influenciadores } from '@/lib/influenciadores';\r\n-import { plataformas } from '@/lib/data';\r\n-\r\n-export default function RecargasPage() {\r\n-  const [modalOpen, setModalOpen] = useState(false);\r\n-\r\n-  // Campos do formulário\r\n-  const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n-  const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n-  const [valor, setValor] = useState<number>(0);\r\n-  const [inicio, setInicio] = useState<Date>(new Date());\r\n-  const [termino, setTermino] = useState<Date>(new Date());\r\n-\r\n-  const handleSave = () => {\r\n-    if (!influenciadorId || !plataformaId || !valor) return;\r\n-    console.log({ influenciadorId, plataformaId, valor, inicio, termino });\r\n-    setModalOpen(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"p-4 space-y-4\">\r\n-      <div className=\"flex justify-between items-center\">\r\n-        <h2 className=\"text-xl font-semibold\">Histórico de Recargas</h2>\r\n-        <Button onClick={() => setModalOpen(true)}>Nova Recarga</Button>\r\n-      </div>\r\n-\r\n-      <Card>\r\n-        <RecargaTable />\r\n-      </Card>\r\n-\r\n-      {modalOpen && (\r\n-        // Overlay\r\n-        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center\">\r\n-          {/* Modal */}\r\n-          <div className=\"bg-white rounded-lg shadow-lg max-w-lg w-full p-6 relative\">\r\n-            <h3 className=\"text-lg font-medium mb-4\">Adicionar Recarga</h3>\r\n-\r\n-            {/* Influenciador */}\r\n-            <div className=\"space-y-1.5 mb-4\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                options={influenciadores.map((inf) => ({\r\n-                  value: inf.id,\r\n-                  label: inf.nome,\r\n-                }))}\r\n-                onChange={(opt) => setInfluenciadorId(opt?.value || null)}\r\n-                placeholder=\"Selecione um influenciador\"\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Plataforma */}\r\n-            <div className=\"space-y-1.5 mb-4\">\r\n-              <Label>Plataforma</Label>\r\n-              <Select\r\n-                options={plataformas.map((p) => ({\r\n-                  value: p.id,\r\n-                  label: p.nome,\r\n-                }))}\r\n-                onChange={(opt) => setPlataformaId(opt?.value || null)}\r\n-                placeholder=\"Selecione a plataforma\"\r\n-              />\r\n-            </div>\r\n-\r\n-            {/* Valor */}\r\n-            <div className=\"space-y-1.5 mb-4\">\r\n-              <Label>Valor da Recarga</Label>\r\n-              <InputGroup>\r\n-                <InputGroupText>R$</InputGroupText>\r\n-                <Input\r\n-                  type=\"number\"\r\n-                  value={valor}\r\n-                  onChange={(e) => setValor(Number(e.target.value))}\r\n-                />\r\n-              </InputGroup>\r\n-            </div>\r\n-\r\n-            {/* Datas */}\r\n-            <div className=\"grid grid-cols-2 gap-4 mb-6\">\r\n-              <div className=\"space-y-1.5\">\r\n-                <Label>Data de Início</Label>\r\n-                <Popover>\r\n-                  <PopoverTrigger asChild>\r\n-                    <Button\r\n-                      variant=\"outline\"\r\n-                      className=\"w-full justify-start text-left\"\r\n-                    >\r\n-                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                      {format(inicio, \"dd/MM/yyyy\")}\r\n-                    </Button>\r\n-                  </PopoverTrigger>\r\n-                  <PopoverContent className=\"w-auto p-0\">\r\n-                    <Calendar\r\n-                      mode=\"single\"\r\n-                      selected={inicio}\r\n-                      onSelect={(date) => date && setInicio(date)}\r\n-                    />\r\n-                  </PopoverContent>\r\n-                </Popover>\r\n-              </div>\r\n-              <div className=\"space-y-1.5\">\r\n-                <Label>Data de Término</Label>\r\n-                <Popover>\r\n-                  <PopoverTrigger asChild>\r\n-                    <Button\r\n-                      variant=\"outline\"\r\n-                      className=\"w-full justify-start text-left\"\r\n-                    >\r\n-                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                      {format(termino, \"dd/MM/yyyy\")}\r\n-                    </Button>\r\n-                  </PopoverTrigger>\r\n-                  <PopoverContent className=\"w-auto p-0\">\r\n-                    <Calendar\r\n-                      mode=\"single\"\r\n-                      selected={termino}\r\n-                      onSelect={(date) => date && setTermino(date)}\r\n-                    />\r\n-                  </PopoverContent>\r\n-                </Popover>\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Botões */}\r\n-            <div className=\"flex justify-end gap-2\">\r\n-              <Button variant=\"ghost\" onClick={() => setModalOpen(false)}>\r\n-                Cancelar\r\n-              </Button>\r\n-              <Button onClick={handleSave}>Adicionar Recarga</Button>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1745467238090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,10 @@\n   influenciadores: Influenciador[];\r\n }\r\n \r\n export default function RecargasModal({ open, setOpen, onSave, influenciadores }: Props) {\r\n+  if (!open) return null;\r\n+\r\n   const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n   const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n   const [valor, setValor] = useState<number>(0);\r\n   const [inicio, setInicio] = useState<Date>(new Date());\r\n@@ -130,5 +132,5 @@\n         </div>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745467426542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,28 @@\n \"use client\";\r\n \r\n-import { useState } from 'react';\r\n-import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+} from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n+import { Input } from \"@/components/ui/input\";\r\n import { Label } from \"@/components/ui/label\";\r\n-import { Input } from \"@/components/ui/input\";\r\n import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n import { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\n import { Calendar } from \"@/components/ui/calendar\";\r\n import { CalendarIcon } from \"lucide-react\";\r\n-import Select from 'react-select';\r\n-import { format } from 'date-fns';\r\n+import Select from \"react-select\";\r\n+import { useState } from \"react\";\r\n+import { format } from \"date-fns\";\r\n import { Influenciador } from \"@/lib/influenciadores\";\r\n import { plataformas } from \"@/lib/data\";\r\n \r\n interface Props {\r\n   open: boolean;\r\n-  setOpen: (open: boolean) => void;\r\n+  onClose: () => void;\r\n   onSave: (recarga: {\r\n     influenciadorId: string;\r\n     plataformaId: string;\r\n     valor: number;\r\n@@ -26,11 +31,14 @@\n   }) => void;\r\n   influenciadores: Influenciador[];\r\n }\r\n \r\n-export default function RecargasModal({ open, setOpen, onSave, influenciadores }: Props) {\r\n-  if (!open) return null;\r\n-\r\n+export default function RecargasModal({\r\n+  open,\r\n+  onClose,\r\n+  onSave,\r\n+  influenciadores,\r\n+}: Props) {\r\n   const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n   const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n   const [valor, setValor] = useState<number>(0);\r\n   const [inicio, setInicio] = useState<Date>(new Date());\r\n@@ -38,23 +46,29 @@\n \r\n   const handleSubmit = () => {\r\n     if (!influenciadorId || !plataformaId || valor <= 0) return;\r\n     onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n-    setOpen(false);\r\n+    onClose();\r\n   };\r\n \r\n+  if (!open) return null; // 👈 isso impede renderização se estiver fechado\r\n+\r\n   return (\r\n-    <Dialog open={open} onOpenChange={setOpen}>\r\n+    <Dialog open={open} onOpenChange={onClose}>\r\n       <DialogContent className=\"max-w-lg w-full\">\r\n         <DialogHeader>\r\n           <DialogTitle>Adicionar Recarga</DialogTitle>\r\n         </DialogHeader>\r\n+\r\n         <div className=\"space-y-4\">\r\n           {/* Influenciador */}\r\n           <div className=\"space-y-1.5\">\r\n             <Label>Influenciador</Label>\r\n             <Select\r\n-              options={influenciadores.map(inf => ({ value: inf.id, label: inf.nome }))}\r\n+              options={influenciadores.map(inf => ({\r\n+                value: inf.id,\r\n+                label: inf.nome,\r\n+              }))}\r\n               onChange={opt => setInfluenciadorId(opt?.value || null)}\r\n               placeholder=\"Selecione um influenciador\"\r\n             />\r\n           </div>\r\n@@ -62,9 +76,12 @@\n           {/* Plataforma */}\r\n           <div className=\"space-y-1.5\">\r\n             <Label>Plataforma</Label>\r\n             <Select\r\n-              options={plataformas.map(p => ({ value: p.id, label: p.nome }))}\r\n+              options={plataformas.map(p => ({\r\n+                value: p.id,\r\n+                label: p.nome,\r\n+              }))}\r\n               onChange={opt => setPlataformaId(opt?.value || null)}\r\n               placeholder=\"Selecione a plataforma\"\r\n             />\r\n           </div>\r\n@@ -84,53 +101,46 @@\n \r\n           {/* Datas */}\r\n           <div className=\"grid grid-cols-2 gap-4\">\r\n             <div className=\"space-y-1.5\">\r\n-              <Label>Data de Início</Label>\r\n+              <Label>Início</Label>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(inicio, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={inicio}\r\n-                    onSelect={date => date && setInicio(date)}\r\n-                  />\r\n+                  <Calendar mode=\"single\" selected={inicio} onSelect={(d) => d && setInicio(d)} />\r\n                 </PopoverContent>\r\n               </Popover>\r\n             </div>\r\n+\r\n             <div className=\"space-y-1.5\">\r\n-              <Label>Data de Término</Label>\r\n+              <Label>Término</Label>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(termino, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={termino}\r\n-                    onSelect={date => date && setTermino(date)}\r\n-                  />\r\n+                  <Calendar mode=\"single\" selected={termino} onSelect={(d) => d && setTermino(d)} />\r\n                 </PopoverContent>\r\n               </Popover>\r\n             </div>\r\n           </div>\r\n \r\n-          {/* Botões */}\r\n+          {/* Ações */}\r\n           <div className=\"flex justify-end gap-2\">\r\n-            <Button variant=\"ghost\" onClick={() => setOpen(false)}>\r\n+            <Button variant=\"ghost\" onClick={onClose}>\r\n               Cancelar\r\n             </Button>\r\n\\ No newline at end of file\n             <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n           </div>\r\n         </div>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n-}\n+}\r\n"
                },
                {
                    "date": 1745467426760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,5 +142,5 @@\n         </div>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1745468028991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n import { useState } from \"react\";\r\n import { format } from \"date-fns\";\r\n import { Influenciador } from \"@/lib/influenciadores\";\r\n import { plataformas } from \"@/lib/data\";\r\n+import React from \"react\";\r\n \r\n interface Props {\r\n   open: boolean;\r\n   onClose: () => void;\r\n@@ -42,9 +43,14 @@\n   const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n   const [valor, setValor] = useState<number>(0);\r\n   const [inicio, setInicio] = useState<Date>(new Date());\r\n   const [termino, setTermino] = useState<Date>(new Date());\r\n+  const handleOpenChange = React.useCallback((isOpen: boolean) => {\r\n+    if (!isOpen) onClose();\r\n+  }, [onClose]);\r\n \r\n+  if (!open) return null;\r\n+\r\n   const handleSubmit = () => {\r\n     if (!influenciadorId || !plataformaId || valor <= 0) return;\r\n     onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n     onClose();\r\n@@ -52,10 +58,11 @@\n \r\n   if (!open) return null; // 👈 isso impede renderização se estiver fechado\r\n \r\n   return (\r\n-    <Dialog open={open} onOpenChange={onClose}>\r\n-      <DialogContent className=\"max-w-lg w-full\">\r\n+    <Dialog open={open} onOpenChange={handleOpenChange}>\r\n+      <DialogContent  aria-describedby=\"descricao-recarga\"\r\n+  className=\"max-w-lg w-full\">\r\n         <DialogHeader>\r\n           <DialogTitle>Adicionar Recarga</DialogTitle>\r\n         </DialogHeader>\r\n \r\n@@ -133,9 +140,9 @@\n           </div>\r\n \r\n           {/* Ações */}\r\n           <div className=\"flex justify-end gap-2\">\r\n-            <Button variant=\"ghost\" onClick={onClose}>\r\n+            <Button variant=\"ghost\">\r\n               Cancelar\r\n             </Button>\r\n             <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n           </div>\r\n"
                },
                {
                    "date": 1745469394106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \"use client\";\r\n \r\n+import React, { useState, useCallback } from \"react\";\r\n import {\r\n   Dialog,\r\n   DialogContent,\r\n   DialogHeader,\r\n@@ -12,14 +13,20 @@\n import { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\n import { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\n import { Calendar } from \"@/components/ui/calendar\";\r\n import { CalendarIcon } from \"lucide-react\";\r\n-import Select from \"react-select\";\r\n-import { useState } from \"react\";\r\n import { format } from \"date-fns\";\r\n+\r\n+import {\r\n+  Select as ShadSelect,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+} from \"@/components/ui/select\";\r\n+\r\n import { Influenciador } from \"@/lib/influenciadores\";\r\n import { plataformas } from \"@/lib/data\";\r\n-import React from \"react\";\r\n \r\n interface Props {\r\n   open: boolean;\r\n   onClose: () => void;\r\n@@ -38,60 +45,79 @@\n   onClose,\r\n   onSave,\r\n   influenciadores,\r\n }: Props) {\r\n+  // Estados locais\r\n   const [influenciadorId, setInfluenciadorId] = useState<string | null>(null);\r\n-  const [plataformaId, setPlataformaId] = useState<string | null>(null);\r\n-  const [valor, setValor] = useState<number>(0);\r\n-  const [inicio, setInicio] = useState<Date>(new Date());\r\n-  const [termino, setTermino] = useState<Date>(new Date());\r\n-  const handleOpenChange = React.useCallback((isOpen: boolean) => {\r\n+  const [plataformaId, setPlataformaId]       = useState<string | null>(null);\r\n+  const [valor, setValor]                     = useState<number>(0);\r\n+  const [inicio, setInicio]                   = useState<Date>(new Date());\r\n+  const [termino, setTermino]                 = useState<Date>(new Date());\r\n+\r\n+  // Callback para fechar o Dialog apenas quando isOpen ficar false\r\n+  const handleOpenChange = useCallback((isOpen: boolean) => {\r\n     if (!isOpen) onClose();\r\n   }, [onClose]);\r\n \r\n+  // Impede renderização quando fechado\r\n   if (!open) return null;\r\n \r\n+  // Envio do formulário\r\n   const handleSubmit = () => {\r\n     if (!influenciadorId || !plataformaId || valor <= 0) return;\r\n     onSave({ influenciadorId, plataformaId, valor, inicio, termino });\r\n     onClose();\r\n   };\r\n \r\n-  if (!open) return null; // 👈 isso impede renderização se estiver fechado\r\n-\r\n   return (\r\n     <Dialog open={open} onOpenChange={handleOpenChange}>\r\n-      <DialogContent  aria-describedby=\"descricao-recarga\"\r\n-  className=\"max-w-lg w-full\">\r\n+      <DialogContent\r\n+        aria-describedby=\"descricao-recarga\"\r\n+        className=\"max-w-lg w-full\"\r\n+      >\r\n         <DialogHeader>\r\n           <DialogTitle>Adicionar Recarga</DialogTitle>\r\n         </DialogHeader>\r\n \r\n         <div className=\"space-y-4\">\r\n           {/* Influenciador */}\r\n           <div className=\"space-y-1.5\">\r\n             <Label>Influenciador</Label>\r\n-            <Select\r\n-              options={influenciadores.map(inf => ({\r\n-                value: inf.id,\r\n-                label: inf.nome,\r\n-              }))}\r\n-              onChange={opt => setInfluenciadorId(opt?.value || null)}\r\n-              placeholder=\"Selecione um influenciador\"\r\n-            />\r\n+            <ShadSelect\r\n+              value={influenciadorId ?? \"\"}\r\n+              onValueChange={(val) => setInfluenciadorId(val || null)}\r\n+            >\r\n+              <SelectTrigger className=\"w-full\">\r\n+                <SelectValue placeholder=\"Selecione um influenciador\" />\r\n+              </SelectTrigger>\r\n+              <SelectContent>\r\n+                {influenciadores.map((inf) => (\r\n+                  <SelectItem key={inf.id} value={inf.id}>\r\n+                    {inf.nome}\r\n+                  </SelectItem>\r\n+                ))}\r\n+              </SelectContent>\r\n+            </ShadSelect>\r\n           </div>\r\n \r\n           {/* Plataforma */}\r\n           <div className=\"space-y-1.5\">\r\n             <Label>Plataforma</Label>\r\n-            <Select\r\n-              options={plataformas.map(p => ({\r\n-                value: p.id,\r\n-                label: p.nome,\r\n-              }))}\r\n-              onChange={opt => setPlataformaId(opt?.value || null)}\r\n-              placeholder=\"Selecione a plataforma\"\r\n-            />\r\n+            <ShadSelect\r\n+              value={plataformaId ?? \"\"}\r\n+              onValueChange={(val) => setPlataformaId(val || null)}\r\n+            >\r\n+              <SelectTrigger className=\"w-full\">\r\n+                <SelectValue placeholder=\"Selecione a plataforma\" />\r\n+              </SelectTrigger>\r\n+              <SelectContent>\r\n+                {plataformas.map((pl) => (\r\n+                  <SelectItem key={pl.id} value={pl.id}>\r\n+                    {pl.nome}\r\n+                  </SelectItem>\r\n+                ))}\r\n+              </SelectContent>\r\n+            </ShadSelect>\r\n           </div>\r\n \r\n           {/* Valor */}\r\n           <div className=\"space-y-1.5\">\r\n@@ -100,9 +126,9 @@\n               <InputGroupText>R$</InputGroupText>\r\n               <Input\r\n                 type=\"number\"\r\n                 value={valor}\r\n-                onChange={e => setValor(Number(e.target.value))}\r\n+                onChange={(e) => setValor(Number(e.target.value))}\r\n               />\r\n             </InputGroup>\r\n           </div>\r\n \r\n@@ -111,43 +137,62 @@\n             <div className=\"space-y-1.5\">\r\n               <Label>Início</Label>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                  <Button\r\n+                    variant=\"outline\"\r\n+                    className=\"w-full justify-start text-left\"\r\n+                  >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(inicio, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar mode=\"single\" selected={inicio} onSelect={(d) => d && setInicio(d)} />\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={inicio}\r\n+                    onSelect={(d) => d && setInicio(d)}\r\n+                  />\r\n                 </PopoverContent>\r\n               </Popover>\r\n             </div>\r\n \r\n             <div className=\"space-y-1.5\">\r\n               <Label>Término</Label>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n-                  <Button variant=\"outline\" className=\"w-full justify-start text-left\">\r\n+                  <Button\r\n+                    variant=\"outline\"\r\n+                    className=\"w-full justify-start text-left\"\r\n+                  >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(termino, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent className=\"w-auto p-0\">\r\n-                  <Calendar mode=\"single\" selected={termino} onSelect={(d) => d && setTermino(d)} />\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={termino}\r\n+                    onSelect={(d) => d && setTermino(d)}\r\n+                  />\r\n                 </PopoverContent>\r\n               </Popover>\r\n             </div>\r\n           </div>\r\n \r\n           {/* Ações */}\r\n           <div className=\"flex justify-end gap-2\">\r\n-            <Button variant=\"ghost\">\r\n+            <Button variant=\"ghost\" onClick={onClose}>\r\n               Cancelar\r\n             </Button>\r\n             <Button onClick={handleSubmit}>Adicionar Recarga</Button>\r\n           </div>\r\n         </div>\r\n+\r\n+        {/* Descrição para acessibilidade */}\r\n+        <p id=\"descricao-recarga\" className=\"sr-only\">\r\n+          Modal para adicionar nova recarga no sistema\r\n+        </p>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745469627562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,9 @@\n               <Label>Início</Label>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n+                    color=\"secondary\"\r\n                     variant=\"outline\"\r\n                     className=\"w-full justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n@@ -160,8 +161,9 @@\n               <Label>Término</Label>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n+                  color=\"secondary\"\r\n                     variant=\"outline\"\r\n                     className=\"w-full justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n"
                },
                {
                    "date": 1745469718262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     color=\"secondary\"\r\n                     variant=\"outline\"\r\n-                    className=\"w-full justify-start text-left\"\r\n+                    className=\"w-full text-sm justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(inicio, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n@@ -163,9 +163,9 @@\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                   color=\"secondary\"\r\n                     variant=\"outline\"\r\n-                    className=\"w-full justify-start text-left\"\r\n+                    className=\"w-full text-sm justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(termino, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n"
                },
                {
                    "date": 1745469742219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,9 @@\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent className=\"w-auto p-0\">\r\n                   <Calendar\r\n+                  className=\" text-sm \"\r\n                     mode=\"single\"\r\n                     selected={inicio}\r\n                     onSelect={(d) => d && setInicio(d)}\r\n                   />\r\n"
                },
                {
                    "date": 1745469750340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,8 @@\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent className=\"w-auto p-0\">\r\n                   <Calendar\r\n-                  className=\" text-sm \"\r\n                     mode=\"single\"\r\n                     selected={inicio}\r\n                     onSelect={(d) => d && setInicio(d)}\r\n                   />\r\n"
                },
                {
                    "date": 1745469768583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     color=\"secondary\"\r\n                     variant=\"outline\"\r\n-                    className=\"w-full text-sm justify-start text-left\"\r\n+                    className=\"w-full text-xl justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(inicio, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n"
                },
                {
                    "date": 1745469788574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     color=\"secondary\"\r\n                     variant=\"outline\"\r\n-                    className=\"w-full text-xl justify-start text-left\"\r\n+                    className=\"w-full text-xs justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(inicio, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n@@ -163,9 +163,9 @@\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                   color=\"secondary\"\r\n                     variant=\"outline\"\r\n-                    className=\"w-full text-sm justify-start text-left\"\r\n+                    className=\"w-full text-xs justify-start text-left\"\r\n                   >\r\n                     <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {format(termino, \"dd/MM/yyyy\")}\r\n                   </Button>\r\n"
                }
            ],
            "date": 1745463040798,
            "name": "Commit-0",
            "content": ""
        }
    ]
}