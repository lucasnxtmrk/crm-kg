{
    "sourceFile": "components/InfluenciadorModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1746826480383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746826879946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,16 @@\n import { motion } from \"framer-motion\";\r\n import { Loader2 } from 'lucide-react';\r\n import { format } from \"date-fns\";\r\n import { cn } from \"@/lib/utils\";\r\n-import { size } from \"@/lib/type\";\r\n+import { size } from \"@/lib/types\";\r\n import SalariosMensaisModal from \"@/components/SalariosMensaisModal\";\r\n \r\n \r\n+interface DialogContentProps {\r\n+  size?: size | undefined;\r\n+}\r\n \r\n-\r\n interface OptionType {\r\n   value: string;\r\n   label: string;\r\n   icon?: string;\r\n@@ -326,15 +328,15 @@\n \r\n \r\n   return (\r\n     <>\r\n-    <Dialog open={open} onOpenChange={(isOpen) => {\r\n+    <Dialog  open={open} onOpenChange={(isOpen) => {\r\n   if (!isOpen) {\r\n     onClose(); // fecha quando clica fora ou no X\r\n   }\r\n }}>\r\n   {influenciador && (\r\n-    <DialogContent size=\"full\">\r\n+    <DialogContent size=\"xl\">\r\n     <div className=\"max-w-4xl w-full\">\r\n \r\n \r\n         <div className=\"grid grid-cols-[35%_1fr] gap-8\">\r\n"
                },
                {
                    "date": 1746827026640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,8 @@\n import { size } from \"@/lib/types\";\r\n import SalariosMensaisModal from \"@/components/SalariosMensaisModal\";\r\n \r\n \r\n-interface DialogContentProps {\r\n-  size?: size | undefined;\r\n-}\r\n-\r\n interface OptionType {\r\n   value: string;\r\n   label: string;\r\n   icon?: string;\r\n"
                },
                {
                    "date": 1746827433477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n     onClose(); // fecha quando clica fora ou no X\r\n   }\r\n }}>\r\n   {influenciador && (\r\n-    <DialogContent size=\"xl\">\r\n+    <DialogContent size=\"lg\">\r\n     <div className=\"max-w-4xl w-full\">\r\n \r\n \r\n         <div className=\"grid grid-cols-[35%_1fr] gap-8\">\r\n"
                },
                {
                    "date": 1746828067310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n     onClose(); // fecha quando clica fora ou no X\r\n   }\r\n }}>\r\n   {influenciador && (\r\n-    <DialogContent size=\"lg\">\r\n+    <DialogContent size=\"full\">\r\n     <div className=\"max-w-4xl w-full\">\r\n \r\n \r\n         <div className=\"grid grid-cols-[35%_1fr] gap-8\">\r\n"
                },
                {
                    "date": 1746828188909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,11 +332,9 @@\n }}>\r\n   {influenciador && (\r\n     <DialogContent size=\"full\">\r\n     <div className=\"max-w-4xl w-full\">\r\n-\r\n-\r\n-        <div className=\"grid grid-cols-[35%_1fr] gap-8\">\r\n+        <div className=\"grid grid-cols-[45%_1fr] gap-8\">\r\n         <Button\r\n   className={cn(\r\n     \"fixed bottom-6 right-6 z-50 flex items-center gap-2\",\r\n     isSaving ? \"bg-transparent text-primary\" : \"bg-primary text-white\"\r\n@@ -812,9 +810,9 @@\n \r\n \r\n           </Tabs>\r\n         </div>\r\n-        </div>\r\n+    </div>\r\n     </DialogContent>\r\n     )}\r\n     </Dialog>\r\n       {/* 2) RecargasModal irmão do Dialog */}\r\n"
                },
                {
                    "date": 1746828291436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n   }\r\n }}>\r\n   {influenciador && (\r\n     <DialogContent size=\"full\">\r\n-    <div className=\"max-w-4xl w-full\">\r\n+    <div className=\"w-full\">\r\n         <div className=\"grid grid-cols-[45%_1fr] gap-8\">\r\n         <Button\r\n   className={cn(\r\n     \"fixed bottom-6 right-6 z-50 flex items-center gap-2\",\r\n"
                }
            ],
            "date": 1746826480383,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n} from \"@/components/ui/dialog\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n  Select as ShadSelect,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/components/ui/tabs\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nimport Image from \"next/image\";\r\nimport { Pencil, AlertCircle } from \"lucide-react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { Dialog as InnerDialog, DialogContent as InnerContent } from \"@/components/ui/dialog\";\r\nimport { Influenciador, Recarga, Plataforma } from \"@/lib/types\";\r\nimport { InputGroup, InputGroupText } from \"@/components/ui/input-group\";\r\nimport RecargasModal from \"@/components/RecargasModal\";\r\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\r\nimport { useMemo } from 'react'\r\nimport { AtSign, ArrowRight } from 'lucide-react';\r\nimport RecargaCard from \"@/components/RecargaCard\"; // (ou o caminho correto que você colocou)\r\nimport { motion } from \"framer-motion\";\r\nimport { Loader2 } from 'lucide-react';\r\nimport { format } from \"date-fns\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { size } from \"@/lib/type\";\r\nimport SalariosMensaisModal from \"@/components/SalariosMensaisModal\";\r\n\r\n\r\n\r\n\r\ninterface OptionType {\r\n  value: string;\r\n  label: string;\r\n  icon?: string;\r\n}\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  influenciador: Influenciador | null;\r\n  onUpdate?: (updated: Influenciador) => void;\r\n}\r\n\r\nconst InfluenciadorModal = ({ open, onClose, influenciador, onUpdate }: Props) => {\r\n  const [instagramHandle, setInstagramHandle] = useState<string>(\"\");\r\n  const [hoverInstagram, setHoverInstagram] = useState(false);\r\n  const [plataformasSelecionadas, setPlataformasSelecionadas] = useState<string[]>([]);\r\n  const [previewImage, setPreviewImage] = useState<string | undefined>();\r\n  const [status, setStatus] = useState<Influenciador[\"status\"]>(\"bronze\");\r\n  const [motivo_banimento, setmotivo_banimento] = useState(\"\");\r\n  const [openMotivo, setOpenMotivo] = useState(false);\r\n  const inputFileRef = useRef<HTMLInputElement>(null);\r\n  const [nome, setNome] = useState<string>(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [cpf, setCpf] = useState(\"\");\r\n  const [chavepix, setChavePix] = useState(\"\");\r\n  const [localInfluenciador, setLocalInfluenciador] = useState<Influenciador | null>(null);\r\n  const [plataformas, setPlataformas] = useState<Plataforma[]>([]);\r\n  const [contratado, setContratado] = useState(false);\r\n  const [salarioFixo, setSalarioFixo] = useState(false);\r\n  const [modalSalariosOpen, setModalSalariosOpen] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchPlataformas() {\r\n      const response = await fetch(\"/api/plataformas\");\r\n      const data = await response.json();\r\n      setPlataformas(data);\r\n    }\r\n    \r\n    fetchPlataformas();\r\n  }, []);\r\n  useEffect(() => {\r\n    setLocalInfluenciador(influenciador);\r\n  }, [influenciador]);\r\n\r\n  const platformOptions: OptionType[] = plataformas.map((p) => ({\r\n    value: p.id,\r\n    label: p.nome,\r\n  }));\r\n  \r\n  const [recargaModalOpen, setRecargaModalOpen] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  const selectedOptions = platformOptions.filter((opt) =>\r\n    plataformasSelecionadas.includes(opt.value)\r\n  );\r\n  useEffect(() => {\r\n    if (influenciador) {\r\n      const fallback = `https://ui-avatars.com/api/?name=${encodeURIComponent(\r\n        influenciador.nome\r\n      )}&background=random&color=fff`;\r\n        \r\n      setNome(influenciador.nome || \"\");\r\n      setInstagramHandle(influenciador.instagram.replace(/^@/, \"\"));\r\n      setEmail(influenciador.email || \"\");\r\n      setCpf(influenciador.cpf || \"\");\r\n      setPreviewImage(influenciador.imagem || fallback);\r\n      setChavePix(influenciador.chavepix || \"\");\r\n      setmotivo_banimento(influenciador.motivo_banimento || \"\");\r\n      setStatus(influenciador.status);\r\n      setPlataformasSelecionadas(\r\n        influenciador.cadastros_influenciadores.map((c) => c.plataforma_id)\r\n      );\r\n      setContratado(influenciador.contratado ?? false);\r\nsetSalarioFixo(influenciador.salario_fixo ?? false);\r\n\r\n    }\r\n  }, [influenciador]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (status === \"banido\") {\r\n      setOpenMotivo(true);\r\n    }\r\n  }, [status]);\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setPreviewImage(reader.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleCloseAndUpdate = async (openState: boolean) => {\r\n    if (!openState && influenciador) {\r\n      setIsSaving(true); // começa salvando\r\n  \r\n      const minimalData = {\r\n        nome,\r\n        imagem: previewImage,\r\n        instagram: `@${instagramHandle}`,\r\n        email,\r\n        telefone: localInfluenciador?.telefone || \"\",\r\n        cpf,\r\n        chavepix,\r\n        status,\r\n        motivo_banimento,\r\n        contratado: localInfluenciador?.contratado ?? false,\r\n        salario_fixo: localInfluenciador?.salario_fixo ?? false,\r\n        cadastros_influenciadores: localInfluenciador?.cadastros_influenciadores || [],\r\n        salarios_mensais: localInfluenciador?.salarios_mensais || [],\r\n\r\n      };\r\n      \r\n  \r\n      try {\r\n        // 1. Primeiro faz o PATCH para atualizar\r\n        const response = await fetch(`/api/influenciadores/${influenciador.id}`, {\r\n          method: \"PATCH\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(minimalData),\r\n        });\r\n  \r\n        if (!response.ok) throw new Error(\"Erro ao salvar influenciador.\");\r\n  \r\n        // 2. Depois faz um novo GET para buscar o influenciador atualizado\r\n        const atualizadoResponse = await fetch(`/api/influenciadores/${influenciador.id}`);\r\n        if (!atualizadoResponse.ok) throw new Error(\"Erro ao buscar influenciador atualizado.\");\r\n  \r\n        const atualizado = await atualizadoResponse.json();\r\n  \r\n        // Atualiza tanto o modal quanto o pai\r\n        onUpdate?.(atualizado);\r\n        setLocalInfluenciador(atualizado);\r\n  \r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Erro ao salvar influenciador. Verifique sua conexão.\");\r\n      } finally {\r\n        setIsSaving(false); // sempre libera o botão no final\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  const [imagemErro, setImagemErro] = useState(false);\r\n  useEffect(() => {\r\n    setImagemErro(false);\r\n  }, [influenciador]);\r\n\r\n  const reloadInfluenciador = async () => {\r\n    if (!influenciador) return;\r\n    try {\r\n      const response = await fetch(`/api/influenciadores/${influenciador.id}`);\r\n      if (!response.ok) throw new Error(\"Erro ao recarregar influenciador.\");\r\n      const data = await response.json();\r\n      onUpdate?.(data);\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Erro ao recarregar influenciador.\");\r\n    }\r\n  };\r\n\r\n  function isCacheValid(cached: any): boolean {\r\n    if (!cached?.lastFetched) return false;\r\n    const diffInDays = (Date.now() - cached.lastFetched) / (1000 * 60 * 60 * 24);\r\n    return diffInDays < 30;\r\n  }\r\n\r\n  const hoje = new Date().toISOString().split(\"T\")[0];\r\n  const hojeTimestamp = Date.parse(hoje);\r\n\r\n  const todasRecargas = useMemo(() => {\r\n    return localInfluenciador?.cadastros_influenciadores.flatMap((c) => c.recargas) || [];\r\n  }, [localInfluenciador]);\r\n  \r\n  const recargasAtivas = useMemo(() => {\r\n    return todasRecargas.filter((rec) => {\r\n      const recTermino = Date.parse(rec.termino);\r\n      const cadastro = localInfluenciador?.cadastros_influenciadores.find(c => c.id === rec.cadastro_id);\r\n      return cadastro && plataformasSelecionadas.includes(cadastro.plataforma_id) && recTermino >= hojeTimestamp;\r\n    });\r\n  }, [todasRecargas, plataformasSelecionadas, hojeTimestamp, localInfluenciador]);\r\n  \r\n  const recargasHistorico = useMemo(() => {\r\n    return todasRecargas.filter((rec) => {\r\n      const recTermino = Date.parse(rec.termino);\r\n      const cadastro = localInfluenciador?.cadastros_influenciadores.find(c => c.id === rec.cadastro_id);\r\n      return cadastro && plataformasSelecionadas.includes(cadastro.plataforma_id) && recTermino < hojeTimestamp;\r\n    });\r\n  }, [todasRecargas, plataformasSelecionadas, hojeTimestamp, localInfluenciador]);\r\n  \r\n// —————— A PARTIR DAQUI ——————\r\n// quantos cards por página\r\nconst pageSize = 2;\r\n\r\n// controle de página atual\r\nconst [pageAtivas, setPageAtivas] = useState(0);\r\nconst [pageHistorico, setPageHistorico] = useState(0);\r\n\r\n// quantas páginas existem\r\nconst pageCountAtivas = Math.ceil(recargasAtivas.length / pageSize);\r\nconst pageCountHistorico = Math.ceil(recargasHistorico.length / pageSize);\r\n\r\n// fatias paginadas\r\nconst atuaisPag = useMemo(() =>\r\n  recargasAtivas.slice(\r\n    pageAtivas * pageSize,\r\n    pageAtivas * pageSize + pageSize\r\n  ),\r\n  [recargasAtivas, pageAtivas]\r\n);\r\nconst historicoPag = useMemo(() =>\r\n  recargasHistorico.slice(\r\n    pageHistorico * pageSize,\r\n    pageHistorico * pageSize + pageSize\r\n  ),\r\n  [recargasHistorico, pageHistorico]\r\n);\r\n// —————— ATÉ AQUI ——————\r\n\r\n// agora sim você pode resetar\r\nuseEffect(() => {\r\n  setPageAtivas(0);\r\n}, [recargasAtivas.length]);\r\n\r\nuseEffect(() => {\r\n  setPageHistorico(0);\r\n}, [recargasHistorico.length]);\r\n\r\n\r\n\r\nuseEffect(() => {\r\n  const username = influenciador?.instagram?.replace(/\\/$/, \"\").split(\"/\").pop()?.replace(\"@\", \"\");\r\n  if (!username) return;\r\n\r\n  const cacheKey = `insta_${username}`;\r\n  const cached = JSON.parse(localStorage.getItem(cacheKey) || \"null\");\r\n\r\n  if (isCacheValid(cached)) {\r\n    setPreviewImage(cached.profile_pic_url_hd);\r\n  }\r\n}, [influenciador]);\r\n\r\n\r\n// Gera uma imagem \"random\" baseada no nome (usando ui-avatars.com)\r\nconst fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(\r\n  influenciador?.nome || \"Sem Nome\"\r\n)}&background=random&color=fff`;\r\n\r\n\r\n\r\nconst totalAtingido = useMemo(() => {\r\n  return todasRecargas.reduce(\r\n    (sum, rec) => sum + Number(rec.atingido || 0),\r\n    0\r\n  );\r\n}, [todasRecargas]);\r\n\r\nconst reembolsoPendente = useMemo(() => {\r\n  return todasRecargas\r\n    .filter((rec) => rec.reembolso_status === \"pendente\")\r\n    .reduce(\r\n      (sum, rec) => sum + Number(rec.reembolso || 0),\r\n      0\r\n    );\r\n}, [todasRecargas]);\r\n\r\nconst totalDepositantes = useMemo(() => {\r\n  return todasRecargas.reduce((sum, rec) => sum + (rec.depositantes_atingido || 0), 0);\r\n}, [todasRecargas]);\r\n\r\n\r\n  return (\r\n    <>\r\n    <Dialog open={open} onOpenChange={(isOpen) => {\r\n  if (!isOpen) {\r\n    onClose(); // fecha quando clica fora ou no X\r\n  }\r\n}}>\r\n  {influenciador && (\r\n    <DialogContent size=\"full\">\r\n    <div className=\"max-w-4xl w-full\">\r\n\r\n\r\n        <div className=\"grid grid-cols-[35%_1fr] gap-8\">\r\n        <Button\r\n  className={cn(\r\n    \"fixed bottom-6 right-6 z-50 flex items-center gap-2\",\r\n    isSaving ? \"bg-transparent text-primary\" : \"bg-primary text-white\"\r\n  )}\r\n  onClick={async () => {\r\n    await handleCloseAndUpdate(false);\r\n    await reloadInfluenciador();\r\n    onClose();\r\n    setIsSaving(false);\r\n  }}\r\n  disabled={isSaving}\r\n  variant=\"default\"\r\n>\r\n  {isSaving && <Loader2 className=\"w-4 h-4 animate-spin\" />}\r\n  {isSaving ? \"Salvando...\" : \"Salvar Alterações\"}\r\n</Button>\r\n\r\n\r\n\r\n\r\n          {/* Esquerda */}\r\n          <div className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-[auto_1fr] items-center gap-4 items-start\">\r\n              <div className=\"relative w-16 h-16 group\">\r\n              <Image\r\n  src={\r\n    imagemErro\r\n      ? \"/images/avatar/placeholder.png\"\r\n      : previewImage || \"/images/avatar/placeholder.png\"\r\n  }\r\n  alt={influenciador.nome}\r\n  fill\r\n  onError={() => setImagemErro(true)}\r\n  unoptimized\r\n  className=\"rounded-full object-cover border\"\r\n/>\r\n                <div\r\n                  className=\"absolute inset-0 bg-black/50 rounded-full opacity-0 group-hover:opacity-100 flex items-center justify-center cursor-pointer transition\"\r\n                  onClick={() => inputFileRef.current?.click()}\r\n                >\r\n                  <Pencil className=\"text-white w-5 h-5\" />\r\n                </div>\r\n                <input ref={inputFileRef} type=\"file\" accept=\"image/*\" onChange={handleImageChange} className=\"hidden\" />\r\n              </div>\r\n              <div className=\"grid grid-cols-2 flex gap-2\">\r\n                <div className=\"space-y-1.5\">\r\n                  <Label htmlFor=\"nome\">Nome do Blogueiro</Label>\r\n                  <Input id=\"nome\" value={nome}   onChange={(e) => setNome(e.target.value)}/>\r\n                </div>\r\n                <div className=\"space-y-1.5\">\r\n  <Label htmlFor=\"instagram\">Instagram</Label>\r\n  <InputGroup>\r\n    <InputGroupText\r\n      className=\"cursor-pointer select-none\"\r\n      onClick={() => window.open(`https://instagram.com/${instagramHandle}`, \"_blank\")}\r\n      onMouseEnter={() => setHoverInstagram(true)}\r\n      onMouseLeave={() => setHoverInstagram(false)}\r\n    >\r\n      {hoverInstagram\r\n        ? <ArrowRight className=\"w-4 h-4\" />\r\n        : <AtSign className=\"w-4 h-4\" />\r\n      }\r\n    </InputGroupText>\r\n    <Input\r\n      id=\"instagram\"\r\n      value={instagramHandle}\r\n      onChange={e => setInstagramHandle(e.target.value.replace(/^@/, \"\"))}\r\n      placeholder=\"username\"\r\n    />\r\n  </InputGroup>\r\n</div>\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"grid grid-cols-[57%_1fr] flex gap-2\">\r\n            <div className=\"space-y-1.5\">\r\n              <Label htmlFor=\"cpf\">CPF</Label>\r\n              <Input\r\n        id=\"cpf\"\r\n        value={cpf}\r\n        onChange={e => setCpf(e.target.value)}\r\n      />            </div>\r\n            <div className=\"space-y-1.5\">\r\n              <Label htmlFor=\"chavepix\">Chave Pix</Label>\r\n              <Input\r\n        id=\"chavepix\"\r\n        value={chavepix}\r\n        onChange={e => setChavePix(e.target.value)}\r\n      />            </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-[57%_1fr] flex gap-2\">\r\n  \r\n            <div className=\"space-y-1.5\">\r\n              <Label htmlFor=\"email\">E-mail</Label>\r\n              <Input\r\n        id=\"email\"\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={e => setEmail(e.target.value)}\r\n      />            </div>\r\n            <div className=\"space-y-1.5\">\r\n              <Label>Data de Cadastro</Label>\r\n              <Input\r\n  value={\r\n    influenciador.data_cadastro\r\n      ? format(new Date(influenciador.data_cadastro), \"dd/MM/yyyy\")\r\n      : \"\"\r\n  }\r\n  readOnly\r\n/>\r\n            </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-1.5\">\r\n              <Label>Status</Label>\r\n              <div className=\"flex items-center gap-2\">\r\n  {/* 1) faz o select ocupar todo o espaço livre */}\r\n  <div className=\"flex-1\">\r\n  <ShadSelect\r\n  value={status}\r\n  onValueChange={(value) => setStatus(value as Influenciador[\"status\"])}\r\n>  <SelectTrigger>\r\n    <SelectValue placeholder=\"Selecione o status\" />\r\n  </SelectTrigger>\r\n  <SelectContent>\r\n    <SelectItem value=\"bronze\">Bronze</SelectItem>\r\n    <SelectItem value=\"prata\">Prata</SelectItem>\r\n    <SelectItem value=\"ouro\">Ouro</SelectItem>\r\n    <SelectItem value=\"diamante\">Diamante</SelectItem>\r\n    <SelectItem value=\"banido\">Banido</SelectItem>\r\n  </SelectContent>\r\n</ShadSelect>\r\n  </div>\r\n  <div className=\"flex gap-4\">\r\n\r\n\r\n\r\n  {/* 2) só renderiza o botão de Motivo quando banido, sem ocupar espaço antes disso */}\r\n  {status === \"banido\" && (\r\n    <Button\r\n      type=\"button\"\r\n      onClick={() => setOpenMotivo(true)}\r\n      variant=\"ghost\"\r\n      className=\"text-xs px-2 py-1 border border-destructive text-destructive hover:bg-destructive hover:text-white\"\r\n    >\r\n      <AlertCircle className=\"w-4 h-4 mr-1\" />\r\n      Motivo\r\n    </Button>\r\n  )}\r\n</div>\r\n\r\n            </div>\r\n\r\n            <InnerDialog open={openMotivo} onOpenChange={setOpenMotivo}>\r\n              <InnerContent>\r\n                <div className=\"space-y-2\">\r\n                  <Label>Motivo do Banimento</Label>\r\n                  <Textarea value={motivo_banimento} onChange={(e) => setmotivo_banimento(e.target.value)} placeholder=\"Descreva o motivo...\" />\r\n                </div>\r\n              </InnerContent>\r\n            </InnerDialog>\r\n            <div className=\"grid grid-cols-[50%_1fr] flex gap-2\">\r\n            <div className=\"space-y-1.5 flex-1\">\r\n    <Label htmlFor=\"salario_fixo\">Recebe salário fixo?</Label>\r\n    <ShadSelect\r\n      value={String(localInfluenciador?.salario_fixo ?? false)}\r\n      onValueChange={(value) =>\r\n        setLocalInfluenciador((prev) =>\r\n          prev ? { ...prev, salario_fixo: value === \"true\" } : prev\r\n        )\r\n      }\r\n    >\r\n      <SelectTrigger>\r\n        <SelectValue placeholder=\"Selecione\" />\r\n      </SelectTrigger>\r\n      <SelectContent>\r\n        <SelectItem value=\"true\">Sim</SelectItem>\r\n        <SelectItem value=\"false\">Não</SelectItem>\r\n      </SelectContent>\r\n    </ShadSelect>\r\n  </div>\r\n  <div className=\"space-y-1.5 flex-1\">\r\n    <Label htmlFor=\"contratado\">Tem contrato com a KG?</Label>\r\n    <ShadSelect\r\n      value={String(localInfluenciador?.contratado ?? false)}\r\n      onValueChange={(value) =>\r\n        setLocalInfluenciador((prev) =>\r\n          prev ? { ...prev, contratado: value === \"true\" } : prev\r\n        )\r\n      }\r\n    >\r\n      <SelectTrigger>\r\n        <SelectValue placeholder=\"Selecione\" />\r\n      </SelectTrigger>\r\n      <SelectContent>\r\n        <SelectItem value=\"true\">Sim</SelectItem>\r\n        <SelectItem value=\"false\">Não</SelectItem>\r\n      </SelectContent>\r\n    </ShadSelect>\r\n  </div>\r\n            </div>\r\n\r\n</div>\r\n{localInfluenciador?.salario_fixo && (\r\n  <Button\r\n    type=\"button\"\r\n    variant=\"outline\"\r\n    className=\"w-full\"\r\n    onClick={() => setModalSalariosOpen(true)}\r\n  >\r\n    Gerenciar Salários\r\n  </Button>\r\n)}\r\n            <div className=\"space-y-1.5\">\r\n  <Label>Plataformas Cadastradas</Label>\r\n  {plataformasSelecionadas.length === 0 ? (\r\n    <div className=\"text-sm text-muted-foreground\">\r\n      Nenhuma plataforma cadastrada.\r\n    </div>\r\n  ) : (\r\n    <div className=\"flex flex-wrap gap-2\">\r\n      {plataformasSelecionadas.map((plataformaId) => {\r\n        const plataforma = plataformas.find(p => p.id === plataformaId);\r\n        if (!plataforma) return null;\r\n        function getPlataformaColor(cor: string) {\r\n          return `bg-[${cor}] text-white border-[${cor}]`;\r\n        }\r\n        \r\n        return (\r\n          <motion.div\r\n  key={plataformaId}\r\n  initial={{ opacity: 0, scale: 0.9 }}\r\n  animate={{ opacity: 1, scale: 1 }}\r\n  transition={{ duration: 0.3 }}\r\n  className=\"flex items-center gap-2 px-3 py-1.5 rounded-md text-sm text-white border\"\r\n  style={{\r\n    backgroundColor: plataforma.cor || \"#6B7280\", // fallback cinza caso não tenha cor\r\n    borderColor: plataforma.cor || \"#6B7280\"\r\n  }}\r\n  >\r\n  <span>{plataforma.nome}</span>\r\n</motion.div>\r\n\r\n        );\r\n      })}\r\n    </div>\r\n  )}\r\n</div>\r\n\r\n            {/* Resumo de Performance do Influenciador */}\r\n<div className=\"mt-6 p-4 rounded-md border bg-muted space-y-2 text-sm\">\r\n  <div className=\"flex justify-between\">\r\n  <span className=\"text-muted-foreground\">Total de Recargas:</span>\r\n  <span className=\"font-medium\">{todasRecargas.length}</span>\r\n</div>\r\n\r\n<div className=\"flex justify-between\">\r\n  <span className=\"text-muted-foreground\">Valor Total Atingido:</span>\r\n  <span className=\"font-medium\">\r\n    R$ {Number(totalAtingido).toLocaleString('pt-BR')}\r\n  </span>\r\n</div>\r\n\r\n<div className=\"flex justify-between\">\r\n  <span className=\"text-muted-foreground\">Reembolso Pendente:</span>\r\n  <span className=\"font-medium\">\r\n    R$ {Number(reembolsoPendente).toLocaleString('pt-BR')}\r\n  </span>\r\n</div>\r\n\r\n<div className=\"flex justify-between\">\r\n  <span className=\"text-muted-foreground\">Total de Depositantes:</span>\r\n  <span className=\"font-medium\">\r\n    {Number(totalDepositantes).toLocaleString('pt-BR')}\r\n  </span>\r\n</div>\r\n\r\n\r\n\r\n  <div className=\"flex justify-between\">\r\n  <span className=\"text-muted-foreground\">Última Recarga:</span>\r\n  <span className=\"font-medium\">\r\n    {todasRecargas.length > 0\r\n      ? new Date(\r\n          todasRecargas.reduce((latest, rec) =>\r\n            new Date(rec.inicio).getTime() > new Date(latest.inicio).getTime()\r\n              ? rec\r\n              : latest\r\n          ).inicio\r\n        ).toLocaleDateString('pt-BR')\r\n      : \"Sem recargas\"}\r\n  </span>\r\n</div>\r\n\r\n</div>\r\n\r\n          </div>\r\n\r\n          {/* Direita */}\r\n          <Tabs defaultValue=\"ativas\" className=\"w-full\">\r\n          <div className=\"flex items-center mb-4 space-x-2\">\r\n          <Button\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              onClick={() => setRecargaModalOpen(true)}\r\n              className=\"w-6 h-6 bg-transparent ring-offset-transparent hover:bg-transparent border border-default-200 hover:text-gray-400\"\r\n              aria-label=\"Nova recarga\"\r\n  >\r\n    +\r\n  </Button>\r\n            <TabsList className=\"\">\r\n              <TabsTrigger value=\"ativas\">Recargas  Ativas</TabsTrigger>\r\n              <TabsTrigger value=\"historico\">Histórico</TabsTrigger>\r\n            </TabsList>\r\n          </div>\r\n          <TabsContent value=\"ativas\">\r\n  {recargasAtivas.length === 0 ? (\r\n    <div className=\"flex justify-center items-center h-[565px] text-muted-foreground text-sm text-center\">\r\n  Sem recargas ativas no momento.\r\n</div>  ) : (\r\n    <>\r\n      <div className=\"h-[500px] overflow-hidden\">\r\n        {atuaisPag.map((rec: any, idx: number) => (\r\n          <RecargaCard\r\n          key={idx}\r\n          rec={rec}\r\n          cadastro={localInfluenciador?.cadastros_influenciadores.find(c => c.id === rec.cadastro_id)}\r\n          onUpdateRecarga={(updatedRecarga) => {\r\n            if (!localInfluenciador) return;\r\n            \r\n            const novosCadastros = localInfluenciador.cadastros_influenciadores.map(cadastro => {\r\n              if (cadastro.id === updatedRecarga.cadastro_id) {\r\n                return {\r\n                  ...cadastro,\r\n                  recargas: cadastro.recargas.map(r =>\r\n                    r.id === updatedRecarga.id ? updatedRecarga : r\r\n                  )\r\n                };\r\n              }\r\n              return cadastro;\r\n            });\r\n          \r\n            setLocalInfluenciador({\r\n              ...localInfluenciador,\r\n              cadastros_influenciadores: novosCadastros,\r\n            });\r\n          }}\r\n          \r\n        />\r\n        \r\n        \r\n        ))}\r\n      </div>\r\n\r\n      {/* controles de paginação */}\r\n      <div className=\"flex items-center justify-center gap-2 py-4\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => setPageAtivas(old => Math.max(old - 1, 0))}\r\n          disabled={pageAtivas === 0}\r\n          className=\"w-8 h-8\"\r\n        >\r\n          <ChevronLeft className=\"w-4 h-4\" />\r\n        </Button>\r\n\r\n        {/* botões de página */}\r\n        {Array.from({ length: pageCountAtivas }).map((_, i) => (\r\n          <Button\r\n            key={i}\r\n            size=\"icon\"\r\n            variant={i === pageAtivas ? 'default' : 'outline'}\r\n            onClick={() => setPageAtivas(i)}\r\n            className=\"w-8 h-8\"\r\n          >\r\n            {i + 1}\r\n          </Button>\r\n        ))}\r\n\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => setPageAtivas(old => Math.min(old + 1, pageCountAtivas - 1))}\r\n          disabled={pageAtivas >= pageCountAtivas - 1}\r\n          className=\"w-8 h-8\"\r\n        >\r\n          <ChevronRight className=\"w-4 h-4\" />\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"historico\">\r\n  {recargasHistorico.length === 0 ? (\r\n    <div className=\"flex items-center justify-center h-[565px] text-muted-foreground text-sm text-center\">\r\n      Nenhuma recarga no histórico.\r\n    </div>\r\n  ) : (\r\n    <>\r\n      <div className=\"h-[500px] overflow-hidden\">\r\n      {historicoPag.map((rec: any, idx: number) => (\r\n       <RecargaCard\r\n       key={idx}\r\n       rec={rec}\r\n       cadastro={localInfluenciador?.cadastros_influenciadores.find(c => c.id === rec.cadastro_id)}\r\n       onUpdateRecarga={(updatedRecarga) => {\r\n         if (!localInfluenciador) return;\r\n         \r\n         const novosCadastros = localInfluenciador.cadastros_influenciadores.map(cadastro => {\r\n           if (cadastro.id === updatedRecarga.cadastro_id) {\r\n             return {\r\n               ...cadastro,\r\n               recargas: cadastro.recargas.map(r =>\r\n                 r.id === updatedRecarga.id ? updatedRecarga : r\r\n               )\r\n             };\r\n           }\r\n           return cadastro;\r\n         });\r\n       \r\n         setLocalInfluenciador({\r\n           ...localInfluenciador,\r\n           cadastros_influenciadores: novosCadastros,\r\n         });\r\n       }}\r\n       \r\n     />\r\n     \r\n     \r\n))}\r\n\r\n      </div>\r\n\r\n      <div className=\"flex items-center justify-center gap-2 py-4\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => setPageHistorico(old => Math.max(old - 1, 0))}\r\n          disabled={pageHistorico === 0}\r\n          className=\"w-8 h-8\"\r\n        >\r\n          <ChevronLeft className=\"w-4 h-4\" />\r\n        </Button>\r\n\r\n        {Array.from({ length: pageCountHistorico }).map((_, i) => (\r\n          <Button\r\n            key={i}\r\n            size=\"icon\"\r\n            variant={i === pageHistorico ? 'default' : 'outline'}\r\n            onClick={() => setPageHistorico(i)}\r\n            className=\"w-8 h-8\"\r\n          >\r\n            {i + 1}\r\n          </Button>\r\n        ))}\r\n\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => setPageHistorico(old => Math.min(old + 1, pageCountHistorico - 1))}\r\n          disabled={pageHistorico >= pageCountHistorico - 1}\r\n          className=\"w-8 h-8\"\r\n        >\r\n          <ChevronRight className=\"w-4 h-4\" />\r\n        </Button>\r\n      </div>\r\n      \r\n    </>\r\n  )}\r\n</TabsContent>\r\n\r\n\r\n          </Tabs>\r\n        </div>\r\n        </div>\r\n    </DialogContent>\r\n    )}\r\n    </Dialog>\r\n      {/* 2) RecargasModal irmão do Dialog */}\r\n      <RecargasModal\r\n        open={recargaModalOpen}\r\n  onClose={() => setRecargaModalOpen(false)}\r\n  onSave={(novaRecarga) => {\r\n    if (!influenciador) return; // ✅ impede erro de acesso em null\r\n  \r\n    const cadastroExistente = influenciador.cadastros_influenciadores.find(\r\n      (c) => c.id === novaRecarga.cadastro_id\r\n    );\r\n  \r\n    let novosCadastros;\r\n  \r\n    if (cadastroExistente) {\r\n      novosCadastros = influenciador.cadastros_influenciadores.map((cadastro) => {\r\n        if (cadastro.id === novaRecarga.cadastro_id) {\r\n          return {\r\n            ...cadastro,\r\n            recargas: [...cadastro.recargas, novaRecarga],\r\n          };\r\n        }\r\n        return cadastro;\r\n      });\r\n    } else {\r\n      novosCadastros = [\r\n        ...influenciador.cadastros_influenciadores,\r\n        {\r\n          id: novaRecarga.cadastro_id,\r\n          plataforma_id: novaRecarga.plataformaId,\r\n          influenciador_id: influenciador.id,\r\n          influenciador_plataforma_id: novaRecarga.plataformaInfluencerId || \"\",\r\n          recargas: [novaRecarga],\r\n        },\r\n      ];\r\n    }\r\n  \r\n    const influenciadorAtualizado = {\r\n      ...influenciador,\r\n      cadastros_influenciadores: novosCadastros,\r\n    };\r\n  \r\n    onUpdate?.(influenciadorAtualizado);\r\n    setLocalInfluenciador(influenciadorAtualizado);\r\n    setRecargaModalOpen(false);\r\n  }}\r\n  \r\n        selectedInfluenciador={influenciador ?? undefined}\r\n      />\r\n      <SalariosMensaisModal\r\n         open={modalSalariosOpen}\r\n  onClose={() => setModalSalariosOpen(false)}\r\n  salariosExistentes={localInfluenciador?.salarios_mensais || []}\r\n  onSave={(novos) => {\r\n    setLocalInfluenciador((prev) => {\r\n      if (!prev) return prev;\r\n\r\n      const existentes = prev.salarios_mensais || [];\r\n\r\n      // Substitui salários do mesmo ano+mes com os novos\r\n      const filtrados = existentes.filter(\r\n        (s) => !novos.some(n => n.ano === s.ano && n.mes === s.mes)\r\n      );\r\n\r\n      return {\r\n        ...prev,\r\n        salarios_mensais: [...filtrados, ...novos],\r\n      };\r\n    });\r\n        }}\r\n      />\r\n  </>\r\n  \r\n  );\r\n};\r\n\r\nexport default InfluenciadorModal;\r\n"
        }
    ]
}