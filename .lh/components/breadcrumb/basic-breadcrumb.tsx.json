{
    "sourceFile": "components/breadcrumb/basic-breadcrumb.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746138668459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746138725555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,10 @@\n     .replace(/\\b\\w/g, (c) => c.toUpperCase());\r\n }\r\n \r\n export default function BasicBreadcrumb() {\r\n-  const pathname = usePathname(); // Ex: /pt/influenciadores/grupos/genio777\r\n-  const segments = pathname.split('/').filter(Boolean).slice(1); // Remove o locale\r\n-\r\n+  const pathname = usePathname() || '';\r\n+  const segments = pathname.split('/').filter(Boolean).slice(1);\r\n   const locale = pathname.split('/')[1];\r\n \r\n   return (\r\n     <Breadcrumb>\r\n"
                },
                {
                    "date": 1746138871362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,41 +10,72 @@\n } from \"@/components/ui/breadcrumb\";\r\n \r\n import { usePathname } from \"next/navigation\";\r\n import Link from \"next/link\";\r\n+import { useEffect, useState } from \"react\";\r\n \r\n-// Função para deixar a string mais legível\r\n function formatSegment(segment: string) {\r\n-  return segment\r\n-    .replace(/-/g, ' ')\r\n-    .replace(/\\b\\w/g, (c) => c.toUpperCase());\r\n+  return segment.replace(/-/g, ' ').replace(/\\b\\w/g, (c) => c.toUpperCase());\r\n }\r\n \r\n export default function BasicBreadcrumb() {\r\n   const pathname = usePathname() || '';\r\n-  const segments = pathname.split('/').filter(Boolean).slice(1);\r\n-  const locale = pathname.split('/')[1];\r\n+  const segments = pathname.split('/').filter(Boolean);\r\n+  const locale = segments[0];\r\n+  const rest = segments.slice(1);\r\n \r\n+  const [lastLabel, setLastLabel] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchLastSegmentName = async () => {\r\n+      if (rest.length < 2) return;\r\n+\r\n+      const [tipo, id] = rest.slice(-2);\r\n+      if (!id) return;\r\n+\r\n+      try {\r\n+        if (tipo === 'grupos') {\r\n+          const res = await fetch('/api/grupos');\r\n+          const grupos = await res.json();\r\n+          const grupo = grupos.find((g: any) => g.id === id);\r\n+          if (grupo) setLastLabel(grupo.nome);\r\n+        } else if (tipo === 'plataformas') {\r\n+          const res = await fetch('/api/plataformas');\r\n+          const plataformas = await res.json();\r\n+          const plataforma = plataformas.find((p: any) => p.id === id);\r\n+          if (plataforma) setLastLabel(plataforma.nome);\r\n+        }\r\n+      } catch (e) {\r\n+        console.error('Erro ao buscar nome para breadcrumb:', e);\r\n+      }\r\n+    };\r\n+\r\n+    fetchLastSegmentName();\r\n+  }, [pathname]);\r\n+\r\n   return (\r\n     <Breadcrumb>\r\n       <BreadcrumbList>\r\n         <BreadcrumbItem>\r\n           <BreadcrumbLink href={`/${locale}`}>Home</BreadcrumbLink>\r\n         </BreadcrumbItem>\r\n \r\n-        {segments.map((segment, index) => {\r\n-          const href = '/' + [locale, ...segments.slice(0, index + 1)].join('/');\r\n+        {rest.map((segment, index) => {\r\n+          const href = '/' + [locale, ...rest.slice(0, index + 1)].join('/');\r\n+          const isLast = index === rest.length - 1;\r\n \r\n-          const isLast = index === segments.length - 1;\r\n-\r\n           return (\r\n             <div key={href} className=\"flex items-center\">\r\n               <BreadcrumbSeparator />\r\n               <BreadcrumbItem>\r\n                 {isLast ? (\r\n-                  <BreadcrumbPage>{formatSegment(segment)}</BreadcrumbPage>\r\n+                  <BreadcrumbPage>\r\n+                    {lastLabel || formatSegment(segment)}\r\n+                  </BreadcrumbPage>\r\n                 ) : (\r\n-                  <BreadcrumbLink href={href}>{formatSegment(segment)}</BreadcrumbLink>\r\n+                  <BreadcrumbLink href={href}>\r\n+                    {formatSegment(segment)}\r\n+                  </BreadcrumbLink>\r\n                 )}\r\n               </BreadcrumbItem>\r\n             </div>\r\n           );\r\n"
                }
            ],
            "date": 1746138668459,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\n\r\nimport { usePathname } from \"next/navigation\";\r\nimport Link from \"next/link\";\r\n\r\n// Função para deixar a string mais legível\r\nfunction formatSegment(segment: string) {\r\n  return segment\r\n    .replace(/-/g, ' ')\r\n    .replace(/\\b\\w/g, (c) => c.toUpperCase());\r\n}\r\n\r\nexport default function BasicBreadcrumb() {\r\n  const pathname = usePathname(); // Ex: /pt/influenciadores/grupos/genio777\r\n  const segments = pathname.split('/').filter(Boolean).slice(1); // Remove o locale\r\n\r\n  const locale = pathname.split('/')[1];\r\n\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href={`/${locale}`}>Home</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n\r\n        {segments.map((segment, index) => {\r\n          const href = '/' + [locale, ...segments.slice(0, index + 1)].join('/');\r\n\r\n          const isLast = index === segments.length - 1;\r\n\r\n          return (\r\n            <div key={href} className=\"flex items-center\">\r\n              <BreadcrumbSeparator />\r\n              <BreadcrumbItem>\r\n                {isLast ? (\r\n                  <BreadcrumbPage>{formatSegment(segment)}</BreadcrumbPage>\r\n                ) : (\r\n                  <BreadcrumbLink href={href}>{formatSegment(segment)}</BreadcrumbLink>\r\n                )}\r\n              </BreadcrumbItem>\r\n            </div>\r\n          );\r\n        })}\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n}\r\n"
        }
    ]
}