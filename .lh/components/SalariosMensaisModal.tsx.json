{
    "sourceFile": "components/SalariosMensaisModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746911477044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746911477044,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Select as ShadSelect,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectValue,\r\n  SelectItem,\r\n} from \"@/components/ui/select\";\r\n\r\nimport { SalarioMensal } from \"@/lib/types\";\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  anoInicial?: number;\r\n  salariosExistentes?: SalarioMensal[];\r\n  onSave: (novos: SalarioMensal[]) => void;\r\n}\r\n\r\nconst meses = [\r\n  \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\",\r\n  \"Maio\", \"Junho\", \"Julho\", \"Agosto\",\r\n  \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"\r\n];\r\n\r\nexport default function SalariosMensaisModal({\r\n  open,\r\n  onClose,\r\n  anoInicial,\r\n  salariosExistentes = [],\r\n  onSave\r\n}: Props) {\r\n  const anoAtual = new Date().getFullYear();\r\n  const anoPadrao = anoInicial ?? anoAtual;\r\n\r\n  const [anoSelecionado, setAnoSelecionado] = useState<number>(anoPadrao);\r\n  const [valoresPorAno, setValoresPorAno] = useState<Record<number, { [mes: number]: string }>>({});\r\n\r\n  const anosComDados = useMemo(() => {\r\n    const anos = new Set<number>();\r\n    salariosExistentes.forEach(s => anos.add(s.ano));\r\n    anos.add(anoAtual);\r\n    anos.add(anoAtual - 1);\r\n    return Array.from(anos).sort((a, b) => b - a);\r\n  }, [salariosExistentes]);\r\n\r\n  useEffect(() => {\r\n    if (!open) return;\r\n\r\n    const novoEstado: Record<number, { [mes: number]: string }> = {};\r\n\r\n    anosComDados.forEach(ano => {\r\n      const salariosDoAno = salariosExistentes.filter(s => s.ano === ano);\r\n      const valores: { [mes: number]: string } = {};\r\n      salariosDoAno.forEach(s => {\r\n        valores[s.mes] = String(s.valor);\r\n      });\r\n      novoEstado[ano] = valores;\r\n    });\r\n\r\n    setValoresPorAno(novoEstado);\r\n  }, [open, salariosExistentes, anosComDados, anoAtual]);\r\n\r\n  const handleChange = (mes: number, valor: string) => {\r\n    setValoresPorAno(prev => ({\r\n      ...prev,\r\n      [anoSelecionado]: {\r\n        ...prev[anoSelecionado],\r\n        [mes]: valor\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleSalvar = () => {\r\n    const valores = valoresPorAno[anoSelecionado] || {};\r\n\r\n    const preenchidos: SalarioMensal[] = Object.entries(valores)\r\n      .filter(([_, val]) => val.trim() !== \"\")\r\n      .map(([mes, val]) => ({\r\n        ano: anoSelecionado,\r\n        mes: Number(mes),\r\n        valor: parseFloat(val.replace(\",\", \".\"))\r\n      }));\r\n\r\n    onSave(preenchidos); // envia apenas os meses com valor\r\n    onClose();\r\n  };\r\n\r\n  const valoresDoAnoAtual = valoresPorAno[anoSelecionado] || {};\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle>Salários por Mês</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"space-y-1\">\r\n            <Label>Ano</Label>\r\n            <ShadSelect\r\n              value={String(anoSelecionado)}\r\n              onValueChange={(val) => setAnoSelecionado(Number(val))}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Selecione o ano\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {anosComDados.map((anoOp) => (\r\n                  <SelectItem key={anoOp} value={String(anoOp)}>\r\n                    {anoOp}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </ShadSelect>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-2\">\r\n            {meses.map((mes, idx) => (\r\n              <div key={idx} className=\"space-y-1\">\r\n                <Label>{mes}</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  placeholder=\"R$\"\r\n                  value={valoresDoAnoAtual[idx + 1] || \"\"}\r\n                  onChange={(e) => handleChange(idx + 1, e.target.value)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"flex justify-end pt-2\">\r\n            <Button onClick={handleSalvar}>Salvar</Button>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n"
        }
    ]
}