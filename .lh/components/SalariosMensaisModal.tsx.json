{
    "sourceFile": "components/SalariosMensaisModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1746290911601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746291141163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-'use client'\r\n+'use client';\r\n \r\n import { useEffect, useState } from \"react\";\r\n import {\r\n   Dialog,\r\n@@ -9,14 +9,21 @@\n } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Label } from \"@/components/ui/label\";\r\n import { Input } from \"@/components/ui/input\";\r\n+import {\r\n+  Select as ShadSelect,\r\n+  SelectTrigger,\r\n+  SelectContent,\r\n+  SelectValue,\r\n+  SelectItem,\r\n+} from \"@/components/ui/select\";\r\n+\r\n import { SalarioMensal } from \"@/lib/types\";\r\n \r\n interface Props {\r\n   open: boolean;\r\n   onClose: () => void;\r\n-  anoInicial?: number;\r\n   salariosExistentes?: SalarioMensal[];\r\n   onSave: (novos: SalarioMensal[]) => void;\r\n }\r\n \r\n@@ -26,23 +33,30 @@\n   \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"\r\n ];\r\n \r\n export default function SalariosMensaisModal({\r\n-  open, onClose, anoInicial = new Date().getFullYear(),\r\n-  salariosExistentes = [], onSave\r\n+  open,\r\n+  onClose,\r\n+  salariosExistentes = [],\r\n+  onSave\r\n }: Props) {\r\n-  const [ano, setAno] = useState(anoInicial);\r\n+  const anosDisponiveis = Array.from(new Set(salariosExistentes.map(s => s.ano))).sort((a, b) => b - a);\r\n+  const anoAtual = new Date().getFullYear();\r\n+  const anosSelect = [...new Set([anoAtual, ...anosDisponiveis])]; // mostra o ano atual mesmo que ainda não tenha salário\r\n+\r\n+  const [anoSelecionado, setAnoSelecionado] = useState<number>(anoAtual);\r\n   const [valores, setValores] = useState<{ [mes: number]: string }>({});\r\n \r\n+  // Quando muda o ano ou ao abrir, recarrega os salários daquele ano\r\n   useEffect(() => {\r\n-    const valoresIniciais: { [mes: number]: string } = {};\r\n+    const valoresDoAno: { [mes: number]: string } = {};\r\n     salariosExistentes\r\n-      .filter(s => s.ano === ano)\r\n+      .filter(s => s.ano === anoSelecionado)\r\n       .forEach(s => {\r\n-        valoresIniciais[s.mes] = String(s.valor);\r\n+        valoresDoAno[s.mes] = String(s.valor);\r\n       });\r\n-    setValores(valoresIniciais);\r\n-  }, [ano, salariosExistentes]);\r\n+    setValores(valoresDoAno);\r\n+  }, [anoSelecionado, salariosExistentes]);\r\n \r\n   const handleChange = (mes: number, valor: string) => {\r\n     setValores(prev => ({\r\n       ...prev,\r\n@@ -53,9 +67,9 @@\n   const handleSalvar = () => {\r\n     const novos: SalarioMensal[] = Object.entries(valores)\r\n       .filter(([_, val]) => val.trim() !== \"\")\r\n       .map(([mes, val]) => ({\r\n-        ano,\r\n+        ano: anoSelecionado,\r\n         mes: Number(mes),\r\n         valor: Number(val.replace(\",\", \".\"))\r\n       }));\r\n \r\n@@ -66,19 +80,29 @@\n   return (\r\n     <Dialog open={open} onOpenChange={onClose}>\r\n       <DialogContent className=\"max-w-md\">\r\n         <DialogHeader>\r\n-          <DialogTitle>Salários Mensais - {ano}</DialogTitle>\r\n+          <DialogTitle>Salários por Mês</DialogTitle>\r\n         </DialogHeader>\r\n \r\n         <div className=\"space-y-4\">\r\n           <div className=\"space-y-1\">\r\n             <Label>Ano</Label>\r\n-            <Input\r\n-              type=\"number\"\r\n-              value={ano}\r\n-              onChange={e => setAno(Number(e.target.value))}\r\n-            />\r\n+            <ShadSelect\r\n+              value={String(anoSelecionado)}\r\n+              onValueChange={(value) => setAnoSelecionado(Number(value))}\r\n+            >\r\n+              <SelectTrigger>\r\n+                <SelectValue placeholder=\"Selecione o ano\" />\r\n+              </SelectTrigger>\r\n+              <SelectContent>\r\n+                {anosSelect.map((ano) => (\r\n+                  <SelectItem key={ano} value={String(ano)}>\r\n+                    {ano}\r\n+                  </SelectItem>\r\n+                ))}\r\n+              </SelectContent>\r\n+            </ShadSelect>\r\n           </div>\r\n \r\n           <div className=\"grid grid-cols-2 gap-2\">\r\n             {meses.map((mes, idx) => (\r\n"
                },
                {
                    "date": 1746291406064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,14 @@\n \r\n import { SalarioMensal } from \"@/lib/types\";\r\n \r\n interface Props {\r\n-  open: boolean;\r\n-  onClose: () => void;\r\n-  salariosExistentes?: SalarioMensal[];\r\n-  onSave: (novos: SalarioMensal[]) => void;\r\n-}\r\n+    open: boolean;\r\n+    onClose: () => void;\r\n+    anoInicial?: number;\r\n+    salariosExistentes?: SalarioMensal[];\r\n+    onSave: (novos: SalarioMensal[]) => void;\r\n+  }\r\n \r\n const meses = [\r\n   \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\",\r\n   \"Maio\", \"Junho\", \"Julho\", \"Agosto\",\r\n"
                },
                {
                    "date": 1746291473249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\r\n \r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useMemo, useState } from \"react\";\r\n import {\r\n   Dialog,\r\n   DialogContent,\r\n   DialogHeader,\r\n@@ -41,9 +41,17 @@\n   onSave\r\n }: Props) {\r\n   const anosDisponiveis = Array.from(new Set(salariosExistentes.map(s => s.ano))).sort((a, b) => b - a);\r\n   const anoAtual = new Date().getFullYear();\r\n-  const anosSelect = [...new Set([anoAtual, ...anosDisponiveis])]; // mostra o ano atual mesmo que ainda não tenha salário\r\n+  const anoAnterior = anoAtual - 1;\r\n+  const anosSelect = [...new Set([anoAtual, ...anosDisponiveis])];\r\n+  const anosComDados = useMemo(() => {\r\n+    const anos = new Set<number>();\r\n+    salariosExistentes?.forEach(s => anos.add(s.ano));\r\n+    anos.add(anoAtual);\r\n+    anos.add(anoAnterior);\r\n+    return Array.from(anos).sort((a, b) => b - a); // ordem decrescente\r\n+  }, [salariosExistentes]);// mostra o ano atual mesmo que ainda não tenha salário\r\n \r\n   const [anoSelecionado, setAnoSelecionado] = useState<number>(anoAtual);\r\n   const [valores, setValores] = useState<{ [mes: number]: string }>({});\r\n \r\n@@ -85,27 +93,28 @@\n           <DialogTitle>Salários por Mês</DialogTitle>\r\n         </DialogHeader>\r\n \r\n         <div className=\"space-y-4\">\r\n-          <div className=\"space-y-1\">\r\n-            <Label>Ano</Label>\r\n-            <ShadSelect\r\n-              value={String(anoSelecionado)}\r\n-              onValueChange={(value) => setAnoSelecionado(Number(value))}\r\n-            >\r\n-              <SelectTrigger>\r\n-                <SelectValue placeholder=\"Selecione o ano\" />\r\n-              </SelectTrigger>\r\n-              <SelectContent>\r\n-                {anosSelect.map((ano) => (\r\n-                  <SelectItem key={ano} value={String(ano)}>\r\n-                    {ano}\r\n-                  </SelectItem>\r\n-                ))}\r\n-              </SelectContent>\r\n-            </ShadSelect>\r\n-          </div>\r\n+        <div className=\"space-y-1\">\r\n+  <Label>Ano</Label>\r\n+  <ShadSelect\r\n+    value={String(ano)}\r\n+    onValueChange={(val) => setAno(Number(val))}\r\n+  >\r\n+    <SelectTrigger>\r\n+      <SelectValue placeholder=\"Selecione o ano\" />\r\n+    </SelectTrigger>\r\n+    <SelectContent>\r\n+      {anosComDados.map((anoOp) => (\r\n+        <SelectItem key={anoOp} value={String(anoOp)}>\r\n+          {anoOp}\r\n+        </SelectItem>\r\n+      ))}\r\n+    </SelectContent>\r\n+  </ShadSelect>\r\n+</div>\r\n \r\n+\r\n           <div className=\"grid grid-cols-2 gap-2\">\r\n             {meses.map((mes, idx) => (\r\n               <div key={idx} className=\"space-y-1\">\r\n                 <Label>{mes}</Label>\r\n"
                },
                {
                    "date": 1746291620382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,14 +20,14 @@\n \r\n import { SalarioMensal } from \"@/lib/types\";\r\n \r\n interface Props {\r\n-    open: boolean;\r\n-    onClose: () => void;\r\n-    anoInicial?: number;\r\n-    salariosExistentes?: SalarioMensal[];\r\n-    onSave: (novos: SalarioMensal[]) => void;\r\n-  }\r\n+  open: boolean;\r\n+  onClose: () => void;\r\n+  anoInicial?: number;\r\n+  salariosExistentes?: SalarioMensal[];\r\n+  onSave: (novos: SalarioMensal[]) => void;\r\n+}\r\n \r\n const meses = [\r\n   \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\",\r\n   \"Maio\", \"Junho\", \"Julho\", \"Agosto\",\r\n@@ -36,27 +36,27 @@\n \r\n export default function SalariosMensaisModal({\r\n   open,\r\n   onClose,\r\n+  anoInicial,\r\n   salariosExistentes = [],\r\n   onSave\r\n }: Props) {\r\n-  const anosDisponiveis = Array.from(new Set(salariosExistentes.map(s => s.ano))).sort((a, b) => b - a);\r\n   const anoAtual = new Date().getFullYear();\r\n-  const anoAnterior = anoAtual - 1;\r\n-  const anosSelect = [...new Set([anoAtual, ...anosDisponiveis])];\r\n+  const anoPadrao = anoInicial ?? anoAtual;\r\n+  const [anoSelecionado, setAnoSelecionado] = useState(anoPadrao);\r\n+\r\n+  // Preenche com os anos únicos do histórico + ano atual e anterior\r\n   const anosComDados = useMemo(() => {\r\n     const anos = new Set<number>();\r\n-    salariosExistentes?.forEach(s => anos.add(s.ano));\r\n+    salariosExistentes.forEach(s => anos.add(s.ano));\r\n     anos.add(anoAtual);\r\n-    anos.add(anoAnterior);\r\n-    return Array.from(anos).sort((a, b) => b - a); // ordem decrescente\r\n-  }, [salariosExistentes]);// mostra o ano atual mesmo que ainda não tenha salário\r\n+    anos.add(anoAtual - 1);\r\n+    return Array.from(anos).sort((a, b) => b - a);\r\n+  }, [salariosExistentes]);\r\n \r\n-  const [anoSelecionado, setAnoSelecionado] = useState<number>(anoAtual);\r\n   const [valores, setValores] = useState<{ [mes: number]: string }>({});\r\n \r\n-  // Quando muda o ano ou ao abrir, recarrega os salários daquele ano\r\n   useEffect(() => {\r\n     const valoresDoAno: { [mes: number]: string } = {};\r\n     salariosExistentes\r\n       .filter(s => s.ano === anoSelecionado)\r\n@@ -78,9 +78,9 @@\n       .filter(([_, val]) => val.trim() !== \"\")\r\n       .map(([mes, val]) => ({\r\n         ano: anoSelecionado,\r\n         mes: Number(mes),\r\n-        valor: Number(val.replace(\",\", \".\"))\r\n+        valor: parseFloat(val.replace(\",\", \".\"))\r\n       }));\r\n \r\n     onSave(novos);\r\n     onClose();\r\n@@ -93,28 +93,27 @@\n           <DialogTitle>Salários por Mês</DialogTitle>\r\n         </DialogHeader>\r\n \r\n         <div className=\"space-y-4\">\r\n-        <div className=\"space-y-1\">\r\n-  <Label>Ano</Label>\r\n-  <ShadSelect\r\n-    value={String(ano)}\r\n-    onValueChange={(val) => setAno(Number(val))}\r\n-  >\r\n-    <SelectTrigger>\r\n-      <SelectValue placeholder=\"Selecione o ano\" />\r\n-    </SelectTrigger>\r\n-    <SelectContent>\r\n-      {anosComDados.map((anoOp) => (\r\n-        <SelectItem key={anoOp} value={String(anoOp)}>\r\n-          {anoOp}\r\n-        </SelectItem>\r\n-      ))}\r\n-    </SelectContent>\r\n-  </ShadSelect>\r\n-</div>\r\n+          <div className=\"space-y-1\">\r\n+            <Label>Ano</Label>\r\n+            <ShadSelect\r\n+              value={String(anoSelecionado)}\r\n+              onValueChange={(val) => setAnoSelecionado(Number(val))}\r\n+            >\r\n+              <SelectTrigger>\r\n+                <SelectValue placeholder=\"Selecione o ano\" />\r\n+              </SelectTrigger>\r\n+              <SelectContent>\r\n+                {anosComDados.map((anoOp) => (\r\n+                  <SelectItem key={anoOp} value={String(anoOp)}>\r\n+                    {anoOp}\r\n+                  </SelectItem>\r\n+                ))}\r\n+              </SelectContent>\r\n+            </ShadSelect>\r\n+          </div>\r\n \r\n-\r\n           <div className=\"grid grid-cols-2 gap-2\">\r\n             {meses.map((mes, idx) => (\r\n               <div key={idx} className=\"space-y-1\">\r\n                 <Label>{mes}</Label>\r\n"
                },
                {
                    "date": 1746291809248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,51 +42,65 @@\n   onSave\r\n }: Props) {\r\n   const anoAtual = new Date().getFullYear();\r\n   const anoPadrao = anoInicial ?? anoAtual;\r\n-  const [anoSelecionado, setAnoSelecionado] = useState(anoPadrao);\r\n \r\n-  // Preenche com os anos únicos do histórico + ano atual e anterior\r\n+  const [anoSelecionado, setAnoSelecionado] = useState<number>(anoPadrao);\r\n+  const [valoresPorAno, setValoresPorAno] = useState<Record<number, { [mes: number]: string }>>({});\r\n+\r\n+  // Lista de anos únicos + ano atual + anterior\r\n   const anosComDados = useMemo(() => {\r\n     const anos = new Set<number>();\r\n     salariosExistentes.forEach(s => anos.add(s.ano));\r\n     anos.add(anoAtual);\r\n     anos.add(anoAtual - 1);\r\n     return Array.from(anos).sort((a, b) => b - a);\r\n   }, [salariosExistentes]);\r\n \r\n-  const [valores, setValores] = useState<{ [mes: number]: string }>({});\r\n+  // Inicializa valores por ano ao abrir\r\n+  useEffect(() => {\r\n+    if (!open) return;\r\n \r\n-  useEffect(() => {\r\n-    const valoresDoAno: { [mes: number]: string } = {};\r\n-    salariosExistentes\r\n-      .filter(s => s.ano === anoSelecionado)\r\n-      .forEach(s => {\r\n-        valoresDoAno[s.mes] = String(s.valor);\r\n+    const novoEstado: Record<number, { [mes: number]: string }> = {};\r\n+\r\n+    anosComDados.forEach(ano => {\r\n+      const salariosDoAno = salariosExistentes.filter(s => s.ano === ano);\r\n+      const valores: { [mes: number]: string } = {};\r\n+      salariosDoAno.forEach(s => {\r\n+        valores[s.mes] = String(s.valor);\r\n       });\r\n-    setValores(valoresDoAno);\r\n-  }, [anoSelecionado, salariosExistentes]);\r\n+      novoEstado[ano] = valores;\r\n+    });\r\n \r\n+    setValoresPorAno(novoEstado);\r\n+  }, [open, salariosExistentes, anosComDados]);\r\n+\r\n   const handleChange = (mes: number, valor: string) => {\r\n-    setValores(prev => ({\r\n+    setValoresPorAno(prev => ({\r\n       ...prev,\r\n-      [mes]: valor\r\n+      [anoSelecionado]: {\r\n+        ...prev[anoSelecionado],\r\n+        [mes]: valor\r\n+      }\r\n     }));\r\n   };\r\n \r\n   const handleSalvar = () => {\r\n+    const valores = valoresPorAno[anoSelecionado] || {};\r\n     const novos: SalarioMensal[] = Object.entries(valores)\r\n       .filter(([_, val]) => val.trim() !== \"\")\r\n       .map(([mes, val]) => ({\r\n         ano: anoSelecionado,\r\n         mes: Number(mes),\r\n-        valor: parseFloat(val.replace(\",\", \".\"))\r\n+        valor: parseFloat(val.replace(\",\", \".\") || \"0\")\r\n       }));\r\n \r\n     onSave(novos);\r\n     onClose();\r\n   };\r\n \r\n+  const valoresDoAnoAtual = valoresPorAno[anoSelecionado] || {};\r\n+\r\n   return (\r\n     <Dialog open={open} onOpenChange={onClose}>\r\n       <DialogContent className=\"max-w-md\">\r\n         <DialogHeader>\r\n@@ -119,9 +133,9 @@\n                 <Label>{mes}</Label>\r\n                 <Input\r\n                   type=\"number\"\r\n                   placeholder=\"R$\"\r\n-                  value={valores[idx + 1] || \"\"}\r\n+                  value={valoresDoAnoAtual[idx + 1] || \"\"}\r\n                   onChange={(e) => handleChange(idx + 1, e.target.value)}\r\n                 />\r\n               </div>\r\n             ))}\r\n"
                },
                {
                    "date": 1746292666384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,17 +85,18 @@\n   };\r\n \r\n   const handleSalvar = () => {\r\n     const valores = valoresPorAno[anoSelecionado] || {};\r\n-    const novos: SalarioMensal[] = Object.entries(valores)\r\n-      .filter(([_, val]) => val.trim() !== \"\")\r\n-      .map(([mes, val]) => ({\r\n-        ano: anoSelecionado,\r\n-        mes: Number(mes),\r\n-        valor: parseFloat(val.replace(\",\", \".\") || \"0\")\r\n-      }));\r\n-\r\n-    onSave(novos);\r\n+    const todos: SalarioMensal[] = Array.from({ length: 12 }).map((_, idx) => ({\r\n+      ano: anoSelecionado,\r\n+      mes: idx + 1,\r\n+      valor: valores[idx + 1]?.trim() === \"\" || valores[idx + 1] == null\r\n+        ? null\r\n+        : parseFloat(valores[idx + 1].replace(\",\", \".\"))\r\n+    }));\r\n+    \r\n+    onSave(todos); // Envia até os valores nulos\r\n+    \r\n     onClose();\r\n   };\r\n \r\n   const valoresDoAnoAtual = valoresPorAno[anoSelecionado] || {};\r\n"
                },
                {
                    "date": 1746292827336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   open: boolean;\r\n   onClose: () => void;\r\n   anoInicial?: number;\r\n   salariosExistentes?: SalarioMensal[];\r\n-  onSave: (novos: SalarioMensal[]) => void;\r\n+  onSave: (todos: SalarioMensal[]) => void;\r\n }\r\n \r\n const meses = [\r\n   \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\",\r\n@@ -73,9 +73,9 @@\n \r\n     setValoresPorAno(novoEstado);\r\n   }, [open, salariosExistentes, anosComDados]);\r\n \r\n-  const handleChange = (mes: number, valor: string) => {\r\n+  const handleChange = (mes: number, valor: string, ano: number) => {\r\n     setValoresPorAno(prev => ({\r\n       ...prev,\r\n       [anoSelecionado]: {\r\n         ...prev[anoSelecionado],\r\n@@ -89,10 +89,10 @@\n     const todos: SalarioMensal[] = Array.from({ length: 12 }).map((_, idx) => ({\r\n       ano: anoSelecionado,\r\n       mes: idx + 1,\r\n       valor: valores[idx + 1]?.trim() === \"\" || valores[idx + 1] == null\r\n-        ? null\r\n-        : parseFloat(valores[idx + 1].replace(\",\", \".\"))\r\n+  ? null\r\n+  : parseFloat(valores[idx + 1].replace(\",\", \".\"))\r\n     }));\r\n     \r\n     onSave(todos); // Envia até os valores nulos\r\n     \r\n"
                },
                {
                    "date": 1746292833363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,11 +88,10 @@\n     const valores = valoresPorAno[anoSelecionado] || {};\r\n     const todos: SalarioMensal[] = Array.from({ length: 12 }).map((_, idx) => ({\r\n       ano: anoSelecionado,\r\n       mes: idx + 1,\r\n-      valor: valores[idx + 1]?.trim() === \"\" || valores[idx + 1] == null\r\n-  ? null\r\n-  : parseFloat(valores[idx + 1].replace(\",\", \".\"))\r\n+      valor: parseFloat(valores[idx + 1]?.replace(\",\", \".\") || \"\")\r\n+\r\n     }));\r\n     \r\n     onSave(todos); // Envia até os valores nulos\r\n     \r\n"
                },
                {
                    "date": 1746292871454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   open: boolean;\r\n   onClose: () => void;\r\n   anoInicial?: number;\r\n   salariosExistentes?: SalarioMensal[];\r\n-  onSave: (todos: SalarioMensal[]) => void;\r\n+  onSave: (novos: SalarioMensal[]) => void;\r\n }\r\n \r\n const meses = [\r\n   \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\",\r\n@@ -46,18 +46,16 @@\n \r\n   const [anoSelecionado, setAnoSelecionado] = useState<number>(anoPadrao);\r\n   const [valoresPorAno, setValoresPorAno] = useState<Record<number, { [mes: number]: string }>>({});\r\n \r\n-  // Lista de anos únicos + ano atual + anterior\r\n   const anosComDados = useMemo(() => {\r\n     const anos = new Set<number>();\r\n     salariosExistentes.forEach(s => anos.add(s.ano));\r\n     anos.add(anoAtual);\r\n     anos.add(anoAtual - 1);\r\n     return Array.from(anos).sort((a, b) => b - a);\r\n   }, [salariosExistentes]);\r\n \r\n-  // Inicializa valores por ano ao abrir\r\n   useEffect(() => {\r\n     if (!open) return;\r\n \r\n     const novoEstado: Record<number, { [mes: number]: string }> = {};\r\n@@ -73,9 +71,9 @@\n \r\n     setValoresPorAno(novoEstado);\r\n   }, [open, salariosExistentes, anosComDados]);\r\n \r\n-  const handleChange = (mes: number, valor: string, ano: number) => {\r\n+  const handleChange = (mes: number, valor: string) => {\r\n     setValoresPorAno(prev => ({\r\n       ...prev,\r\n       [anoSelecionado]: {\r\n         ...prev[anoSelecionado],\r\n@@ -85,17 +83,18 @@\n   };\r\n \r\n   const handleSalvar = () => {\r\n     const valores = valoresPorAno[anoSelecionado] || {};\r\n-    const todos: SalarioMensal[] = Array.from({ length: 12 }).map((_, idx) => ({\r\n-      ano: anoSelecionado,\r\n-      mes: idx + 1,\r\n-      valor: parseFloat(valores[idx + 1]?.replace(\",\", \".\") || \"\")\r\n \r\n-    }));\r\n-    \r\n-    onSave(todos); // Envia até os valores nulos\r\n-    \r\n+    const preenchidos: SalarioMensal[] = Object.entries(valores)\r\n+      .filter(([_, val]) => val.trim() !== \"\")\r\n+      .map(([mes, val]) => ({\r\n+        ano: anoSelecionado,\r\n+        mes: Number(mes),\r\n+        valor: parseFloat(val.replace(\",\", \".\"))\r\n+      }));\r\n+\r\n+    onSave(preenchidos); // envia apenas os meses com valor\r\n     onClose();\r\n   };\r\n \r\n   const valoresDoAnoAtual = valoresPorAno[anoSelecionado] || {};\r\n"
                }
            ],
            "date": 1746290911601,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { SalarioMensal } from \"@/lib/types\";\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  anoInicial?: number;\r\n  salariosExistentes?: SalarioMensal[];\r\n  onSave: (novos: SalarioMensal[]) => void;\r\n}\r\n\r\nconst meses = [\r\n  \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\",\r\n  \"Maio\", \"Junho\", \"Julho\", \"Agosto\",\r\n  \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"\r\n];\r\n\r\nexport default function SalariosMensaisModal({\r\n  open, onClose, anoInicial = new Date().getFullYear(),\r\n  salariosExistentes = [], onSave\r\n}: Props) {\r\n  const [ano, setAno] = useState(anoInicial);\r\n  const [valores, setValores] = useState<{ [mes: number]: string }>({});\r\n\r\n  useEffect(() => {\r\n    const valoresIniciais: { [mes: number]: string } = {};\r\n    salariosExistentes\r\n      .filter(s => s.ano === ano)\r\n      .forEach(s => {\r\n        valoresIniciais[s.mes] = String(s.valor);\r\n      });\r\n    setValores(valoresIniciais);\r\n  }, [ano, salariosExistentes]);\r\n\r\n  const handleChange = (mes: number, valor: string) => {\r\n    setValores(prev => ({\r\n      ...prev,\r\n      [mes]: valor\r\n    }));\r\n  };\r\n\r\n  const handleSalvar = () => {\r\n    const novos: SalarioMensal[] = Object.entries(valores)\r\n      .filter(([_, val]) => val.trim() !== \"\")\r\n      .map(([mes, val]) => ({\r\n        ano,\r\n        mes: Number(mes),\r\n        valor: Number(val.replace(\",\", \".\"))\r\n      }));\r\n\r\n    onSave(novos);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle>Salários Mensais - {ano}</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"space-y-1\">\r\n            <Label>Ano</Label>\r\n            <Input\r\n              type=\"number\"\r\n              value={ano}\r\n              onChange={e => setAno(Number(e.target.value))}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-2\">\r\n            {meses.map((mes, idx) => (\r\n              <div key={idx} className=\"space-y-1\">\r\n                <Label>{mes}</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  placeholder=\"R$\"\r\n                  value={valores[idx + 1] || \"\"}\r\n                  onChange={(e) => handleChange(idx + 1, e.target.value)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"flex justify-end pt-2\">\r\n            <Button onClick={handleSalvar}>Salvar</Button>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n"
        }
    ]
}