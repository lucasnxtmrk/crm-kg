{
    "sourceFile": "components/partials/auth/login-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744233429943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744233429943,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport React from 'react'\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Link } from '@/i18n/routing';\r\nimport { Icon } from \"@/components/ui/icon\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from \"zod\";\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Loader2 } from 'lucide-react';\r\nimport { loginUser } from '@/action/auth-action';\r\nimport { toast } from \"sonner\"\r\nimport { useRouter } from '@/components/navigation';\r\n\r\nconst schema = z.object({\r\n  email: z.string().email({ message: \"Your email is invalid.\" }),\r\n  password: z.string().min(4),\r\n});\r\nconst LoginForm = () => {\r\n  const [isPending, startTransition] = React.useTransition();\r\n  const router = useRouter();\r\n  const [passwordType, setPasswordType] = React.useState(\"password\");\r\n\r\n\r\n  const togglePasswordType = () => {\r\n    if (passwordType === \"text\") {\r\n      setPasswordType(\"password\");\r\n    } else if (passwordType === \"password\") {\r\n      setPasswordType(\"text\");\r\n    }\r\n  };\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: zodResolver(schema),\r\n    mode: \"all\",\r\n    defaultValues: {\r\n      email: \"dashcode@codeshaper.net\",\r\n      password: \"password\",\r\n    },\r\n  });\r\n  const [isVisible, setIsVisible] = React.useState(false);\r\n\r\n  const toggleVisibility = () => setIsVisible(!isVisible);\r\n\r\n  const onSubmit = (data: z.infer<typeof schema>) => {\r\n    startTransition(async () => {\r\n      try {\r\n        const response = await loginUser(data);\r\n\r\n        if (!!response.error) {\r\n          toast(\"Event has been created\", {\r\n            description: \"Sunday, December 03, 2023 at 9:00 AM\",\r\n\r\n          })\r\n        } else {\r\n          router.push('/dashboard/');\r\n          toast.success(\"Successfully logged in\");\r\n        }\r\n      } catch (err: any) {\r\n        toast.error(err.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className=\"mt-5 2xl:mt-7 space-y-4\">\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"email\" className=\" font-medium text-default-600\">\r\n          Email{\" \"}\r\n        </Label>\r\n        <Input size=\"lg\"\r\n          disabled={isPending}\r\n          {...register(\"email\")}\r\n          type=\"email\"\r\n          id=\"email\"\r\n          className={cn(\"\", {\r\n            \"border-destructive \": errors.email,\r\n          })}\r\n        />\r\n      </div>\r\n      {errors.email && (\r\n        <div className=\" text-destructive mt-2 text-sm\">\r\n          {errors.email.message}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mt-3.5 space-y-2\">\r\n        <Label htmlFor=\"password\" className=\"mb-2 font-medium text-default-600\">\r\n          Password{\" \"}\r\n        </Label>\r\n        <div className=\"relative\">\r\n          <Input size=\"lg\"\r\n            disabled={isPending}\r\n            {...register(\"password\")}\r\n            type={passwordType}\r\n            id=\"password\"\r\n            className=\"peer  \"\r\n            placeholder=\" \"\r\n          />\r\n\r\n          <div\r\n            className=\"absolute top-1/2 -translate-y-1/2 ltr:right-4 rtl:left-4 cursor-pointer\"\r\n            onClick={togglePasswordType}\r\n          >\r\n            {passwordType === \"password\" ? (\r\n              <Icon icon=\"heroicons:eye\" className=\"w-5 h-5 text-default-400\" />\r\n            ) : (\r\n              <Icon\r\n                icon=\"heroicons:eye-slash\"\r\n                className=\"w-5 h-5 text-default-400\"\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {errors.password && (\r\n        <div className=\" text-destructive mt-2 text-sm\">\r\n          {errors.password.message}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex justify-between\">\r\n        <div className=\"flex gap-2 items-center\">\r\n          <Checkbox id=\"checkbox\" defaultChecked />\r\n          <Label htmlFor=\"checkbox\">Keep Me Signed In</Label>\r\n        </div>\r\n        <Link\r\n          href=\"/forgot-password\"\r\n          className=\"text-sm text-default-800 dark:text-default-400 leading-6 font-medium\"\r\n        >\r\n          Forgot Password?\r\n        </Link>\r\n      </div>\r\n      <Button fullWidth disabled={isPending}>\r\n        {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n        {isPending ? \"Loading...\" : \"Sign In\"}\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\nexport default LoginForm;\r\n"
        }
    ]
}