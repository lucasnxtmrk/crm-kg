{
    "sourceFile": "components/partials/sidebar/common/menu-item.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746830333132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746830462743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,64 +5,126 @@\n import { type Menu } from '@/lib/menus';\r\n import { Link } from '@/i18n/routing';\r\n import { cn } from \"@/lib/utils\";\r\n import { GripVertical } from 'lucide-react';\r\n+import { signOut } from 'next-auth/react';\r\n+\r\n+// for dnd \r\n+import {\r\n+    useSortable,\r\n+} from \"@dnd-kit/sortable\";\r\n+\r\n+interface MenuItemProps {\r\n+    id: string\r\n+    href?: string\r\n+    label: string\r\n+    icon: string\r\n+    active: boolean\r\n+    collapsed: boolean\r\n+    onClick?: () => void\r\n+}\r\n+\r\n import { CSS } from \"@dnd-kit/utilities\";\r\n import { useConfig } from '@/hooks/use-config';\r\n import { useMediaQuery } from '@/hooks/use-media-query';\r\n import { useMobileMenuConfig } from '@/hooks/use-mobile-menu';\r\n import { useMenuHoverConfig } from '@/hooks/use-menu-hover';\r\n \r\n-interface MenuItemProps {\r\n-  id: string;\r\n-  href?: string;\r\n-  label: string;\r\n-  icon: string;\r\n-  active: boolean;\r\n-  collapsed: boolean;\r\n-  onClick?: () => void;\r\n-}\r\n+const MenuItem = ({ href = \"#\", label, icon, active, id, collapsed, onClick }: MenuItemProps) => {\r\n+    const [config] = useConfig();\r\n+    const [hoverConfig] = useMenuHoverConfig();\r\n+    const { hovered } = hoverConfig;\r\n+    const isDesktop = useMediaQuery(\"(min-width: 1280px)\");\r\n+    const [mobileMenuConfig, setMobileMenuConfig] = useMobileMenuConfig();\r\n+    const { transform, transition, setNodeRef, isDragging, attributes, listeners } = useSortable({\r\n+        id: id,\r\n+    });\r\n \r\n-const MenuItem = ({ href, label, icon, active, id, collapsed, onClick }: MenuItemProps) => {\r\n-  const [config] = useConfig();\r\n-  const [hoverConfig] = useMenuHoverConfig();\r\n-  const { hovered } = hoverConfig;\r\n-  const isDesktop = useMediaQuery(\"(min-width: 1280px)\");\r\n-  const [mobileMenuConfig, setMobileMenuConfig] = useMobileMenuConfig();\r\n+    const style: CSSProperties = {\r\n+        transform: CSS.Transform.toString(transform),\r\n+        transition: transition,\r\n+        opacity: isDragging ? 0.8 : 1,\r\n+        zIndex: isDragging ? 1 : 0,\r\n+        position: \"relative\",\r\n+    };\r\n \r\n-  const buttonProps = {\r\n-    variant: active ? \"default\" : \"ghost\",\r\n-    fullWidth: true,\r\n-    color: active ? \"default\" : \"secondary\" as any,\r\n-    className: cn('', {\r\n-      'justify-start text-sm font-medium capitalize group hover:md:px-8 h-auto py-3 md:px-3 px-3': !collapsed,\r\n-      'hover:ring-transparent hover:ring-offset-0': !active\r\n-    }),\r\n-    size: collapsed ? \"icon\" : \"default\" as any,\r\n-  };\r\n+    const handleClick = () => {\r\n+        if (id === \"logout\") {\r\n+            signOut({ callbackUrl: \"/auth/login\" });\r\n+        } else {\r\n+            onClick?.();\r\n+            setMobileMenuConfig({ ...mobileMenuConfig, isOpen: false });\r\n+        }\r\n+    };\r\n \r\n-  // üî• Se for um item com a√ß√£o (como logout), renderiza como bot√£o com onClick\r\n-  if (onClick) {\r\n+    if (config.sidebar === 'draggable' && isDesktop) {\r\n+        return (\r\n+            <Button\r\n+                ref={setNodeRef}\r\n+                style={style}\r\n+                variant={active ? \"default\" : \"ghost\"}\r\n+                color={active ? \"default\" : \"secondary\"}\r\n+                fullWidth\r\n+                className={cn('', {\r\n+                    'justify-start text-sm font-medium capitalize group hover:md:px-8 h-auto py-3 md:px-3 px-3': !collapsed,\r\n+                    'hover:ring-transparent hover:ring-offset-0': !active\r\n+                })}\r\n+                asChild\r\n+                size={collapsed ? \"icon\" : \"default\"}\r\n+                onClick={handleClick}\r\n+            >\r\n+                <Link href={href} onClick={e => e.stopPropagation()}>\r\n+                    {!collapsed && (\r\n+                        <GripVertical\r\n+                            {...attributes} {...listeners} className={cn('inset-t-0 absolute me-1 h-5 w-5 ltr:-translate-x-6 rtl:translate-x-6 invisible opacity-0 group-hover:opacity-100 transition-all group-hover:visible ltr:group-hover:-translate-x-5 rtl:group-hover:translate-x-5')} />\r\n+                    )}\r\n+                    <Icon icon={icon} className={cn('h-5 w-5 ', { 'me-2': !collapsed })} />\r\n+                    {!collapsed && (\r\n+                        <p className=\"max-w-[200px] truncate\">{label}</p>\r\n+                    )}\r\n+                </Link>\r\n+            </Button>\r\n+        );\r\n+    }\r\n+\r\n+    if (config.sidebar === 'compact' && isDesktop) {\r\n+        return (\r\n+            <Button\r\n+                variant={active ? \"default\" : \"ghost\"}\r\n+                fullWidth\r\n+                color={active ? \"default\" : \"secondary\"}\r\n+                className=\"flex-col h-auto py-1.5 px-3.5 capitalize font-semibold\"\r\n+                asChild\r\n+                onClick={handleClick}\r\n+            >\r\n+                <Link href={href}>\r\n+                    <Icon icon={icon} className=\"h-6 w-6 mb-1\" />\r\n+                    <p className=\"max-w-[200px] text-[11px] truncate\">{label}</p>\r\n+                </Link>\r\n+            </Button>\r\n+        );\r\n+    }\r\n+\r\n     return (\r\n-      <Button {...buttonProps} onClick={onClick}>\r\n-        <Icon icon={icon} className={cn('h-5 w-5', { 'me-2': !collapsed })} />\r\n-        {!collapsed && <p className=\"max-w-[200px] truncate\">{label}</p>}\r\n-      </Button>\r\n+        <Button\r\n+            onClick={handleClick}\r\n+            variant={active ? \"default\" : \"ghost\"}\r\n+            fullWidth\r\n+            color={active ? \"default\" : \"secondary\"}\r\n+            className={cn('', {\r\n+                'justify-start text-sm font-medium capitalize h-auto py-3 md:px-3 px-3': !collapsed || hovered,\r\n+                'hover:ring-transparent hover:ring-offset-0': !active\r\n+            })}\r\n+            asChild\r\n+            size={(collapsed && !hovered) ? \"icon\" : \"default\"}\r\n+        >\r\n+            <Link href={href}>\r\n+                <Icon icon={icon} className={cn('h-5 w-5 ', { 'me-2': !collapsed || hovered })} />\r\n+                {(!collapsed || hovered) && (\r\n+                    <p className=\"max-w-[200px] truncate\">{label}</p>\r\n+                )}\r\n+            </Link>\r\n+        </Button>\r\n     );\r\n-  }\r\n-\r\n-  // Caso contr√°rio, segue com o link normal\r\n-  return (\r\n-    <Button\r\n-      onClick={() => setMobileMenuConfig({ ...mobileMenuConfig, isOpen: false })}\r\n-      {...buttonProps}\r\n-      asChild\r\n-    >\r\n-      <Link href={href || \"/\"}>\r\n-        <Icon icon={icon} className={cn('h-5 w-5', { 'me-2': !collapsed || hovered })} />\r\n-        {(!collapsed || hovered) && <p className=\"max-w-[200px] truncate\">{label}</p>}\r\n-      </Link>\r\n-    </Button>\r\n-  );\r\n }\r\n \r\n-export default MenuItem;\r\n+export default MenuItem;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746830683934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n import { Link } from '@/i18n/routing';\r\n import { cn } from \"@/lib/utils\";\r\n import { GripVertical } from 'lucide-react';\r\n import { signOut } from 'next-auth/react';\r\n+import { useLocale } from 'next-intl';\r\n \r\n-// for dnd \r\n import {\r\n     useSortable,\r\n } from \"@dnd-kit/sortable\";\r\n \r\n@@ -34,11 +34,10 @@\n     const [hoverConfig] = useMenuHoverConfig();\r\n     const { hovered } = hoverConfig;\r\n     const isDesktop = useMediaQuery(\"(min-width: 1280px)\");\r\n     const [mobileMenuConfig, setMobileMenuConfig] = useMobileMenuConfig();\r\n-    const { transform, transition, setNodeRef, isDragging, attributes, listeners } = useSortable({\r\n-        id: id,\r\n-    });\r\n+    const { transform, transition, setNodeRef, isDragging, attributes, listeners } = useSortable({ id });\r\n+    const locale = useLocale();\r\n \r\n     const style: CSSProperties = {\r\n         transform: CSS.Transform.toString(transform),\r\n         transition: transition,\r\n@@ -48,9 +47,9 @@\n     };\r\n \r\n     const handleClick = () => {\r\n         if (id === \"logout\") {\r\n-            signOut({ callbackUrl: \"/auth/login\" });\r\n+            signOut({ callbackUrl: `/${locale}/auth/login` });\r\n         } else {\r\n             onClick?.();\r\n             setMobileMenuConfig({ ...mobileMenuConfig, isOpen: false });\r\n         }\r\n@@ -77,11 +76,9 @@\n                         <GripVertical\r\n                             {...attributes} {...listeners} className={cn('inset-t-0 absolute me-1 h-5 w-5 ltr:-translate-x-6 rtl:translate-x-6 invisible opacity-0 group-hover:opacity-100 transition-all group-hover:visible ltr:group-hover:-translate-x-5 rtl:group-hover:translate-x-5')} />\r\n                     )}\r\n                     <Icon icon={icon} className={cn('h-5 w-5 ', { 'me-2': !collapsed })} />\r\n-                    {!collapsed && (\r\n-                        <p className=\"max-w-[200px] truncate\">{label}</p>\r\n-                    )}\r\n+                    {!collapsed && <p className=\"max-w-[200px] truncate\">{label}</p>}\r\n                 </Link>\r\n             </Button>\r\n         );\r\n     }\r\n@@ -118,11 +115,9 @@\n             size={(collapsed && !hovered) ? \"icon\" : \"default\"}\r\n         >\r\n             <Link href={href}>\r\n                 <Icon icon={icon} className={cn('h-5 w-5 ', { 'me-2': !collapsed || hovered })} />\r\n-                {(!collapsed || hovered) && (\r\n-                    <p className=\"max-w-[200px] truncate\">{label}</p>\r\n-                )}\r\n+                {(!collapsed || hovered) && <p className=\"max-w-[200px] truncate\">{label}</p>}\r\n             </Link>\r\n         </Button>\r\n     );\r\n }\r\n"
                }
            ],
            "date": 1746830333132,
            "name": "Commit-0",
            "content": "'use client'\r\nimport React, { CSSProperties } from 'react'\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Icon } from '@/components/ui/icon'\r\nimport { type Menu } from '@/lib/menus';\r\nimport { Link } from '@/i18n/routing';\r\nimport { cn } from \"@/lib/utils\";\r\nimport { GripVertical } from 'lucide-react';\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { useConfig } from '@/hooks/use-config';\r\nimport { useMediaQuery } from '@/hooks/use-media-query';\r\nimport { useMobileMenuConfig } from '@/hooks/use-mobile-menu';\r\nimport { useMenuHoverConfig } from '@/hooks/use-menu-hover';\r\n\r\ninterface MenuItemProps {\r\n  id: string;\r\n  href?: string;\r\n  label: string;\r\n  icon: string;\r\n  active: boolean;\r\n  collapsed: boolean;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst MenuItem = ({ href, label, icon, active, id, collapsed, onClick }: MenuItemProps) => {\r\n  const [config] = useConfig();\r\n  const [hoverConfig] = useMenuHoverConfig();\r\n  const { hovered } = hoverConfig;\r\n  const isDesktop = useMediaQuery(\"(min-width: 1280px)\");\r\n  const [mobileMenuConfig, setMobileMenuConfig] = useMobileMenuConfig();\r\n\r\n  const buttonProps = {\r\n    variant: active ? \"default\" : \"ghost\",\r\n    fullWidth: true,\r\n    color: active ? \"default\" : \"secondary\" as any,\r\n    className: cn('', {\r\n      'justify-start text-sm font-medium capitalize group hover:md:px-8 h-auto py-3 md:px-3 px-3': !collapsed,\r\n      'hover:ring-transparent hover:ring-offset-0': !active\r\n    }),\r\n    size: collapsed ? \"icon\" : \"default\" as any,\r\n  };\r\n\r\n  // üî• Se for um item com a√ß√£o (como logout), renderiza como bot√£o com onClick\r\n  if (onClick) {\r\n    return (\r\n      <Button {...buttonProps} onClick={onClick}>\r\n        <Icon icon={icon} className={cn('h-5 w-5', { 'me-2': !collapsed })} />\r\n        {!collapsed && <p className=\"max-w-[200px] truncate\">{label}</p>}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  // Caso contr√°rio, segue com o link normal\r\n  return (\r\n    <Button\r\n      onClick={() => setMobileMenuConfig({ ...mobileMenuConfig, isOpen: false })}\r\n      {...buttonProps}\r\n      asChild\r\n    >\r\n      <Link href={href || \"/\"}>\r\n        <Icon icon={icon} className={cn('h-5 w-5', { 'me-2': !collapsed || hovered })} />\r\n        {(!collapsed || hovered) && <p className=\"max-w-[200px] truncate\">{label}</p>}\r\n      </Link>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default MenuItem;\r\n"
        }
    ]
}