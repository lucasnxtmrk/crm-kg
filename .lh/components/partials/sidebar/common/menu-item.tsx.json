{
    "sourceFile": "components/partials/sidebar/common/menu-item.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1745875182027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745875236579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n                 })} />\r\n                 {(!collapsed || hovered) && (\r\n                     <p\r\n                         className={cn(\r\n-                            \"max-w-[200px] truncate text-white\",\r\n+                            \"max-w-[200px] truncate text-white hover:text-gray-400\",\r\n                         )}\r\n                     >\r\n                         {label}\r\n                     </p>\r\n"
                },
                {
                    "date": 1745875253683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n                     })} />\r\n                     {!collapsed && (\r\n                         <p\r\n                             className={cn(\r\n-                                \"max-w-[200px] truncate text-white\",\r\n+                                \"max-w-[200px] truncate text-white hover:text-gray-400\",\r\n                             )}\r\n                         >\r\n                             {label}\r\n                         </p>\r\n"
                },
                {
                    "date": 1745875262899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n                     })} />\r\n                     {!collapsed && (\r\n                         <p\r\n                             className={cn(\r\n-                                \"max-w-[200px] truncate text-white hover:text-gray-400\",\r\n+                                \"max-w-[200px] truncate text-white hover:text-gray-800\",\r\n                             )}\r\n                         >\r\n                             {label}\r\n                         </p>\r\n"
                },
                {
                    "date": 1745876286663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+\r\n+'use client'\r\n+import React, { CSSProperties } from 'react'\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { Icon } from '@/components/ui/icon'\r\n+import { type Menu } from '@/lib/menus';\r\n+import { Link } from '@/i18n/routing';\r\n+import { cn } from \"@/lib/utils\";\r\n+import { GripVertical } from 'lucide-react';\r\n+\r\n+// for dnd \r\n+\r\n+import {\r\n+    useSortable,\r\n+    arrayMove,\r\n+    SortableContext,\r\n+    verticalListSortingStrategy,\r\n+    horizontalListSortingStrategy,\r\n+} from \"@dnd-kit/sortable\";\r\n+interface MenuItemProps {\r\n+    id: string\r\n+    href: string\r\n+    label: string\r\n+    icon: string\r\n+    active: boolean\r\n+    collapsed: boolean\r\n+\r\n+}\r\n+import { CSS } from \"@dnd-kit/utilities\";\r\n+import { useConfig } from '@/hooks/use-config';\r\n+import { useMediaQuery } from '@/hooks/use-media-query';\r\n+import { useMobileMenuConfig } from '@/hooks/use-mobile-menu';\r\n+import { useMenuHoverConfig } from '@/hooks/use-menu-hover';\r\n+const MenuItem = ({ href, label, icon, active, id, collapsed }: MenuItemProps) => {\r\n+    const [config] = useConfig();\r\n+    const [hoverConfig] = useMenuHoverConfig();\r\n+    const { hovered } = hoverConfig;\r\n+    const isDesktop = useMediaQuery(\"(min-width: 1280px)\");\r\n+    const [mobileMenuConfig, setMobileMenuConfig] = useMobileMenuConfig();\r\n+    const { transform, transition, setNodeRef, isDragging, attributes, listeners } = useSortable({\r\n+        id: id,\r\n+\r\n+    })\r\n+\r\n+    const style: CSSProperties = {\r\n+        transform: CSS.Transform.toString(transform),\r\n+        transition: transition,\r\n+        opacity: isDragging ? 0.8 : 1,\r\n+        zIndex: isDragging ? 1 : 0,\r\n+        position: \"relative\",\r\n+    };\r\n+    if (config.sidebar === 'draggable' && isDesktop) {\r\n+        return (\r\n+            <Button\r\n+                ref={setNodeRef}\r\n+                style={style}\r\n+                variant={active ? \"default\" : \"ghost\"}\r\n+                color={active ? \"default\" : \"secondary\"}\r\n+                fullWidth\r\n+                className={cn('', {\r\n+                    'justify-start text-sm font-medium capitalize group hover:md:px-8 h-auto py-3 md:px-3 px-3': !collapsed,\r\n+                    'hover:ring-transparent hover:ring-offset-0': !active\r\n+                })}\r\n+                asChild\r\n+                size={collapsed ? \"icon\" : \"default\"}\r\n+            >\r\n+\r\n+\r\n+                <Link href={href} onClick={(e) => {\r\n+                    e.stopPropagation();\r\n+                }}>\r\n+                    {!collapsed && (\r\n+                        <GripVertical\r\n+\r\n+                            {...attributes} {...listeners} className={cn('inset-t-0 absolute me-1 h-5 w-5 ltr:-translate-x-6 rtl:translate-x-6 invisible opacity-0 group-hover:opacity-100 transition-all group-hover:visible ltr:group-hover:-translate-x-5 rtl:group-hover:translate-x-5', {\r\n+\r\n+                            })} />\r\n+\r\n+\r\n+                    )}\r\n+                    <Icon icon={icon} className={cn('h-5 w-5 ', {\r\n+                        'me-2': !collapsed\r\n+                    })} />\r\n+                    {!collapsed && (\r\n+                        <p\r\n+                            className={cn(\r\n+                                \"max-w-[200px] truncate\",\r\n+                            )}\r\n+                        >\r\n+                            {label}\r\n+                        </p>\r\n+                    )}\r\n+                </Link>\r\n+\r\n+            </Button>\r\n+        )\r\n+    }\r\n+\r\n+    if (config.sidebar === 'compact' && isDesktop) {\r\n+        return (\r\n+            <Button\r\n+\r\n+                variant={active ? \"default\" : \"ghost\"}\r\n+                fullWidth\r\n+                color={active ? \"default\" : \"secondary\"}\r\n+                className=\"flex-col h-auto py-1.5 px-3.5 capitalize font-semibold\"\r\n+                asChild\r\n+\r\n+            >\r\n+                <Link href={href}>\r\n+                    <Icon icon={icon} className={cn('h-6 w-6 mb-1 ')} />\r\n+\r\n+                    <p\r\n+                        className={cn(\r\n+                            \"max-w-[200px]  text-[11px] truncate \",\r\n+                        )}\r\n+                    >\r\n+                        {label}\r\n+                    </p>\r\n+\r\n+                </Link>\r\n+            </Button>\r\n+        )\r\n+    }\r\n+    return (\r\n+        <Button\r\n+            onClick={() => setMobileMenuConfig({ ...mobileMenuConfig, isOpen: false })}\r\n+            variant={active ? \"default\" : \"ghost\"}\r\n+            fullWidth\r\n+            color={active ? \"default\" : \"secondary\"}\r\n+            className={cn('', {\r\n+                'justify-start text-sm font-medium capitalize h-auto py-3 md:px-3 px-3': !collapsed || hovered,\r\n+                'hover:ring-transparent hover:ring-offset-0': !active\r\n+            })}\r\n+            asChild\r\n+            size={(collapsed && !hovered) ? \"icon\" : \"default\"}\r\n+        >\r\n+            <Link href={href}>\r\n+                <Icon icon={icon} className={cn('h-5 w-5 ', {\r\n+                    'me-2': !collapsed || hovered\r\n+                })} />\r\n+                {(!collapsed || hovered) && (\r\n+                    <p\r\n+                        className={cn(\r\n+                            \"max-w-[200px] truncate\",\r\n+                        )}\r\n+                    >\r\n+                        {label}\r\n+                    </p>\r\n+                )}\r\n+            </Link>\r\n+        </Button>\r\n+    )\r\n+}\r\n+\r\n+export default MenuItem\n\\ No newline at end of file\n"
                }
            ],
            "date": 1745875182027,
            "name": "Commit-0",
            "content": "\r\n'use client'\r\nimport React, { CSSProperties } from 'react'\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Icon } from '@/components/ui/icon'\r\nimport { type Menu } from '@/lib/menus';\r\nimport { Link } from '@/i18n/routing';\r\nimport { cn } from \"@/lib/utils\";\r\nimport { GripVertical } from 'lucide-react';\r\n\r\n// for dnd \r\n\r\nimport {\r\n    useSortable,\r\n    arrayMove,\r\n    SortableContext,\r\n    verticalListSortingStrategy,\r\n    horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\ninterface MenuItemProps {\r\n    id: string\r\n    href: string\r\n    label: string\r\n    icon: string\r\n    active: boolean\r\n    collapsed: boolean\r\n\r\n}\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { useConfig } from '@/hooks/use-config';\r\nimport { useMediaQuery } from '@/hooks/use-media-query';\r\nimport { useMobileMenuConfig } from '@/hooks/use-mobile-menu';\r\nimport { useMenuHoverConfig } from '@/hooks/use-menu-hover';\r\nconst MenuItem = ({ href, label, icon, active, id, collapsed }: MenuItemProps) => {\r\n    const [config] = useConfig();\r\n    const [hoverConfig] = useMenuHoverConfig();\r\n    const { hovered } = hoverConfig;\r\n    const isDesktop = useMediaQuery(\"(min-width: 1280px)\");\r\n    const [mobileMenuConfig, setMobileMenuConfig] = useMobileMenuConfig();\r\n    const { transform, transition, setNodeRef, isDragging, attributes, listeners } = useSortable({\r\n        id: id,\r\n\r\n    })\r\n\r\n    const style: CSSProperties = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition: transition,\r\n        opacity: isDragging ? 0.8 : 1,\r\n        zIndex: isDragging ? 1 : 0,\r\n        position: \"relative\",\r\n    };\r\n    if (config.sidebar === 'draggable' && isDesktop) {\r\n        return (\r\n            <Button\r\n                ref={setNodeRef}\r\n                style={style}\r\n                variant={active ? \"default\" : \"ghost\"}\r\n                color={active ? \"default\" : \"secondary\"}\r\n                fullWidth\r\n                className={cn('', {\r\n                    'justify-start text-sm font-medium capitalize group hover:md:px-8 h-auto py-3 md:px-3 px-3': !collapsed,\r\n                    'hover:ring-transparent hover:ring-offset-0': !active\r\n                })}\r\n                asChild\r\n                size={collapsed ? \"icon\" : \"default\"}\r\n            >\r\n\r\n\r\n                <Link href={href} onClick={(e) => {\r\n                    e.stopPropagation();\r\n                }}>\r\n                    {!collapsed && (\r\n                        <GripVertical\r\n\r\n                            {...attributes} {...listeners} className={cn('inset-t-0 absolute me-1 h-5 w-5 ltr:-translate-x-6 rtl:translate-x-6 invisible opacity-0 group-hover:opacity-100 transition-all group-hover:visible ltr:group-hover:-translate-x-5 rtl:group-hover:translate-x-5', {\r\n\r\n                            })} />\r\n\r\n\r\n                    )}\r\n                    <Icon icon={icon} className={cn('h-5 w-5 ', {\r\n                        'me-2': !collapsed\r\n                    })} />\r\n                    {!collapsed && (\r\n                        <p\r\n                            className={cn(\r\n                                \"max-w-[200px] truncate text-white\",\r\n                            )}\r\n                        >\r\n                            {label}\r\n                        </p>\r\n                    )}\r\n                </Link>\r\n\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    if (config.sidebar === 'compact' && isDesktop) {\r\n        return (\r\n            <Button\r\n\r\n                variant={active ? \"default\" : \"ghost\"}\r\n                fullWidth\r\n                color={active ? \"default\" : \"secondary\"}\r\n                className=\"flex-col h-auto py-1.5 px-3.5 capitalize font-semibold\"\r\n                asChild\r\n\r\n            >\r\n                <Link href={href}>\r\n                    <Icon icon={icon} className={cn('h-6 w-6 mb-1 ')} />\r\n\r\n                    <p\r\n                        className={cn(\r\n                            \"max-w-[200px]  text-[11px] truncate \",\r\n                        )}\r\n                    >\r\n                        {label}\r\n                    </p>\r\n\r\n                </Link>\r\n            </Button>\r\n        )\r\n    }\r\n    return (\r\n        <Button\r\n            onClick={() => setMobileMenuConfig({ ...mobileMenuConfig, isOpen: false })}\r\n            variant={active ? \"default\" : \"ghost\"}\r\n            fullWidth\r\n            color={active ? \"default\" : \"secondary\"}\r\n            className={cn('', {\r\n                'justify-start text-sm font-medium capitalize h-auto py-3 md:px-3 px-3': !collapsed || hovered,\r\n                'hover:ring-transparent hover:ring-offset-0': !active\r\n            })}\r\n            asChild\r\n            size={(collapsed && !hovered) ? \"icon\" : \"default\"}\r\n        >\r\n            <Link href={href}>\r\n                <Icon icon={icon} className={cn('h-5 w-5 ', {\r\n                    'me-2': !collapsed || hovered\r\n                })} />\r\n                {(!collapsed || hovered) && (\r\n                    <p\r\n                        className={cn(\r\n                            \"max-w-[200px] truncate text-white\",\r\n                        )}\r\n                    >\r\n                        {label}\r\n                    </p>\r\n                )}\r\n            </Link>\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default MenuItem"
        }
    ]
}