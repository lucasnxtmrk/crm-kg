{
    "sourceFile": "lib/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1746829911582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746829966644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { getUserByEmail, type User } from \"./data\";\n \n export const authOptions = {\n   session: {\n-    strategy: \"jwt\",\n+  strategy: \"jwt\", // ‚Üê j√° como string literal\n   },\n   secret: process.env.NEXTAUTH_SECRET, // ‚úÖ ADICIONAR ESTA LINHA AQUI\n   providers: [\n     Google,\n"
                },
                {
                    "date": 1746830028630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,37 @@\n-import NextAuth from \"next-auth\";\n+import NextAuth, { type NextAuthConfig } from \"next-auth\";\n import GitHub from \"next-auth/providers/github\";\n import Google from \"next-auth/providers/google\";\n import CredentialsProvider from \"next-auth/providers/credentials\";\n-import { getUserByEmail, type User } from \"./data\";\n+import { getUserByEmail } from \"./data\";\n \n-export const authOptions = {\n+export const authOptions: NextAuthConfig = {\n   session: {\n-  strategy: \"jwt\", // ‚Üê j√° como string literal\n+    strategy: \"jwt\", // ‚úÖ agora √© literal, n√£o 'string'\n   },\n-  secret: process.env.NEXTAUTH_SECRET, // ‚úÖ ADICIONAR ESTA LINHA AQUI\n+  secret: process.env.NEXTAUTH_SECRET, // ‚úÖ carregado do .env\n   providers: [\n     Google,\n     GitHub,\n     CredentialsProvider({\n-      credentials: {\n-        email: {},\n-        password: {},\n-      },\n-      async authorize(credentials) {\n-        if (!credentials) return null;\n+  credentials: {\n+    email: {},\n+    password: {},\n+  },\n+  async authorize(credentials) {\n+    if (!credentials?.email || typeof credentials.email !== \"string\") {\n+      throw new Error(\"E-mail inv√°lido\");\n+    }\n \n-        const user = getUserByEmail(credentials.email as string);\n-        if (user && user.password === credentials.password) {\n-          return user;\n-        }\n-        throw new Error(\"Email ou senha incorretos.\");\n-      },\n-    }),\n+    const user = getUserByEmail(credentials.email);\n+\n+    if (!user || user.password !== credentials.password) {\n+      throw new Error(\"Email ou senha incorretos\");\n+    }\n+\n+    return user;\n+  },\n+}),\n   ],\n };\n \n export const { auth, handlers, signIn, signOut } = NextAuth(authOptions);\n"
                },
                {
                    "date": 1746913396413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     if (!credentials?.email || typeof credentials.email !== \"string\") {\n       throw new Error(\"E-mail inv√°lido\");\n     }\n \n-    const user = getUserByEmail(credentials.email);\n+const user = await getUserByEmail(credentials.email);\n \n     if (!user || user.password !== credentials.password) {\n       throw new Error(\"Email ou senha incorretos\");\n     }\n"
                },
                {
                    "date": 1746913735598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import NextAuth, { type NextAuthConfig } from \"next-auth\";\n import GitHub from \"next-auth/providers/github\";\n import Google from \"next-auth/providers/google\";\n import CredentialsProvider from \"next-auth/providers/credentials\";\n-import { getUserByEmail } from \"./data\";\n+import { getUserByEmail } from \"@/lib/data\"; // ‚úÖ novo caminho\n \n export const authOptions: NextAuthConfig = {\n   session: {\n     strategy: \"jwt\", // ‚úÖ agora √© literal, n√£o 'string'\n"
                },
                {
                    "date": 1746913782943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,33 +5,33 @@\n import { getUserByEmail } from \"@/lib/data\"; // ‚úÖ novo caminho\n \n export const authOptions: NextAuthConfig = {\n   session: {\n-    strategy: \"jwt\", // ‚úÖ agora √© literal, n√£o 'string'\n+    strategy: \"jwt\",\n   },\n-  secret: process.env.NEXTAUTH_SECRET, // ‚úÖ carregado do .env\n+  secret: process.env.NEXTAUTH_SECRET,\n   providers: [\n     Google,\n     GitHub,\n     CredentialsProvider({\n-  credentials: {\n-    email: {},\n-    password: {},\n-  },\n-  async authorize(credentials) {\n-    if (!credentials?.email || typeof credentials.email !== \"string\") {\n-      throw new Error(\"E-mail inv√°lido\");\n-    }\n+      credentials: {\n+        email: {},\n+        password: {},\n+      },\n+      async authorize(credentials) {\n+        if (!credentials?.email || typeof credentials.email !== \"string\") {\n+          throw new Error(\"E-mail inv√°lido\");\n+        }\n \n-const user = await getUserByEmail(credentials.email);\n+        const user = await getUserByEmail(credentials.email); // üîê busca real no banco\n \n-    if (!user || user.password !== credentials.password) {\n-      throw new Error(\"Email ou senha incorretos\");\n-    }\n+        if (!user || user.senha !== credentials.password) {\n+          throw new Error(\"Email ou senha incorretos\");\n+        }\n \n-    return user;\n-  },\n-}),\n+        return user;\n+      },\n+    }),\n   ],\n };\n \n export const { auth, handlers, signIn, signOut } = NextAuth(authOptions);\n"
                }
            ],
            "date": 1746829911582,
            "name": "Commit-0",
            "content": "import NextAuth from \"next-auth\";\nimport GitHub from \"next-auth/providers/github\";\nimport Google from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { getUserByEmail, type User } from \"./data\";\n\nexport const authOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  secret: process.env.NEXTAUTH_SECRET, // ‚úÖ ADICIONAR ESTA LINHA AQUI\n  providers: [\n    Google,\n    GitHub,\n    CredentialsProvider({\n      credentials: {\n        email: {},\n        password: {},\n      },\n      async authorize(credentials) {\n        if (!credentials) return null;\n\n        const user = getUserByEmail(credentials.email as string);\n        if (user && user.password === credentials.password) {\n          return user;\n        }\n        throw new Error(\"Email ou senha incorretos.\");\n      },\n    }),\n  ],\n};\n\nexport const { auth, handlers, signIn, signOut } = NextAuth(authOptions);\n"
        }
    ]
}