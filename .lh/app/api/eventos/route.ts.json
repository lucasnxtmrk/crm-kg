{
    "sourceFile": "app/api/eventos/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1746647866548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746647884007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // /app/api/eventos/route.ts\r\n import { prisma } from '@/lib/prisma';\r\n+import { NextResponse } from \"next/server\"\r\n import { Prisma } from '@prisma/client';\r\n \r\n export async function GET() {\r\n   try {\r\n"
                },
                {
                    "date": 1746647896279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n // /app/api/eventos/route.ts\r\n import { prisma } from '@/lib/prisma';\r\n import { NextResponse } from \"next/server\"\r\n-import { Prisma } from '@prisma/client';\r\n \r\n export async function GET() {\r\n   try {\r\n     const eventos = await prisma.eventos.findMany({\r\n"
                },
                {
                    "date": 1746647901593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // /app/api/eventos/route.ts\r\n import { prisma } from '@/lib/prisma';\r\n import { NextResponse } from \"next/server\"\r\n+import { Prisma } from '@prisma/client';\r\n \r\n export async function GET() {\r\n   try {\r\n     const eventos = await prisma.eventos.findMany({\r\n"
                }
            ],
            "date": 1746647866548,
            "name": "Commit-0",
            "content": "// /app/api/eventos/route.ts\r\nimport { prisma } from '@/lib/prisma';\r\nimport { Prisma } from '@prisma/client';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const eventos = await prisma.eventos.findMany({\r\n      include: {\r\n        participantes: {\r\n          include: {\r\n            influenciador: true, // opcional, se quiser os dados do influenciador\r\n          },\r\n        },\r\n        plataformas: {\r\n          include: {\r\n            plataforma: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: { data_evento: 'desc' },\r\n    })\r\n\r\n    return NextResponse.json(eventos)\r\n  } catch (err) {\r\n    return NextResponse.json({ error: \"Erro ao buscar eventos\" }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body: { nome: string; data: string; plataformaIds: string[] } = await req.json();\r\n\r\n    // Validação dos dados recebidos\r\n    if (!body.nome || !body.data || !body.plataformaIds || body.plataformaIds.length === 0) {\r\n      return new Response('Dados incompletos: Nome, data do evento e pelo menos uma plataforma são obrigatórios.', { status: 400 });\r\n    }\r\n\r\n    // Verifica se a data é válida antes de tentar criar um new Date\r\n    const dataEventoTimestamp = Date.parse(body.data);\r\n    if (isNaN(dataEventoTimestamp)) {\r\n        return new Response('Formato de data inválido. Use YYYY-MM-DD.', { status: 400 });\r\n    }\r\n\r\n    const evento = await prisma.eventos.create({\r\n      data: {\r\n        nome: body.nome,\r\n        data_evento: new Date(dataEventoTimestamp), // <-- Usar o novo campo e converter string para Date\r\n                                                  // createdAt será preenchido automaticamente pelo Prisma\r\n        plataformas: { // 'plataformas' é a relação em 'eventos' para 'EventoPlataforma[]'\r\n          create: body.plataformaIds.map((idDaPlataforma: string) => ({\r\n            // 'plataforma' é a relação em 'EventoPlataforma' para o modelo 'plataformas'\r\n            plataforma: {\r\n              connect: { id: idDaPlataforma },\r\n            },\r\n          })),\r\n        },\r\n      },\r\n      include: { // Incluir dados relacionados na resposta\r\n        plataformas: {\r\n          include: {\r\n            plataforma: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return Response.json(evento, { status: 201 }); // 201 Created\r\n  } catch (error) {\r\n    console.error('Erro detalhado ao criar evento:', error); // Log completo do erro no backend\r\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n      if (error.code === 'P2002') {\r\n        // Exemplo: se 'nome' do evento for único e houver duplicidade\r\n        const target = Array.isArray(error.meta?.target) ? error.meta.target.join(', ') : error.meta?.target;\r\n        return new Response(`Conflito ao criar evento. O campo '${target}' pode já existir ou violar uma restrição de unicidade.`, { status: 409 });\r\n      }\r\n      // Outros erros do Prisma\r\n      return new Response(`Erro de banco de dados ao processar sua solicitação. Código: ${error.code}`, { status: 400 });\r\n    } else if (error instanceof SyntaxError) {\r\n      return new Response('Erro de Sintaxe: JSON mal formatado na requisição.', { status: 400 });\r\n    }\r\n    // Erros genéricos\r\n    return new Response('Erro interno do servidor ao tentar criar o evento.', { status: 500 });\r\n  }\r\n}"
        }
    ]
}