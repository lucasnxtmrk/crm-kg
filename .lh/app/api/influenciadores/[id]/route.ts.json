{
    "sourceFile": "app/api/influenciadores/[id]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1746286406049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746292045859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,15 @@\n   }\r\n }\r\n \r\n // PATCH: Atualizar influenciador e suas recargas\r\n+// PATCH: Atualizar influenciador, recargas e salários mensais\r\n export async function PATCH(req: Request, { params }: { params: { id: string } }) {\r\n   const id = params.id;\r\n   const data = await req.json();\r\n \r\n   try {\r\n-    // Atualiza dados principais do influenciador\r\n+    // 1. Atualiza os dados principais do influenciador\r\n     const updatedInfluenciador = await prisma.influenciadores.update({\r\n       where: { id },\r\n       data: {\r\n         nome: data.nome,\r\n@@ -44,16 +45,14 @@\n         chavepix: data.chavepix,\r\n         imagem: data.imagem,\r\n         status: data.status,\r\n         motivo_banimento: data.motivo_banimento,\r\n-    \r\n         contratado: data.contratado,\r\n         salario_fixo: data.salario_fixo,\r\n       },\r\n     });\r\n-    \r\n \r\n-    // Agora atualiza cada recarga (se vieram recargas no request)\r\n+    // 2. Atualiza recargas (se houver)\r\n     if (data.cadastros_influenciadores) {\r\n       for (const cadastro of data.cadastros_influenciadores) {\r\n         for (const recarga of cadastro.recargas) {\r\n           await prisma.recargas.update({\r\n@@ -72,16 +71,38 @@\n         }\r\n       }\r\n     }\r\n \r\n+    // 3. Atualiza salários mensais (delete + create)\r\n+    if (data.salarios_mensais) {\r\n+      const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n+\r\n+      await prisma.salarios_mensais.deleteMany({\r\n+        where: {\r\n+          influenciador_id: id,\r\n+          ano: { in: anos },\r\n+        },\r\n+      });\r\n+\r\n+      await prisma.salarios_mensais.createMany({\r\n+        data: data.salarios_mensais.map((s: any) => ({\r\n+          influenciador_id: id,\r\n+          ano: s.ano,\r\n+          mes: s.mes,\r\n+          valor: s.valor,\r\n+        })),\r\n+      });\r\n+    }\r\n+\r\n     return Response.json(updatedInfluenciador);\r\n   } catch (error) {\r\n     console.error(\"Erro ao atualizar influenciador:\", error);\r\n     return new Response(\"Erro ao atualizar influenciador\", { status: 500 });\r\n   }\r\n }\r\n \r\n \r\n+\r\n // DELETE: Deletar influenciador\r\n export async function DELETE(req: Request, { params }: { params: { id: string } }) {\r\n   const id = params.id;\r\n \r\n"
                },
                {
                    "date": 1746292376627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,11 @@\n // PATCH: Atualizar influenciador, recargas e salários mensais\r\n export async function PATCH(req: Request, { params }: { params: { id: string } }) {\r\n   const id = params.id;\r\n   const data = await req.json();\r\n+  const anos: number[] = data.salarios_mensais.map((s: any) => s.ano);\r\n \r\n+\r\n   try {\r\n     // 1. Atualiza os dados principais do influenciador\r\n     const updatedInfluenciador = await prisma.influenciadores.update({\r\n       where: { id },\r\n"
                },
                {
                    "date": 1746292730447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,25 +76,32 @@\n \r\n     // 3. Atualiza salários mensais (delete + create)\r\n     if (data.salarios_mensais) {\r\n       const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n-\r\n+    \r\n+      // 1. Remove todos os salários dos anos enviados\r\n       await prisma.salarios_mensais.deleteMany({\r\n         where: {\r\n           influenciador_id: id,\r\n           ano: { in: anos },\r\n         },\r\n       });\r\n-\r\n-      await prisma.salarios_mensais.createMany({\r\n-        data: data.salarios_mensais.map((s: any) => ({\r\n-          influenciador_id: id,\r\n-          ano: s.ano,\r\n-          mes: s.mes,\r\n-          valor: s.valor,\r\n-        })),\r\n-      });\r\n+    \r\n+      // 2. Recria apenas os preenchidos (valor numérico)\r\n+      const preenchidos = data.salarios_mensais.filter((s: any) => typeof s.valor === \"number\" && !isNaN(s.valor));\r\n+    \r\n+      if (preenchidos.length > 0) {\r\n+        await prisma.salarios_mensais.createMany({\r\n+          data: preenchidos.map((s: any) => ({\r\n+            influenciador_id: id,\r\n+            ano: s.ano,\r\n+            mes: s.mes,\r\n+            valor: s.valor,\r\n+          })),\r\n+        });\r\n+      }\r\n     }\r\n+    \r\n \r\n     return Response.json(updatedInfluenciador);\r\n   } catch (error) {\r\n     console.error(\"Erro ao atualizar influenciador:\", error);\r\n"
                },
                {
                    "date": 1746293058727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,34 +74,38 @@\n       }\r\n     }\r\n \r\n     // 3. Atualiza salários mensais (delete + create)\r\n-    if (data.salarios_mensais) {\r\n-      const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n+    // 3. Atualiza salários mensais (delete + create)\r\n+if (data.salarios_mensais) {\r\n+  const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n+\r\n+  // 1. Remove todos os salários dos anos enviados\r\n+  await prisma.salarios_mensais.deleteMany({\r\n+    where: {\r\n+      influenciador_id: id,\r\n+      ano: { in: anos },\r\n+    },\r\n+  });\r\n+\r\n+  // 2. Recria apenas os preenchidos (valor numérico)\r\n+  const preenchidos = data.salarios_mensais.filter(\r\n+    (s: any) => typeof s.valor === \"number\" && !isNaN(s.valor)\r\n+  );\r\n+\r\n+  if (preenchidos.length > 0) {\r\n+    await prisma.salarios_mensais.createMany({\r\n+      data: preenchidos.map((s: any) => ({\r\n+        influenciador_id: id,\r\n+        ano: s.ano,\r\n+        mes: s.mes,\r\n+        valor: s.valor,\r\n+      })),\r\n+    });\r\n+  }\r\n+}\r\n+\r\n     \r\n-      // 1. Remove todos os salários dos anos enviados\r\n-      await prisma.salarios_mensais.deleteMany({\r\n-        where: {\r\n-          influenciador_id: id,\r\n-          ano: { in: anos },\r\n-        },\r\n-      });\r\n-    \r\n-      // 2. Recria apenas os preenchidos (valor numérico)\r\n-      const preenchidos = data.salarios_mensais.filter((s: any) => typeof s.valor === \"number\" && !isNaN(s.valor));\r\n-    \r\n-      if (preenchidos.length > 0) {\r\n-        await prisma.salarios_mensais.createMany({\r\n-          data: preenchidos.map((s: any) => ({\r\n-            influenciador_id: id,\r\n-            ano: s.ano,\r\n-            mes: s.mes,\r\n-            valor: s.valor,\r\n-          })),\r\n-        });\r\n-      }\r\n-    }\r\n-    \r\n \r\n     return Response.json(updatedInfluenciador);\r\n   } catch (error) {\r\n     console.error(\"Erro ao atualizar influenciador:\", error);\r\n"
                },
                {
                    "date": 1746293089608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n           include: {\r\n             recargas: true,\r\n           },\r\n         },\r\n+        salarios_mensais: true, // ✅ incluído para trazer os salários também\r\n       },\r\n     });\r\n \r\n     if (!influenciador) {\r\n@@ -26,16 +27,13 @@\n     return new Response(\"Erro ao buscar influenciador\", { status: 500 });\r\n   }\r\n }\r\n \r\n-// PATCH: Atualizar influenciador e suas recargas\r\n // PATCH: Atualizar influenciador, recargas e salários mensais\r\n export async function PATCH(req: Request, { params }: { params: { id: string } }) {\r\n   const id = params.id;\r\n   const data = await req.json();\r\n-  const anos: number[] = data.salarios_mensais.map((s: any) => s.ano);\r\n \r\n-\r\n   try {\r\n     // 1. Atualiza os dados principais do influenciador\r\n     const updatedInfluenciador = await prisma.influenciadores.update({\r\n       where: { id },\r\n@@ -74,70 +72,72 @@\n       }\r\n     }\r\n \r\n     // 3. Atualiza salários mensais (delete + create)\r\n-    // 3. Atualiza salários mensais (delete + create)\r\n-if (data.salarios_mensais) {\r\n-  const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n+    if (Array.isArray(data.salarios_mensais)) {\r\n+      const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n \r\n-  // 1. Remove todos os salários dos anos enviados\r\n-  await prisma.salarios_mensais.deleteMany({\r\n-    where: {\r\n-      influenciador_id: id,\r\n-      ano: { in: anos },\r\n-    },\r\n-  });\r\n+      // Remove salários antigos desses anos\r\n+      await prisma.salarios_mensais.deleteMany({\r\n+        where: {\r\n+          influenciador_id: id,\r\n+          ano: { in: anos },\r\n+        },\r\n+      });\r\n \r\n-  // 2. Recria apenas os preenchidos (valor numérico)\r\n-  const preenchidos = data.salarios_mensais.filter(\r\n-    (s: any) => typeof s.valor === \"number\" && !isNaN(s.valor)\r\n-  );\r\n+      // Cria apenas os que possuem valor numérico válido\r\n+      const preenchidos = data.salarios_mensais.filter(\r\n+        (s: any) => typeof s.valor === \"number\" && !isNaN(s.valor)\r\n+      );\r\n \r\n-  if (preenchidos.length > 0) {\r\n-    await prisma.salarios_mensais.createMany({\r\n-      data: preenchidos.map((s: any) => ({\r\n-        influenciador_id: id,\r\n-        ano: s.ano,\r\n-        mes: s.mes,\r\n-        valor: s.valor,\r\n-      })),\r\n-    });\r\n-  }\r\n-}\r\n+      if (preenchidos.length > 0) {\r\n+        await prisma.salarios_mensais.createMany({\r\n+          data: preenchidos.map((s: any) => ({\r\n+            influenciador_id: id,\r\n+            ano: s.ano,\r\n+            mes: s.mes,\r\n+            valor: s.valor,\r\n+          })),\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-    \r\n-\r\n     return Response.json(updatedInfluenciador);\r\n   } catch (error) {\r\n     console.error(\"Erro ao atualizar influenciador:\", error);\r\n     return new Response(\"Erro ao atualizar influenciador\", { status: 500 });\r\n   }\r\n }\r\n \r\n-\r\n-\r\n-// DELETE: Deletar influenciador\r\n+// DELETE: Deletar influenciador e dados associados\r\n export async function DELETE(req: Request, { params }: { params: { id: string } }) {\r\n   const id = params.id;\r\n \r\n   try {\r\n-    // Primeiro, deletar recargas associadas\r\n+    // Deletar recargas associadas\r\n     await prisma.recargas.deleteMany({\r\n       where: {\r\n         cadastros_influenciadores: {\r\n           influenciador_id: id,\r\n         },\r\n       },\r\n     });\r\n \r\n-    // Depois, deletar cadastros_influenciadores\r\n+    // Deletar cadastros de plataformas\r\n     await prisma.cadastros_influenciadores.deleteMany({\r\n       where: {\r\n         influenciador_id: id,\r\n       },\r\n     });\r\n \r\n-    // Por último, deletar o influenciador\r\n+    // Deletar salários mensais\r\n+    await prisma.salarios_mensais.deleteMany({\r\n+      where: {\r\n+        influenciador_id: id,\r\n+      },\r\n+    });\r\n+\r\n+    // Deletar influenciador\r\n     await prisma.influenciadores.delete({\r\n       where: { id },\r\n     });\r\n \r\n"
                },
                {
                    "date": 1746293139387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,11 @@\n     }\r\n \r\n     // 3. Atualiza salários mensais (delete + create)\r\n     if (Array.isArray(data.salarios_mensais)) {\r\n-      const anos = [...new Set(data.salarios_mensais.map((s: any) => s.ano))];\r\n-\r\n+      const anos: number[] = [...new Set(\r\n+        (data.salarios_mensais as { ano: number }[]).map((s) => s.ano)\r\n+      )];\r\n       // Remove salários antigos desses anos\r\n       await prisma.salarios_mensais.deleteMany({\r\n         where: {\r\n           influenciador_id: id,\r\n"
                }
            ],
            "date": 1746286406049,
            "name": "Commit-0",
            "content": "import { prisma } from \"@/lib/prisma\";\r\n\r\n// GET: Buscar influenciador pelo id\r\nexport async function GET(req: Request, { params }: { params: { id: string } }) {\r\n  const id = params.id;\r\n\r\n  try {\r\n    const influenciador = await prisma.influenciadores.findUnique({\r\n      where: { id },\r\n      include: {\r\n        cadastros_influenciadores: {\r\n          include: {\r\n            recargas: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!influenciador) {\r\n      return new Response(\"Influenciador não encontrado\", { status: 404 });\r\n    }\r\n\r\n    return Response.json(influenciador);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar influenciador:\", error);\r\n    return new Response(\"Erro ao buscar influenciador\", { status: 500 });\r\n  }\r\n}\r\n\r\n// PATCH: Atualizar influenciador e suas recargas\r\nexport async function PATCH(req: Request, { params }: { params: { id: string } }) {\r\n  const id = params.id;\r\n  const data = await req.json();\r\n\r\n  try {\r\n    // Atualiza dados principais do influenciador\r\n    const updatedInfluenciador = await prisma.influenciadores.update({\r\n      where: { id },\r\n      data: {\r\n        nome: data.nome,\r\n        instagram: data.instagram,\r\n        email: data.email,\r\n        cpf: data.cpf,\r\n        chavepix: data.chavepix,\r\n        imagem: data.imagem,\r\n        status: data.status,\r\n        motivo_banimento: data.motivo_banimento,\r\n    \r\n        contratado: data.contratado,\r\n        salario_fixo: data.salario_fixo,\r\n      },\r\n    });\r\n    \r\n\r\n    // Agora atualiza cada recarga (se vieram recargas no request)\r\n    if (data.cadastros_influenciadores) {\r\n      for (const cadastro of data.cadastros_influenciadores) {\r\n        for (const recarga of cadastro.recargas) {\r\n          await prisma.recargas.update({\r\n            where: { id: recarga.id },\r\n            data: {\r\n              salario: recarga.salario,\r\n              meta: recarga.meta,\r\n              atingido: recarga.atingido,\r\n              reembolso: recarga.reembolso,\r\n              depositantes_meta: recarga.depositantes_meta,\r\n              depositantes_atingido: recarga.depositantes_atingido,\r\n              status_meta: recarga.status_meta,\r\n              reembolso_status: recarga.reembolso_status,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return Response.json(updatedInfluenciador);\r\n  } catch (error) {\r\n    console.error(\"Erro ao atualizar influenciador:\", error);\r\n    return new Response(\"Erro ao atualizar influenciador\", { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n// DELETE: Deletar influenciador\r\nexport async function DELETE(req: Request, { params }: { params: { id: string } }) {\r\n  const id = params.id;\r\n\r\n  try {\r\n    // Primeiro, deletar recargas associadas\r\n    await prisma.recargas.deleteMany({\r\n      where: {\r\n        cadastros_influenciadores: {\r\n          influenciador_id: id,\r\n        },\r\n      },\r\n    });\r\n\r\n    // Depois, deletar cadastros_influenciadores\r\n    await prisma.cadastros_influenciadores.deleteMany({\r\n      where: {\r\n        influenciador_id: id,\r\n      },\r\n    });\r\n\r\n    // Por último, deletar o influenciador\r\n    await prisma.influenciadores.delete({\r\n      where: { id },\r\n    });\r\n\r\n    return new Response(\"Influenciador deletado com sucesso\", { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Erro ao deletar influenciador:\", error);\r\n    return new Response(\"Erro ao deletar influenciador\", { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}