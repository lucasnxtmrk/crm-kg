{
    "sourceFile": "app/api/plataformas/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745877286859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745877286859,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { writeFile } from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\n// Fun√ß√£o para gerar slug baseado no nome\r\nfunction slugify(text: string) {\r\n  return text\r\n    .toLowerCase()\r\n    .normalize('NFD')                // separa acentos das letras\r\n    .replace(/[\\u0300-\\u036f]/g, '')  // remove os acentos\r\n    .replace(/[^a-z0-9]+/g, '-')      // troca tudo que n√£o for letra ou n√∫mero por \"-\"\r\n    .replace(/(^-|-$)+/g, '');         // remove h√≠fens do come√ßo e do final\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const plataformas = await prisma.plataformas.findMany({\r\n      orderBy: { nome: \"asc\" },\r\n    });\r\n    return NextResponse.json(plataformas);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar plataformas:\", error);\r\n    return new NextResponse(\"Erro interno\", { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const { nome, cor, imagem } = body;\r\n\r\n    if (!nome || !cor) {\r\n      return new NextResponse(\"Nome e cor s√£o obrigat√≥rios\", { status: 400 });\r\n    }\r\n\r\n    const id = slugify(nome); // üëà Gerando ID bonito baseado no nome!\r\n    let imagemPath: string | undefined = undefined;\r\n\r\n    if (imagem) {\r\n      const buffer = Buffer.from(imagem.split(\",\")[1], \"base64\");\r\n      const filePath = path.join(process.cwd(), \"public\", \"plataformas\", `${id}.png`);\r\n\r\n      await writeFile(filePath, buffer);\r\n\r\n      imagemPath = `/plataformas/${id}.png`;\r\n    }\r\n\r\n    const novaPlataforma = await prisma.plataformas.create({\r\n      data: {\r\n        id,\r\n        nome,\r\n        cor,\r\n        imagem: imagemPath,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(novaPlataforma);\r\n  } catch (error) {\r\n    console.error(\"Erro ao criar plataforma:\", error);\r\n    return new NextResponse(\"Erro interno\", { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}