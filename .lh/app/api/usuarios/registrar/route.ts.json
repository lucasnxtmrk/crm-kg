{
    "sourceFile": "app/api/usuarios/registrar/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746913000190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746913092291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n-import { getServerSession } from 'next-auth';\r\n+import getServerSession from 'next-auth';\r\n import { authOptions } from '@/lib/auth'; // ajuste se seu authOptions estiver em outro lugar\r\n \r\n export async function POST(req: NextRequest) {\r\n   const session = await getServerSession(authOptions);\r\n@@ -17,14 +17,14 @@\n     if (!nome || !email || !senha) {\r\n       return new NextResponse('Campos obrigatórios faltando', { status: 400 });\r\n     }\r\n \r\n-    const existe = await prisma.usuario.findUnique({ where: { email } });\r\n+    const existe = await prisma.usuarios.findUnique({ where: { email } });\r\n     if (existe) {\r\n       return new NextResponse('Email já cadastrado', { status: 409 });\r\n     }\r\n \r\n-    const novoUsuario = await prisma.usuario.create({\r\n+    const novoUsuario = await prisma.usuarios.create({\r\n       data: {\r\n         nome,\r\n         email,\r\n         senha, // aqui você pode aplicar hash futuramente se quiser\r\n"
                },
                {
                    "date": 1746913221813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,33 @@\n+import { auth } from '@/lib/auth' // ou o caminho correto pro seu auth.ts\r\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n-import getServerSession from 'next-auth';\r\n-import { authOptions } from '@/lib/auth'; // ajuste se seu authOptions estiver em outro lugar\r\n \r\n export async function POST(req: NextRequest) {\r\n-  const session = await getServerSession(authOptions);\r\n+  const session = await auth(); // ✅ função pronta do NextAuth v5\r\n \r\n-  // Se não estiver logado, bloqueia\r\n-  if (!session || !session.user) {\r\n+  if (!session?.user) {\r\n     return new NextResponse('Não autorizado', { status: 401 });\r\n   }\r\n \r\n-  try {\r\n-    const { nome, email, senha, role } = await req.json();\r\n+  const { nome, email, senha, role } = await req.json();\r\n \r\n-    if (!nome || !email || !senha) {\r\n-      return new NextResponse('Campos obrigatórios faltando', { status: 400 });\r\n-    }\r\n+  if (!nome || !email || !senha) {\r\n+    return new NextResponse('Campos obrigatórios faltando', { status: 400 });\r\n+  }\r\n \r\n-    const existe = await prisma.usuarios.findUnique({ where: { email } });\r\n-    if (existe) {\r\n-      return new NextResponse('Email já cadastrado', { status: 409 });\r\n-    }\r\n+  const existe = await prisma.usuarios.findUnique({ where: { email } });\r\n+  if (existe) {\r\n+    return new NextResponse('Email já cadastrado', { status: 409 });\r\n+  }\r\n \r\n-    const novoUsuario = await prisma.usuarios.create({\r\n-      data: {\r\n-        nome,\r\n-        email,\r\n-        senha, // aqui você pode aplicar hash futuramente se quiser\r\n-        role: role || 'ADMIN',\r\n-      },\r\n-    });\r\n+  const novoUsuario = await prisma.usuarios.create({\r\n+    data: {\r\n+      nome,\r\n+      email,\r\n+      senha, // (futuramente: hash)\r\n+      role: role || 'ADMIN',\r\n+    },\r\n+  });\r\n \r\n-    return NextResponse.json(novoUsuario, { status: 201 });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    return new NextResponse('Erro ao registrar usuário', { status: 500 });\r\n-  }\r\n+  return NextResponse.json(novoUsuario, { status: 201 });\r\n }\r\n"
                }
            ],
            "date": 1746913000190,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth'; // ajuste se seu authOptions estiver em outro lugar\r\n\r\nexport async function POST(req: NextRequest) {\r\n  const session = await getServerSession(authOptions);\r\n\r\n  // Se não estiver logado, bloqueia\r\n  if (!session || !session.user) {\r\n    return new NextResponse('Não autorizado', { status: 401 });\r\n  }\r\n\r\n  try {\r\n    const { nome, email, senha, role } = await req.json();\r\n\r\n    if (!nome || !email || !senha) {\r\n      return new NextResponse('Campos obrigatórios faltando', { status: 400 });\r\n    }\r\n\r\n    const existe = await prisma.usuario.findUnique({ where: { email } });\r\n    if (existe) {\r\n      return new NextResponse('Email já cadastrado', { status: 409 });\r\n    }\r\n\r\n    const novoUsuario = await prisma.usuario.create({\r\n      data: {\r\n        nome,\r\n        email,\r\n        senha, // aqui você pode aplicar hash futuramente se quiser\r\n        role: role || 'ADMIN',\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(novoUsuario, { status: 201 });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return new NextResponse('Erro ao registrar usuário', { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}