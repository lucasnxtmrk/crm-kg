{
    "sourceFile": "app/[locale]/(protected)/dashboard/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1746644390323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746644493450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,109 @@\n-'use client'\r\n+import { StatusBlock } from \"@/components/blocks/status-block\";\r\n+import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n+import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\r\n+import CardSlider from \"./components/card-slider\";\r\n+import AmountTransfer from \"./components/amount-transfer\";\r\n+import TransactionsTable from \"./components/transactions\";\r\n+import DashboardDropdown from \"@/components/dashboard-dropdown\";\r\n+import HistoryChart from \"./components/history-chart\";\r\n+import AccountChart from \"./components/account-chart\";\r\n+import ColumnRotateLabels from \"./components/column-rotate-labels\";\r\n+import ListaInfluencers from './components/tableInfluencers';\r\n \r\n-import { useEffect, useState } from 'react'\r\n-import { Card, CardContent } from '@/components/ui/card'\r\n-import { Label } from '@/components/ui/label'\r\n-import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'\r\n-import { motion } from 'framer-motion'\r\n-import { format, parseISO } from 'date-fns'\r\n-import { ptBR } from 'date-fns/locale'\r\n \r\n-interface Influenciador {\r\n-  id: string\r\n-  nome: string\r\n-  cadastros_influenciadores: {\r\n-    recargas: {\r\n-      meta: number\r\n-      atingido: number\r\n-    }[]\r\n-  }[]\r\n-  salarios_mensais: {\r\n-    valor: number\r\n-    mes: number\r\n-    ano: number\r\n-  }[]\r\n-  salario_fixo: number | null\r\n-}\r\n \r\n-interface Recarga {\r\n-  inicio: string\r\n-  atingido: number\r\n-  salario: number\r\n-}\r\n+const DashboardKG = () => {\r\n+  return (\r\n+    <div className=\"space-y-5\">\r\n+      <Card>\r\n+        <CardContent className=\"p-6\">\r\n+          <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5 place-content-center\">\r\n+          <StatusBlock\r\n+              title=\"Total de Recargas (MÃªs)\"\r\n+              total=\"R$ 45.320,00\"\r\n+              chartType=\"bar\"\r\n+              className=\"bg-default-50 shadow-none border-none\"\r\n+              opacity={1}\r\n+            />\r\n \r\n-export default function DashboardPage() {\r\n-  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n-  const [recargas, setRecargas] = useState<Recarga[]>([])\r\n-  const [mesSelecionado, setMesSelecionado] = useState(new Date().getMonth() + 1)\r\n+            <StatusBlock\r\n+              title=\"SalÃ¡rio dos funcionÃ¡rios\"\r\n+              total=\"R$ 30.320,00\"\r\n+              chartColor=\"#FCDADA\"\r\n+              chartType=\"bar\"\r\n+              className=\"bg-default-50 shadow-none border-none\"\r\n+              opacity={1}\r\n+            />\r\n+            <StatusBlock\r\n+              title=\"SalÃ¡rio da AgÃªncia\"\r\n+              total=\"R$ 12.800,00\"\r\n+              chartColor=\"#80fac1\"\r\n+              className=\"bg-default-50 shadow-none border-none\"\r\n+              series={[40, 70, 45, 100, 75, 40, 80, 90]}\r\n+              chartType=\"bar\"\r\n+              opacity={1}\r\n+            />\r\n+            <StatusBlock\r\n+              title=\"Reembolsos Pendentes\"\r\n+              total=\"R$ 1.970,00\"\r\n+              chartColor=\"#ffbf99\"\r\n+              className=\"bg-default-50 shadow-none border-none\"\r\n+              chartType=\"bar\"\r\n+              series={[40, 70, 45, 100, 75, 40, 80, 90]}\r\n+              opacity={1}\r\n+            />\r\n+          </div>\r\n+        </CardContent>\r\n+      </Card>\r\n \r\n-  useEffect(() => {\r\n-    fetch('/api/influenciadores')\r\n-      .then(res => res.json())\r\n-      .then(data => setInfluenciadores(data))\r\n-\r\n-    fetch('/api/recargas')\r\n-      .then(res => res.json())\r\n-      .then(data => setRecargas(data))\r\n-  }, [])\r\n-\r\n-  const receitaMensal = recargas\r\n-    .filter(r => new Date(r.inicio).getMonth() + 1 === mesSelecionado)\r\n-    .reduce((acc, r) => acc + r.atingido, 0)\r\n-\r\n-  const gastoComRecargas = recargas\r\n-    .filter(r => new Date(r.inicio).getMonth() + 1 === mesSelecionado)\r\n-    .reduce((acc, r) => acc + r.salario, 0)\r\n-\r\n-  const gastoComSalarios = influenciadores.reduce((acc, inf) => {\r\n-    const fixo = inf.salario_fixo || 0\r\n-    const mensal = inf.salarios_mensais\r\n-      .filter(s => s.mes === mesSelecionado)\r\n-      .reduce((soma, s) => soma + s.valor, 0)\r\n-    return acc + fixo + mensal\r\n-  }, 0)\r\n-\r\n-  const despesaTotal = gastoComRecargas + gastoComSalarios\r\n-\r\n-  return (\r\n-    <div className=\"p-6 space-y-6\">\r\n-      <div className=\"flex items-center gap-4\">\r\n-        <Label>MÃªs:</Label>\r\n-        <Select onValueChange={(value) => setMesSelecionado(Number(value))} defaultValue={String(mesSelecionado)}>\r\n-          <SelectTrigger className=\"w-40\">\r\n-            <SelectValue placeholder=\"Selecione o mÃªs\" />\r\n-          </SelectTrigger>\r\n-          <SelectContent>\r\n-            {[...Array(12)].map((_, i) => (\r\n-              <SelectItem key={i + 1} value={String(i + 1)}>\r\n-                {format(new Date(2023, i), 'MMMM', { locale: ptBR })}\r\n-              </SelectItem>\r\n-            ))}\r\n-          </SelectContent>\r\n-        </Select>\r\n+      <div className=\"gap-5\">\r\n+      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n+  <Card>\r\n+    <CardContent className=\"p-0\">\r\n+      <ListaInfluencers />\r\n+    </CardContent>\r\n+  </Card>\r\n+  <Card>\r\n+    <CardHeader className=\"flex-row gap-1\">\r\n+      <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n+      <DashboardDropdown />\r\n+    </CardHeader>\r\n+    <CardContent>\r\n+      <HistoryChart />\r\n+    </CardContent>\r\n+  </Card>\r\n+</div>\r\n       </div>\r\n \r\n-      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-        <CardMetrica titulo=\"ðŸ’° Receita da agÃªncia\" valor={receitaMensal} cor=\"text-green-500\" />\r\n-        <CardMetrica titulo=\"ðŸ’¸ Gasto com recargas\" valor={gastoComRecargas} cor=\"text-yellow-500\" />\r\n-        <CardMetrica titulo=\"ðŸ§¾ Gasto com salÃ¡rios\" valor={gastoComSalarios} cor=\"text-red-500\" />\r\n-        <CardMetrica titulo=\"ðŸ“‰ Despesa total\" valor={despesaTotal} cor=\"text-red-700\" />\r\n+      <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-5\">\r\n+        <Card>\r\n+          <CardHeader className=\"flex-row gap-1\">\r\n+            <CardTitle className=\"flex-1\">A Receber</CardTitle>\r\n+            <DashboardDropdown />\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <AccountChart />\r\n+          </CardContent>\r\n+        </Card>\r\n+        <Card>\r\n+          <CardHeader className=\"flex-row gap-1\">\r\n+            <CardTitle className=\"flex-1\">A Pagar</CardTitle>\r\n+            <DashboardDropdown />\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <AccountChart\r\n+              series={[\r\n+                {\r\n+                  data: [31, 40, 28, 51, 42, 109, 100],\r\n+                },\r\n+              ]}\r\n+              chartColor=\"primary\"\r\n+            />\r\n+          </CardContent>\r\n+        </Card>\r\n       </div>\r\n     </div>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n-function CardMetrica({ titulo, valor, cor }: { titulo: string, valor: number, cor: string }) {\r\n-  return (\r\n-    <motion.div\r\n-      initial={{ opacity: 0, y: 10 }}\r\n-      animate={{ opacity: 1, y: 0 }}\r\n-      transition={{ duration: 0.4 }}\r\n-    >\r\n-      <Card className=\"shadow-lg\">\r\n-        <CardContent className=\"p-4\">\r\n-          <div className=\"text-sm text-muted-foreground\">{titulo}</div>\r\n-          <div className={`text-2xl font-bold ${cor}`}>R$ {valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</div>\r\n-        </CardContent>\r\n-      </Card>\r\n-    </motion.div>\r\n-  )\r\n-}\r\n+export default DashboardKG;\r\n"
                },
                {
                    "date": 1746644822935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,93 @@\n-import { StatusBlock } from \"@/components/blocks/status-block\";\r\n-import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n-import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\r\n-import CardSlider from \"./components/card-slider\";\r\n-import AmountTransfer from \"./components/amount-transfer\";\r\n-import TransactionsTable from \"./components/transactions\";\r\n-import DashboardDropdown from \"@/components/dashboard-dropdown\";\r\n-import HistoryChart from \"./components/history-chart\";\r\n-import AccountChart from \"./components/account-chart\";\r\n-import ColumnRotateLabels from \"./components/column-rotate-labels\";\r\n-import ListaInfluencers from './components/tableInfluencers';\r\n+'use client'\r\n \r\n+import { useEffect, useState } from 'react'\r\n+import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\r\n+import { StatusBlock } from '@/components/blocks/status-block'\r\n+import ListaInfluencers from './components/tableInfluencers'\r\n+import DashboardDropdown from '@/components/dashboard-dropdown'\r\n+import HistoryChart from './components/history-chart'\r\n+import AccountChart from './components/account-chart'\r\n \r\n+interface Influenciador {\r\n+  id: string\r\n+  nome: string\r\n+  salario_fixo: number | null\r\n+  salarios_mensais: {\r\n+    valor: number\r\n+    mes: number\r\n+    ano: number\r\n+  }[]\r\n+}\r\n \r\n+interface Recarga {\r\n+  inicio: string\r\n+  atingido: number\r\n+  salario: number\r\n+  reembolso_status: string\r\n+}\r\n+\r\n const DashboardKG = () => {\r\n+  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n+  const [recargas, setRecargas] = useState<Recarga[]>([])\r\n+  const [mesAtual, setMesAtual] = useState(new Date().getMonth() + 1)\r\n+\r\n+  useEffect(() => {\r\n+    fetch('/api/influenciadores')\r\n+      .then(res => res.json())\r\n+      .then(data => setInfluenciadores(data))\r\n+\r\n+    fetch('/api/recargas')\r\n+      .then(res => res.json())\r\n+      .then(data => setRecargas(data))\r\n+  }, [])\r\n+\r\n+  const filtrarMes = (data: string) => new Date(data).getMonth() + 1 === mesAtual\r\n+\r\n+  const totalRecargas = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.atingido, 0)\r\n+  const totalSalarioAgencia = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.atingido, 0)\r\n+  const totalSalariosFunc = influenciadores.reduce((acc, inf) => {\r\n+    const fixo = inf.salario_fixo || 0\r\n+    const mensais = inf.salarios_mensais.filter(s => s.mes === mesAtual).reduce((soma, s) => soma + s.valor, 0)\r\n+    return acc + fixo + mensais\r\n+  }, 0)\r\n+  const totalGastoComRecargas = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.salario, 0)\r\n+  const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n+\r\n+  const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n+\r\n   return (\r\n     <div className=\"space-y-5\">\r\n       <Card>\r\n         <CardContent className=\"p-6\">\r\n           <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5 place-content-center\">\r\n-          <StatusBlock\r\n+            <StatusBlock\r\n               title=\"Total de Recargas (MÃªs)\"\r\n-              total=\"R$ 45.320,00\"\r\n+              total={formatar(totalRecargas)}\r\n               chartType=\"bar\"\r\n               className=\"bg-default-50 shadow-none border-none\"\r\n               opacity={1}\r\n             />\r\n-\r\n             <StatusBlock\r\n               title=\"SalÃ¡rio dos funcionÃ¡rios\"\r\n-              total=\"R$ 30.320,00\"\r\n+              total={formatar(totalSalariosFunc)}\r\n               chartColor=\"#FCDADA\"\r\n               chartType=\"bar\"\r\n               className=\"bg-default-50 shadow-none border-none\"\r\n               opacity={1}\r\n             />\r\n             <StatusBlock\r\n               title=\"SalÃ¡rio da AgÃªncia\"\r\n-              total=\"R$ 12.800,00\"\r\n+              total={formatar(totalSalarioAgencia)}\r\n               chartColor=\"#80fac1\"\r\n               className=\"bg-default-50 shadow-none border-none\"\r\n               series={[40, 70, 45, 100, 75, 40, 80, 90]}\r\n               chartType=\"bar\"\r\n               opacity={1}\r\n             />\r\n             <StatusBlock\r\n               title=\"Reembolsos Pendentes\"\r\n-              total=\"R$ 1.970,00\"\r\n+              total={`${reembolsosPendentes}`}\r\n               chartColor=\"#ffbf99\"\r\n               className=\"bg-default-50 shadow-none border-none\"\r\n               chartType=\"bar\"\r\n               series={[40, 70, 45, 100, 75, 40, 80, 90]}\r\n@@ -56,24 +97,24 @@\n         </CardContent>\r\n       </Card>\r\n \r\n       <div className=\"gap-5\">\r\n-      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n-  <Card>\r\n-    <CardContent className=\"p-0\">\r\n-      <ListaInfluencers />\r\n-    </CardContent>\r\n-  </Card>\r\n-  <Card>\r\n-    <CardHeader className=\"flex-row gap-1\">\r\n-      <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n-      <DashboardDropdown />\r\n-    </CardHeader>\r\n-    <CardContent>\r\n-      <HistoryChart />\r\n-    </CardContent>\r\n-  </Card>\r\n-</div>\r\n+        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n+          <Card>\r\n+            <CardContent className=\"p-0\">\r\n+              <ListaInfluencers />\r\n+            </CardContent>\r\n+          </Card>\r\n+          <Card>\r\n+            <CardHeader className=\"flex-row gap-1\">\r\n+              <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n+              <DashboardDropdown />\r\n+            </CardHeader>\r\n+            <CardContent>\r\n+              <HistoryChart />\r\n+            </CardContent>\r\n+          </Card>\r\n+        </div>\r\n       </div>\r\n \r\n       <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-5\">\r\n         <Card>\r\n@@ -102,8 +143,8 @@\n           </CardContent>\r\n         </Card>\r\n       </div>\r\n     </div>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n export default DashboardKG;\r\n"
                },
                {
                    "date": 1746644997591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,11 @@\n   }, [])\r\n \r\n   const filtrarMes = (data: string) => new Date(data).getMonth() + 1 === mesAtual\r\n \r\n-  const totalRecargas = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.atingido, 0)\r\n+  const totalRecargas = recargas\r\n+  .filter(r => filtrarMes(r.inicio))\r\n+  .reduce((acc, r) => acc + r.atingido, 0)\r\n   const totalSalarioAgencia = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.atingido, 0)\r\n   const totalSalariosFunc = influenciadores.reduce((acc, inf) => {\r\n     const fixo = inf.salario_fixo || 0\r\n     const mensais = inf.salarios_mensais.filter(s => s.mes === mesAtual).reduce((soma, s) => soma + s.valor, 0)\r\n"
                },
                {
                    "date": 1746645009720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,11 @@\n \r\n   const totalRecargas = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n   .reduce((acc, r) => acc + r.atingido, 0)\r\n-  const totalSalarioAgencia = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.atingido, 0)\r\n+  const totalSalarioAgencia = recargas\r\n+  .filter(r => filtrarMes(r.inicio))\r\n+  .reduce((acc, r) => acc + r.atingido, 0)\r\n   const totalSalariosFunc = influenciadores.reduce((acc, inf) => {\r\n     const fixo = inf.salario_fixo || 0\r\n     const mensais = inf.salarios_mensais.filter(s => s.mes === mesAtual).reduce((soma, s) => soma + s.valor, 0)\r\n     return acc + fixo + mensais\r\n"
                },
                {
                    "date": 1746645020611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,11 @@\n     const fixo = inf.salario_fixo || 0\r\n     const mensais = inf.salarios_mensais.filter(s => s.mes === mesAtual).reduce((soma, s) => soma + s.valor, 0)\r\n     return acc + fixo + mensais\r\n   }, 0)\r\n-  const totalGastoComRecargas = recargas.filter(r => filtrarMes(r.inicio)).reduce((acc, r) => acc + r.salario, 0)\r\n+  const totalGastoComRecargas = recargas\r\n+  .filter(r => filtrarMes(r.inicio))\r\n+  .reduce((acc, r) => acc + r.salario, 0)\r\n   const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n \r\n   const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n \r\n"
                },
                {
                    "date": 1746645033859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,14 @@\n   .filter(r => filtrarMes(r.inicio))\r\n   .reduce((acc, r) => acc + r.atingido, 0)\r\n   const totalSalariosFunc = influenciadores.reduce((acc, inf) => {\r\n     const fixo = inf.salario_fixo || 0\r\n-    const mensais = inf.salarios_mensais.filter(s => s.mes === mesAtual).reduce((soma, s) => soma + s.valor, 0)\r\n+    const mensais = inf.salarios_mensais\r\n+      .filter(s => s.mes === mesAtual)\r\n+      .reduce((soma, s) => soma + s.valor, 0)\r\n     return acc + fixo + mensais\r\n   }, 0)\r\n+  \r\n   const totalGastoComRecargas = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n   .reduce((acc, r) => acc + r.salario, 0)\r\n   const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n"
                },
                {
                    "date": 1746645058989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n       .filter(s => s.mes === mesAtual)\r\n       .reduce((soma, s) => soma + s.valor, 0)\r\n     return acc + fixo + mensais\r\n   }, 0)\r\n-  \r\n   const totalGastoComRecargas = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n   .reduce((acc, r) => acc + r.salario, 0)\r\n   const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n"
                },
                {
                    "date": 1746645852009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,19 +44,20 @@\n   const filtrarMes = (data: string) => new Date(data).getMonth() + 1 === mesAtual\r\n \r\n   const totalRecargas = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n-  .reduce((acc, r) => acc + r.atingido, 0)\r\n+  .reduce((acc, r) => acc + Number(r.atingido), 0)\r\n   const totalSalarioAgencia = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n-  .reduce((acc, r) => acc + r.atingido, 0)\r\n+  .reduce((acc, r) => acc + Number(r.atingido), 0)\r\n   const totalSalariosFunc = influenciadores.reduce((acc, inf) => {\r\n-    const fixo = inf.salario_fixo || 0\r\n+    const fixo = Number(inf.salario_fixo) || 0\r\n     const mensais = inf.salarios_mensais\r\n       .filter(s => s.mes === mesAtual)\r\n-      .reduce((soma, s) => soma + s.valor, 0)\r\n+      .reduce((soma, s) => soma + Number(s.valor), 0)\r\n     return acc + fixo + mensais\r\n   }, 0)\r\n+  \r\n   const totalGastoComRecargas = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n   .reduce((acc, r) => acc + r.salario, 0)\r\n   const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n"
                },
                {
                    "date": 1746645867895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   }, 0)\r\n   \r\n   const totalGastoComRecargas = recargas\r\n   .filter(r => filtrarMes(r.inicio))\r\n-  .reduce((acc, r) => acc + r.salario, 0)\r\n+  .reduce((acc, r) => acc + Number(r.salario), 0)\r\n   const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n \r\n   const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n \r\n"
                },
                {
                    "date": 1746646492401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n 'use client'\r\n \r\n import { useEffect, useState } from 'react'\r\n-import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\r\n+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\n import { StatusBlock } from '@/components/blocks/status-block'\r\n import ListaInfluencers from './components/tableInfluencers'\r\n import DashboardDropdown from '@/components/dashboard-dropdown'\r\n import HistoryChart from './components/history-chart'\r\n import AccountChart from './components/account-chart'\r\n+import FiltroData from '@/components/FiltroData'\r\n \r\n interface Influenciador {\r\n   id: string\r\n-  nome: string\r\n   salario_fixo: number | null\r\n   salarios_mensais: {\r\n     valor: number\r\n     mes: number\r\n@@ -20,110 +20,98 @@\n }\r\n \r\n interface Recarga {\r\n   inicio: string\r\n-  atingido: number\r\n-  salario: number\r\n-  reembolso_status: string\r\n+  atingido: string\r\n+  salario: string\r\n }\r\n \r\n+interface Evento {\r\n+  data_evento: string\r\n+  participantes: {\r\n+    atingido: number\r\n+  }[]\r\n+}\r\n+\r\n const DashboardKG = () => {\r\n   const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n   const [recargas, setRecargas] = useState<Recarga[]>([])\r\n-  const [mesAtual, setMesAtual] = useState(new Date().getMonth() + 1)\r\n+  const [eventos, setEventos] = useState<Evento[]>([])\r\n+  const [intervalo, setIntervalo] = useState<{ from?: Date; to?: Date }>({})\r\n \r\n   useEffect(() => {\r\n     fetch('/api/influenciadores')\r\n       .then(res => res.json())\r\n-      .then(data => setInfluenciadores(data))\r\n+      .then(setInfluenciadores)\r\n \r\n     fetch('/api/recargas')\r\n       .then(res => res.json())\r\n-      .then(data => setRecargas(data))\r\n+      .then(setRecargas)\r\n+\r\n+    fetch('/api/eventos')\r\n+      .then(res => res.json())\r\n+      .then(setEventos)\r\n   }, [])\r\n \r\n-  const filtrarMes = (data: string) => new Date(data).getMonth() + 1 === mesAtual\r\n+  const dentroDoIntervalo = (dataStr: string) => {\r\n+    const data = new Date(dataStr)\r\n+    if (intervalo.from && data < intervalo.from) return false\r\n+    if (intervalo.to && data > intervalo.to) return false\r\n+    return true\r\n+  }\r\n \r\n-  const totalRecargas = recargas\r\n-  .filter(r => filtrarMes(r.inicio))\r\n-  .reduce((acc, r) => acc + Number(r.atingido), 0)\r\n-  const totalSalarioAgencia = recargas\r\n-  .filter(r => filtrarMes(r.inicio))\r\n-  .reduce((acc, r) => acc + Number(r.atingido), 0)\r\n-  const totalSalariosFunc = influenciadores.reduce((acc, inf) => {\r\n+  const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n+  const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n+\r\n+  const totalSalariosFixosEMensais = influenciadores.reduce((total, inf) => {\r\n     const fixo = Number(inf.salario_fixo) || 0\r\n-    const mensais = inf.salarios_mensais\r\n-      .filter(s => s.mes === mesAtual)\r\n-      .reduce((soma, s) => soma + Number(s.valor), 0)\r\n-    return acc + fixo + mensais\r\n+    const mensais = inf.salarios_mensais.reduce((acc, sal) => acc + Number(sal.valor), 0)\r\n+    return total + fixo + mensais\r\n   }, 0)\r\n-  \r\n-  const totalGastoComRecargas = recargas\r\n-  .filter(r => filtrarMes(r.inicio))\r\n-  .reduce((acc, r) => acc + Number(r.salario), 0)\r\n-  const reembolsosPendentes = recargas.filter(r => r.reembolso_status === 'pendente').length\r\n \r\n+  const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n+\r\n+  const totalArrecadado = recFiltradas.reduce((acc, r) => acc + Number(r.atingido), 0)\r\n+\r\n+  const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n+    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n+  }, 0)\r\n+\r\n   const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n \r\n   return (\r\n     <div className=\"space-y-5\">\r\n+      <div className=\"flex justify-between items-center px-2\">\r\n+        <h2 className=\"text-2xl font-semibold\">Dashboard</h2>\r\n+        <FiltroData className=\"max-w-sm\" />\r\n+      </div>\r\n+\r\n       <Card>\r\n         <CardContent className=\"p-6\">\r\n-          <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5 place-content-center\">\r\n-            <StatusBlock\r\n-              title=\"Total de Recargas (MÃªs)\"\r\n-              total={formatar(totalRecargas)}\r\n-              chartType=\"bar\"\r\n-              className=\"bg-default-50 shadow-none border-none\"\r\n-              opacity={1}\r\n-            />\r\n-            <StatusBlock\r\n-              title=\"SalÃ¡rio dos funcionÃ¡rios\"\r\n-              total={formatar(totalSalariosFunc)}\r\n-              chartColor=\"#FCDADA\"\r\n-              chartType=\"bar\"\r\n-              className=\"bg-default-50 shadow-none border-none\"\r\n-              opacity={1}\r\n-            />\r\n-            <StatusBlock\r\n-              title=\"SalÃ¡rio da AgÃªncia\"\r\n-              total={formatar(totalSalarioAgencia)}\r\n-              chartColor=\"#80fac1\"\r\n-              className=\"bg-default-50 shadow-none border-none\"\r\n-              series={[40, 70, 45, 100, 75, 40, 80, 90]}\r\n-              chartType=\"bar\"\r\n-              opacity={1}\r\n-            />\r\n-            <StatusBlock\r\n-              title=\"Reembolsos Pendentes\"\r\n-              total={`${reembolsosPendentes}`}\r\n-              chartColor=\"#ffbf99\"\r\n-              className=\"bg-default-50 shadow-none border-none\"\r\n-              chartType=\"bar\"\r\n-              series={[40, 70, 45, 100, 75, 40, 80, 90]}\r\n-              opacity={1}\r\n-            />\r\n+          <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5\">\r\n+            <StatusBlock title=\"Total de Despesas\" total={formatar(totalDespesas)} chartType=\"bar\" />\r\n+            <StatusBlock title=\"Despesas com SalÃ¡rios\" total={formatar(totalSalariosFixosEMensais)} chartType=\"bar\" chartColor=\"#FCDADA\" />\r\n+            <StatusBlock title=\"Arrecadado Geral\" total={formatar(totalArrecadado)} chartType=\"bar\" chartColor=\"#80fac1\" />\r\n+            <StatusBlock title=\"ArrecadaÃ§Ã£o em Eventos\" total={formatar(arrecadadoEventos)} chartType=\"bar\" chartColor=\"#FFD700\" />\r\n           </div>\r\n         </CardContent>\r\n       </Card>\r\n \r\n-      <div className=\"gap-5\">\r\n-        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n-          <Card>\r\n-            <CardContent className=\"p-0\">\r\n-              <ListaInfluencers />\r\n-            </CardContent>\r\n-          </Card>\r\n-          <Card>\r\n-            <CardHeader className=\"flex-row gap-1\">\r\n-              <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n-              <DashboardDropdown />\r\n-            </CardHeader>\r\n-            <CardContent>\r\n-              <HistoryChart />\r\n-            </CardContent>\r\n-          </Card>\r\n-        </div>\r\n+      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n+        <Card>\r\n+          <CardContent className=\"p-0\">\r\n+            <ListaInfluencers />\r\n+          </CardContent>\r\n+        </Card>\r\n+        <Card>\r\n+          <CardHeader className=\"flex-row gap-1\">\r\n+            <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n+            <DashboardDropdown />\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <HistoryChart />\r\n+          </CardContent>\r\n+        </Card>\r\n       </div>\r\n \r\n       <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-5\">\r\n         <Card>\r\n@@ -155,5 +143,5 @@\n     </div>\r\n   )\r\n }\r\n \r\n-export default DashboardKG;\r\n+export default DashboardKG\r\n"
                },
                {
                    "date": 1746646499526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+'use client'\r\n+\r\n+import { useEffect, useState } from 'react'\r\n+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\n+import { StatusBlock } from '@/components/blocks/status-block'\r\n+import ListaInfluencers from './components/tableInfluencers'\r\n+import DashboardDropdown from '@/components/dashboard-dropdown'\r\n+import HistoryChart from './components/history-chart'\r\n+import AccountChart from './components/account-chart'\r\n+import FiltroData from './components/FiltroData'\r\n+\r\n+interface Influenciador {\r\n+  id: string\r\n+  salario_fixo: number | null\r\n+  salarios_mensais: {\r\n+    valor: number\r\n+    mes: number\r\n+    ano: number\r\n+  }[]\r\n+}\r\n+\r\n+interface Recarga {\r\n+  inicio: string\r\n+  atingido: string\r\n+  salario: string\r\n+}\r\n+\r\n+interface Evento {\r\n+  data_evento: string\r\n+  participantes: {\r\n+    atingido: number\r\n+  }[]\r\n+}\r\n+\r\n+const DashboardKG = () => {\r\n+  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n+  const [recargas, setRecargas] = useState<Recarga[]>([])\r\n+  const [eventos, setEventos] = useState<Evento[]>([])\r\n+  const [intervalo, setIntervalo] = useState<{ from?: Date; to?: Date }>({})\r\n+\r\n+  useEffect(() => {\r\n+    fetch('/api/influenciadores')\r\n+      .then(res => res.json())\r\n+      .then(setInfluenciadores)\r\n+\r\n+    fetch('/api/recargas')\r\n+      .then(res => res.json())\r\n+      .then(setRecargas)\r\n+\r\n+    fetch('/api/eventos')\r\n+      .then(res => res.json())\r\n+      .then(setEventos)\r\n+  }, [])\r\n+\r\n+  const dentroDoIntervalo = (dataStr: string) => {\r\n+    const data = new Date(dataStr)\r\n+    if (intervalo.from && data < intervalo.from) return false\r\n+    if (intervalo.to && data > intervalo.to) return false\r\n+    return true\r\n+  }\r\n+\r\n+  const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n+  const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n+\r\n+  const totalSalariosFixosEMensais = influenciadores.reduce((total, inf) => {\r\n+    const fixo = Number(inf.salario_fixo) || 0\r\n+    const mensais = inf.salarios_mensais.reduce((acc, sal) => acc + Number(sal.valor), 0)\r\n+    return total + fixo + mensais\r\n+  }, 0)\r\n+\r\n+  const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n+\r\n+  const totalArrecadado = recFiltradas.reduce((acc, r) => acc + Number(r.atingido), 0)\r\n+\r\n+  const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n+    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n+  }, 0)\r\n+\r\n+  const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n+\r\n+  return (\r\n+    <div className=\"space-y-5\">\r\n+      <div className=\"flex justify-between items-center px-2\">\r\n+        <h2 className=\"text-2xl font-semibold\">Dashboard</h2>\r\n+        <FiltroData className=\"max-w-sm\" />\r\n+      </div>\r\n+\r\n+      <Card>\r\n+        <CardContent className=\"p-6\">\r\n+          <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5\">\r\n+            <StatusBlock title=\"Total de Despesas\" total={formatar(totalDespesas)} chartType=\"bar\" />\r\n+            <StatusBlock title=\"Despesas com SalÃ¡rios\" total={formatar(totalSalariosFixosEMensais)} chartType=\"bar\" chartColor=\"#FCDADA\" />\r\n+            <StatusBlock title=\"Arrecadado Geral\" total={formatar(totalArrecadado)} chartType=\"bar\" chartColor=\"#80fac1\" />\r\n+            <StatusBlock title=\"ArrecadaÃ§Ã£o em Eventos\" total={formatar(arrecadadoEventos)} chartType=\"bar\" chartColor=\"#FFD700\" />\r\n+          </div>\r\n+        </CardContent>\r\n+      </Card>\r\n+\r\n+      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n+        <Card>\r\n+          <CardContent className=\"p-0\">\r\n+            <ListaInfluencers />\r\n+          </CardContent>\r\n+        </Card>\r\n+        <Card>\r\n+          <CardHeader className=\"flex-row gap-1\">\r\n+            <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n+            <DashboardDropdown />\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <HistoryChart />\r\n+          </CardContent>\r\n+        </Card>\r\n+      </div>\r\n+\r\n+      <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-5\">\r\n+        <Card>\r\n+          <CardHeader className=\"flex-row gap-1\">\r\n+            <CardTitle className=\"flex-1\">A Receber</CardTitle>\r\n+            <DashboardDropdown />\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <AccountChart />\r\n+          </CardContent>\r\n+        </Card>\r\n+        <Card>\r\n+          <CardHeader className=\"flex-row gap-1\">\r\n+            <CardTitle className=\"flex-1\">A Pagar</CardTitle>\r\n+            <DashboardDropdown />\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <AccountChart\r\n+              series={[\r\n+                {\r\n+                  data: [31, 40, 28, 51, 42, 109, 100],\r\n+                },\r\n+              ]}\r\n+              chartColor=\"primary\"\r\n+            />\r\n+          </CardContent>\r\n+        </Card>\r\n+      </div>\r\n+    </div>\r\n+  )\r\n+}\r\n+\r\n+export default DashboardKG\r\n"
                },
                {
                    "date": 1746646910846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import DashboardDropdown from '@/components/dashboard-dropdown'\r\n import HistoryChart from './components/history-chart'\r\n import AccountChart from './components/account-chart'\r\n import FiltroData from './components/FiltroData'\r\n+import { DateRange } from 'react-day-picker'\r\n \r\n interface Influenciador {\r\n   id: string\r\n   salario_fixo: number | null\r\n@@ -35,9 +36,9 @@\n const DashboardKG = () => {\r\n   const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n   const [recargas, setRecargas] = useState<Recarga[]>([])\r\n   const [eventos, setEventos] = useState<Evento[]>([])\r\n-  const [intervalo, setIntervalo] = useState<{ from?: Date; to?: Date }>({})\r\n+  const [intervalo, setIntervalo] = useState<DateRange | undefined>(undefined)\r\n \r\n   useEffect(() => {\r\n     fetch('/api/influenciadores')\r\n       .then(res => res.json())\r\n@@ -52,12 +53,11 @@\n       .then(setEventos)\r\n   }, [])\r\n \r\n   const dentroDoIntervalo = (dataStr: string) => {\r\n+    if (!intervalo?.from || !intervalo?.to) return true\r\n     const data = new Date(dataStr)\r\n-    if (intervalo.from && data < intervalo.from) return false\r\n-    if (intervalo.to && data > intervalo.to) return false\r\n-    return true\r\n+    return data >= intervalo.from && data <= intervalo.to\r\n   }\r\n \r\n   const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n   const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n@@ -144,151 +144,4 @@\n   )\r\n }\r\n \r\n export default DashboardKG\r\n-'use client'\r\n-\r\n-import { useEffect, useState } from 'react'\r\n-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\n-import { StatusBlock } from '@/components/blocks/status-block'\r\n-import ListaInfluencers from './components/tableInfluencers'\r\n-import DashboardDropdown from '@/components/dashboard-dropdown'\r\n-import HistoryChart from './components/history-chart'\r\n-import AccountChart from './components/account-chart'\r\n-import FiltroData from '@/components/FiltroData'\r\n-\r\n-interface Influenciador {\r\n-  id: string\r\n-  salario_fixo: number | null\r\n-  salarios_mensais: {\r\n-    valor: number\r\n-    mes: number\r\n-    ano: number\r\n-  }[]\r\n-}\r\n-\r\n-interface Recarga {\r\n-  inicio: string\r\n-  atingido: string\r\n-  salario: string\r\n-}\r\n-\r\n-interface Evento {\r\n-  data_evento: string\r\n-  participantes: {\r\n-    atingido: number\r\n-  }[]\r\n-}\r\n-\r\n-const DashboardKG = () => {\r\n-  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n-  const [recargas, setRecargas] = useState<Recarga[]>([])\r\n-  const [eventos, setEventos] = useState<Evento[]>([])\r\n-  const [intervalo, setIntervalo] = useState<{ from?: Date; to?: Date }>({})\r\n-\r\n-  useEffect(() => {\r\n-    fetch('/api/influenciadores')\r\n-      .then(res => res.json())\r\n-      .then(setInfluenciadores)\r\n-\r\n-    fetch('/api/recargas')\r\n-      .then(res => res.json())\r\n-      .then(setRecargas)\r\n-\r\n-    fetch('/api/eventos')\r\n-      .then(res => res.json())\r\n-      .then(setEventos)\r\n-  }, [])\r\n-\r\n-  const dentroDoIntervalo = (dataStr: string) => {\r\n-    const data = new Date(dataStr)\r\n-    if (intervalo.from && data < intervalo.from) return false\r\n-    if (intervalo.to && data > intervalo.to) return false\r\n-    return true\r\n-  }\r\n-\r\n-  const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n-  const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n-\r\n-  const totalSalariosFixosEMensais = influenciadores.reduce((total, inf) => {\r\n-    const fixo = Number(inf.salario_fixo) || 0\r\n-    const mensais = inf.salarios_mensais.reduce((acc, sal) => acc + Number(sal.valor), 0)\r\n-    return total + fixo + mensais\r\n-  }, 0)\r\n-\r\n-  const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n-\r\n-  const totalArrecadado = recFiltradas.reduce((acc, r) => acc + Number(r.atingido), 0)\r\n-\r\n-  const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n-    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n-  }, 0)\r\n-\r\n-  const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n-\r\n-  return (\r\n-    <div className=\"space-y-5\">\r\n-      <div className=\"flex justify-between items-center px-2\">\r\n-        <h2 className=\"text-2xl font-semibold\">Dashboard</h2>\r\n-        <FiltroData className=\"max-w-sm\" />\r\n-      </div>\r\n-\r\n-      <Card>\r\n-        <CardContent className=\"p-6\">\r\n-          <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5\">\r\n-            <StatusBlock title=\"Total de Despesas\" total={formatar(totalDespesas)} chartType=\"bar\" />\r\n-            <StatusBlock title=\"Despesas com SalÃ¡rios\" total={formatar(totalSalariosFixosEMensais)} chartType=\"bar\" chartColor=\"#FCDADA\" />\r\n-            <StatusBlock title=\"Arrecadado Geral\" total={formatar(totalArrecadado)} chartType=\"bar\" chartColor=\"#80fac1\" />\r\n-            <StatusBlock title=\"ArrecadaÃ§Ã£o em Eventos\" total={formatar(arrecadadoEventos)} chartType=\"bar\" chartColor=\"#FFD700\" />\r\n-          </div>\r\n-        </CardContent>\r\n-      </Card>\r\n-\r\n-      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n-        <Card>\r\n-          <CardContent className=\"p-0\">\r\n-            <ListaInfluencers />\r\n-          </CardContent>\r\n-        </Card>\r\n-        <Card>\r\n-          <CardHeader className=\"flex-row gap-1\">\r\n-            <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n-            <DashboardDropdown />\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <HistoryChart />\r\n-          </CardContent>\r\n-        </Card>\r\n-      </div>\r\n-\r\n-      <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-5\">\r\n-        <Card>\r\n-          <CardHeader className=\"flex-row gap-1\">\r\n-            <CardTitle className=\"flex-1\">A Receber</CardTitle>\r\n-            <DashboardDropdown />\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <AccountChart />\r\n-          </CardContent>\r\n-        </Card>\r\n-        <Card>\r\n-          <CardHeader className=\"flex-row gap-1\">\r\n-            <CardTitle className=\"flex-1\">A Pagar</CardTitle>\r\n-            <DashboardDropdown />\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <AccountChart\r\n-              series={[\r\n-                {\r\n-                  data: [31, 40, 28, 51, 42, 109, 100],\r\n-                },\r\n-              ]}\r\n-              chartColor=\"primary\"\r\n-            />\r\n-          </CardContent>\r\n-        </Card>\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-}\r\n-\r\n-export default DashboardKG\r\n"
                },
                {
                    "date": 1746646997627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,10 +81,10 @@\n   return (\r\n     <div className=\"space-y-5\">\r\n       <div className=\"flex justify-between items-center px-2\">\r\n         <h2 className=\"text-2xl font-semibold\">Dashboard</h2>\r\n-        <FiltroData className=\"max-w-sm\" />\r\n-      </div>\r\n+        <FiltroData className=\"max-w-sm\" onChange={setIntervalo} />\r\n+        </div>\r\n \r\n       <Card>\r\n         <CardContent className=\"p-6\">\r\n           <div className=\"grid xl:grid-cols-4 lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-5\">\r\n"
                },
                {
                    "date": 1746647080082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,21 @@\n   }, [])\r\n \r\n   const dentroDoIntervalo = (dataStr: string) => {\r\n     if (!intervalo?.from || !intervalo?.to) return true\r\n+  \r\n     const data = new Date(dataStr)\r\n-    return data >= intervalo.from && data <= intervalo.to\r\n+    const from = new Date(intervalo.from)\r\n+    const to = new Date(intervalo.to)\r\n+  \r\n+    // Zera horas para comparaÃ§Ã£o sÃ³ por dia\r\n+    from.setHours(0, 0, 0, 0)\r\n+    to.setHours(23, 59, 59, 999)\r\n+    data.setHours(12, 0, 0, 0) // Garante que data com hora zero UTC nÃ£o caia fora\r\n+  \r\n+    return data >= from && data <= to\r\n   }\r\n+  \r\n \r\n   const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n   const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n \r\n"
                },
                {
                    "date": 1746647221305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,34 +59,40 @@\n     const data = new Date(dataStr)\r\n     const from = new Date(intervalo.from)\r\n     const to = new Date(intervalo.to)\r\n   \r\n-    // Zera horas para comparaÃ§Ã£o sÃ³ por dia\r\n     from.setHours(0, 0, 0, 0)\r\n     to.setHours(23, 59, 59, 999)\r\n-    data.setHours(12, 0, 0, 0) // Garante que data com hora zero UTC nÃ£o caia fora\r\n+    data.setHours(12, 0, 0, 0)\r\n   \r\n     return data >= from && data <= to\r\n   }\r\n   \r\n-\r\n+  // Filtragem\r\n   const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n   const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n-\r\n+  \r\n+  console.log('ðŸŸ¡ Intervalo selecionado:', intervalo)\r\n+  console.log('ðŸ”µ Recargas filtradas:', recFiltradas.length, recFiltradas)\r\n+  console.log('ðŸŸ£ Eventos filtrados:', eventosFiltrados.length, eventosFiltrados)\r\n+  \r\n   const totalSalariosFixosEMensais = influenciadores.reduce((total, inf) => {\r\n     const fixo = Number(inf.salario_fixo) || 0\r\n     const mensais = inf.salarios_mensais.reduce((acc, sal) => acc + Number(sal.valor), 0)\r\n     return total + fixo + mensais\r\n   }, 0)\r\n-\r\n+  \r\n   const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n-\r\n   const totalArrecadado = recFiltradas.reduce((acc, r) => acc + Number(r.atingido), 0)\r\n+  const arrecadadoEventos = eventosFiltrados.reduce(\r\n+    (total, evento) => total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0),\r\n+    0\r\n+  )\r\n+  \r\n+  console.log('ðŸ§¾ Total de despesas:', totalDespesas)\r\n+  console.log('ðŸ’¸ Total arrecadado:', totalArrecadado)\r\n+  console.log('ðŸŽ¯ Arrecadado em eventos:', arrecadadoEventos)\r\n \r\n-  const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n-    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n-  }, 0)\r\n-\r\n   const formatar = (valor: number) => `R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`\r\n \r\n   return (\r\n     <div className=\"space-y-5\">\r\n"
                },
                {
                    "date": 1746647326810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,17 @@\n   console.log('ðŸŸ£ Eventos filtrados:', eventosFiltrados.length, eventosFiltrados)\r\n   \r\n   const totalSalariosFixosEMensais = influenciadores.reduce((total, inf) => {\r\n     const fixo = Number(inf.salario_fixo) || 0\r\n-    const mensais = inf.salarios_mensais.reduce((acc, sal) => acc + Number(sal.valor), 0)\r\n+  \r\n+    const mensais = inf.salarios_mensais\r\n+      .filter(s => {\r\n+        if (!intervalo?.from || !intervalo?.to) return true\r\n+        const dataSalario = new Date(s.ano, s.mes - 1, 1)\r\n+        return dataSalario >= intervalo.from && dataSalario <= intervalo.to\r\n+      })\r\n+      .reduce((acc, s) => acc + Number(s.valor), 0)\r\n+  \r\n     return total + fixo + mensais\r\n   }, 0)\r\n   \r\n   const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n"
                },
                {
                    "date": 1746647427244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,12 +90,11 @@\n   }, 0)\r\n   \r\n   const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n   const totalArrecadado = recFiltradas.reduce((acc, r) => acc + Number(r.atingido), 0)\r\n-  const arrecadadoEventos = eventosFiltrados.reduce(\r\n-    (total, evento) => total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0),\r\n-    0\r\n-  )\r\n+  const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n+    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n+  }, 0)\r\n   \r\n   console.log('ðŸ§¾ Total de despesas:', totalDespesas)\r\n   console.log('ðŸ’¸ Total arrecadado:', totalArrecadado)\r\n   console.log('ðŸŽ¯ Arrecadado em eventos:', arrecadadoEventos)\r\n"
                },
                {
                    "date": 1746647582105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,11 +89,17 @@\n     return total + fixo + mensais\r\n   }, 0)\r\n   \r\n   const totalDespesas = totalSalariosFixosEMensais + recFiltradas.reduce((acc, r) => acc + Number(r.salario), 0)\r\n-  const totalArrecadado = recFiltradas.reduce((acc, r) => acc + Number(r.atingido), 0)\r\n+  const totalArrecadado = recFiltradas.reduce(\r\n+    (acc, r) => acc + Number(r.atingido || 0),\r\n+    0\r\n+  )  \r\n   const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n-    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n+    return total + evento.participantes.reduce(\r\n+      (soma, p) => soma + Number(p.atingido || 0),\r\n+      0\r\n+    )\r\n   }, 0)\r\n   \r\n   console.log('ðŸ§¾ Total de despesas:', totalDespesas)\r\n   console.log('ðŸ’¸ Total arrecadado:', totalArrecadado)\r\n"
                },
                {
                    "date": 1746648069830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,18 @@\n     fetch('/api/recargas')\r\n       .then(res => res.json())\r\n       .then(setRecargas)\r\n \r\n-    fetch('/api/eventos')\r\n+      fetch('/api/eventos')\r\n       .then(res => res.json())\r\n-      .then(setEventos)\r\n+      .then(data => {\r\n+        // Garante que todos os participantes venham preenchidos\r\n+        const eventosComParticipantes = data.map((evento: any) => ({\r\n+          ...evento,\r\n+          participantes: evento.participantes || []\r\n+        }))\r\n+        setEventos(eventosComParticipantes)\r\n+      })\r\n   }, [])\r\n \r\n   const dentroDoIntervalo = (dataStr: string) => {\r\n     if (!intervalo?.from || !intervalo?.to) return true\r\n"
                },
                {
                    "date": 1746648087162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,14 +101,13 @@\n     (acc, r) => acc + Number(r.atingido || 0),\r\n     0\r\n   )  \r\n   const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n-    return total + evento.participantes.reduce(\r\n-      (soma, p) => soma + Number(p.atingido || 0),\r\n-      0\r\n-    )\r\n+    if (!evento.participantes) return total\r\n+    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n   }, 0)\r\n   \r\n+  \r\n   console.log('ðŸ§¾ Total de despesas:', totalDespesas)\r\n   console.log('ðŸ’¸ Total arrecadado:', totalArrecadado)\r\n   console.log('ðŸŽ¯ Arrecadado em eventos:', arrecadadoEventos)\r\n \r\n"
                },
                {
                    "date": 1746648147367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     0\r\n   )  \r\n   const arrecadadoEventos = eventosFiltrados.reduce((total, evento) => {\r\n     if (!evento.participantes) return total\r\n-    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido), 0)\r\n+    return total + evento.participantes.reduce((soma, p) => soma + Number(p.atingido || 0)    , 0)\r\n   }, 0)\r\n   \r\n   \r\n   console.log('ðŸ§¾ Total de despesas:', totalDespesas)\r\n"
                },
                {
                    "date": 1746648617534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \r\n       <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5\">\r\n         <Card>\r\n           <CardContent className=\"p-0\">\r\n-            <ListaInfluencers />\r\n+          <ListaInfluencers intervalo={intervalo} />\r\n           </CardContent>\r\n         </Card>\r\n         <Card>\r\n           <CardHeader className=\"flex-row gap-1\">\r\n"
                },
                {
                    "date": 1746649211233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,28 @@\n   }\r\n   \r\n   // Filtragem\r\n   const recFiltradas = recargas.filter(r => dentroDoIntervalo(r.inicio))\r\n+  const recargasPorDia: { [dia: string]: number } = {}\r\n+\r\n+recFiltradas.forEach(r => {\r\n+  const dia = new Date(r.inicio).toLocaleDateString('pt-BR', {\r\n+    weekday: 'short',\r\n+    timeZone: 'UTC'\r\n+  })\r\n+\r\n+  recargasPorDia[dia] = (recargasPorDia[dia] || 0) + Number(r.atingido)\r\n+})\r\n+\r\n+const diasSemana = ['dom.', 'seg.', 'ter.', 'qua.', 'qui.', 'sex.', 'sÃ¡b.']\r\n+\r\n+const seriesChart = [\r\n+  {\r\n+    name: \"Recargas\",\r\n+    data: diasSemana.map(dia => recargasPorDia[dia] || 0)\r\n+  }\r\n+]\r\n+\r\n   const eventosFiltrados = eventos.filter(e => dentroDoIntervalo(e.data_evento))\r\n   \r\n   console.log('ðŸŸ¡ Intervalo selecionado:', intervalo)\r\n   console.log('ðŸ”µ Recargas filtradas:', recFiltradas.length, recFiltradas)\r\n"
                },
                {
                    "date": 1746649224787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n             <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n             <DashboardDropdown />\r\n           </CardHeader>\r\n           <CardContent>\r\n-            <HistoryChart />\r\n+          <HistoryChart series={seriesChart} />\r\n           </CardContent>\r\n         </Card>\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1746649295290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n             <CardTitle className=\"flex-1\">HistÃ³rico de MovimentaÃ§Ãµes</CardTitle>\r\n             <DashboardDropdown />\r\n           </CardHeader>\r\n           <CardContent>\r\n-          <HistoryChart series={seriesChart} />\r\n+          <HistoryChart series={seriesChart} categories={diasSemana} />\r\n           </CardContent>\r\n         </Card>\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1746649369630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,36 +166,8 @@\n           <HistoryChart series={seriesChart} categories={diasSemana} />\r\n           </CardContent>\r\n         </Card>\r\n       </div>\r\n-\r\n-      <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-5\">\r\n-        <Card>\r\n-          <CardHeader className=\"flex-row gap-1\">\r\n-            <CardTitle className=\"flex-1\">A Receber</CardTitle>\r\n-            <DashboardDropdown />\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <AccountChart />\r\n-          </CardContent>\r\n-        </Card>\r\n-        <Card>\r\n-          <CardHeader className=\"flex-row gap-1\">\r\n-            <CardTitle className=\"flex-1\">A Pagar</CardTitle>\r\n-            <DashboardDropdown />\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <AccountChart\r\n-              series={[\r\n-                {\r\n-                  data: [31, 40, 28, 51, 42, 109, 100],\r\n-                },\r\n-              ]}\r\n-              chartColor=\"primary\"\r\n-            />\r\n-          </CardContent>\r\n-        </Card>\r\n-      </div>\r\n     </div>\r\n   )\r\n }\r\n \r\n"
                }
            ],
            "date": 1746644390323,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'\r\nimport { motion } from 'framer-motion'\r\nimport { format, parseISO } from 'date-fns'\r\nimport { ptBR } from 'date-fns/locale'\r\n\r\ninterface Influenciador {\r\n  id: string\r\n  nome: string\r\n  cadastros_influenciadores: {\r\n    recargas: {\r\n      meta: number\r\n      atingido: number\r\n    }[]\r\n  }[]\r\n  salarios_mensais: {\r\n    valor: number\r\n    mes: number\r\n    ano: number\r\n  }[]\r\n  salario_fixo: number | null\r\n}\r\n\r\ninterface Recarga {\r\n  inicio: string\r\n  atingido: number\r\n  salario: number\r\n}\r\n\r\nexport default function DashboardPage() {\r\n  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([])\r\n  const [recargas, setRecargas] = useState<Recarga[]>([])\r\n  const [mesSelecionado, setMesSelecionado] = useState(new Date().getMonth() + 1)\r\n\r\n  useEffect(() => {\r\n    fetch('/api/influenciadores')\r\n      .then(res => res.json())\r\n      .then(data => setInfluenciadores(data))\r\n\r\n    fetch('/api/recargas')\r\n      .then(res => res.json())\r\n      .then(data => setRecargas(data))\r\n  }, [])\r\n\r\n  const receitaMensal = recargas\r\n    .filter(r => new Date(r.inicio).getMonth() + 1 === mesSelecionado)\r\n    .reduce((acc, r) => acc + r.atingido, 0)\r\n\r\n  const gastoComRecargas = recargas\r\n    .filter(r => new Date(r.inicio).getMonth() + 1 === mesSelecionado)\r\n    .reduce((acc, r) => acc + r.salario, 0)\r\n\r\n  const gastoComSalarios = influenciadores.reduce((acc, inf) => {\r\n    const fixo = inf.salario_fixo || 0\r\n    const mensal = inf.salarios_mensais\r\n      .filter(s => s.mes === mesSelecionado)\r\n      .reduce((soma, s) => soma + s.valor, 0)\r\n    return acc + fixo + mensal\r\n  }, 0)\r\n\r\n  const despesaTotal = gastoComRecargas + gastoComSalarios\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <div className=\"flex items-center gap-4\">\r\n        <Label>MÃªs:</Label>\r\n        <Select onValueChange={(value) => setMesSelecionado(Number(value))} defaultValue={String(mesSelecionado)}>\r\n          <SelectTrigger className=\"w-40\">\r\n            <SelectValue placeholder=\"Selecione o mÃªs\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            {[...Array(12)].map((_, i) => (\r\n              <SelectItem key={i + 1} value={String(i + 1)}>\r\n                {format(new Date(2023, i), 'MMMM', { locale: ptBR })}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        <CardMetrica titulo=\"ðŸ’° Receita da agÃªncia\" valor={receitaMensal} cor=\"text-green-500\" />\r\n        <CardMetrica titulo=\"ðŸ’¸ Gasto com recargas\" valor={gastoComRecargas} cor=\"text-yellow-500\" />\r\n        <CardMetrica titulo=\"ðŸ§¾ Gasto com salÃ¡rios\" valor={gastoComSalarios} cor=\"text-red-500\" />\r\n        <CardMetrica titulo=\"ðŸ“‰ Despesa total\" valor={despesaTotal} cor=\"text-red-700\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CardMetrica({ titulo, valor, cor }: { titulo: string, valor: number, cor: string }) {\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 10 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.4 }}\r\n    >\r\n      <Card className=\"shadow-lg\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"text-sm text-muted-foreground\">{titulo}</div>\r\n          <div className={`text-2xl font-bold ${cor}`}>R$ {valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</div>\r\n        </CardContent>\r\n      </Card>\r\n    </motion.div>\r\n  )\r\n}\r\n"
        }
    ]
}