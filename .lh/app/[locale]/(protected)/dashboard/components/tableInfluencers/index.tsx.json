{
    "sourceFile": "app/[locale]/(protected)/dashboard/components/tableInfluencers/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744233846204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744233905686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+\"use client\"\r\n+\r\n+import * as React from \"react\"\r\n+import {\r\n+  ColumnFiltersState,\r\n+  SortingState,\r\n+  VisibilityState,\r\n+  flexRender,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  useReactTable,\r\n+\r\n+} from \"@tanstack/react-table\"\r\n+import { columns } from \"./columns\"\r\n+import { Input } from \"@/components/ui/input\"\r\n+\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableHead,\r\n+  TableHeader,\r\n+  TableRow,\r\n+} from \"@/components/ui/table\"\r\n+\r\n+import { data } from \"./data\"\r\n+import TablePagination from \"./table-pagination\"\r\n+\r\n+const ExampleOne = () => {\r\n+  const [sorting, setSorting] = React.useState<SortingState>([])\r\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\r\n+    []\r\n+  )\r\n+  const [columnVisibility, setColumnVisibility] =\r\n+    React.useState<VisibilityState>({})\r\n+  const [rowSelection, setRowSelection] = React.useState({})\r\n+\r\n+  const table = useReactTable({\r\n+    data,\r\n+    columns,\r\n+    onSortingChange: setSorting,\r\n+    onColumnFiltersChange: setColumnFilters,\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    onColumnVisibilityChange: setColumnVisibility,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    state: {\r\n+      sorting,\r\n+      columnFilters,\r\n+      columnVisibility,\r\n+      rowSelection,\r\n+    },\r\n+    initialState: {\r\n+      pagination: {\r\n+        pageSize: 5,\r\n+      },\r\n+    },\r\n+  })\r\n+  \r\n+\r\n+  return (\r\n+    <div className=\"w-full\">\r\n+      <div className=\"flex items-center py-4 px-5\">\r\n+        <div className=\"flex-1 text-xl font-medium text-default-900\">\r\n+          Metas batidas\r\n+        </div>\r\n+        <div className=\"flex-none\">\r\n+          <Input\r\n+            placeholder=\"Filtre por status...\"\r\n+            value={(table.getColumn(\"status\")?.getFilterValue() as string) ?? \"\"}\r\n+            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n+              table.getColumn(\"status\")?.setFilterValue(event.target.value)\r\n+            }\r\n+            className=\"max-w-sm \"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <Table>\r\n+        <TableHeader>\r\n+          {table.getHeaderGroups().map((headerGroup) => (\r\n+            <TableRow key={headerGroup.id}>\r\n+              {headerGroup.headers.map((header) => {\r\n+                return (\r\n+                  <TableHead key={header.id}>\r\n+                    {header.isPlaceholder\r\n+                      ? null\r\n+                      : flexRender(\r\n+                        header.column.columnDef.header,\r\n+                        header.getContext()\r\n+                      )}\r\n+                  </TableHead>\r\n+                )\r\n+              })}\r\n+            </TableRow>\r\n+          ))}\r\n+        </TableHeader>\r\n+        <TableBody>\r\n+          {table.getRowModel().rows?.length ? (\r\n+            table.getRowModel().rows.map((row) => (\r\n+              <TableRow\r\n+                key={row.id}\r\n+                data-state={row.getIsSelected() && \"selected\"}\r\n+              >\r\n+                {row.getVisibleCells().map((cell) => (\r\n+                  <TableCell key={cell.id}>\r\n+                    {flexRender(\r\n+                      cell.column.columnDef.cell,\r\n+                      cell.getContext()\r\n+                    )}\r\n+                  </TableCell>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))\r\n+          ) : (\r\n+            <TableRow>\r\n+              <TableCell\r\n+                colSpan={columns.length}\r\n+                className=\"h-24 text-center\"\r\n+              >\r\n+                No results.\r\n+              </TableCell>\r\n+            </TableRow>\r\n+          )}\r\n+        </TableBody>\r\n+      </Table>\r\n+      <TablePagination table={table} />\r\n+    </div>\r\n+  )\r\n+}\r\n+export default ExampleOne;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744233846204,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n\r\n} from \"@tanstack/react-table\"\r\nimport { columns } from \"./columns\"\r\nimport { Input } from \"@/components/ui/input\"\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\n\r\nimport { data } from \"./data\"\r\nimport TablePagination from \"./table-pagination\"\r\n\r\nconst ExampleOne = () => {\r\n  const [sorting, setSorting] = React.useState<SortingState>([])\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\r\n    []\r\n  )\r\n  const [columnVisibility, setColumnVisibility] =\r\n    React.useState<VisibilityState>({})\r\n  const [rowSelection, setRowSelection] = React.useState({})\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n    },\r\n    initialState: {\r\n      pagination: {\r\n        pageSize: 5,\r\n      },\r\n    },\r\n  })\r\n  \r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center py-4 px-5\">\r\n        <div className=\"flex-1 text-xl font-medium text-default-900\">\r\n          Metas batidas\r\n        </div>\r\n        <div className=\"flex-none\">\r\n          <Input\r\n            placeholder=\"Filter Status...\"\r\n            value={(table.getColumn(\"status\")?.getFilterValue() as string) ?? \"\"}\r\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n              table.getColumn(\"status\")?.setFilterValue(event.target.value)\r\n            }\r\n            className=\"max-w-sm \"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <Table>\r\n        <TableHeader>\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => {\r\n                return (\r\n                  <TableHead key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                        header.column.columnDef.header,\r\n                        header.getContext()\r\n                      )}\r\n                  </TableHead>\r\n                )\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {table.getRowModel().rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow\r\n                key={row.id}\r\n                data-state={row.getIsSelected() && \"selected\"}\r\n              >\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(\r\n                      cell.column.columnDef.cell,\r\n                      cell.getContext()\r\n                    )}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell\r\n                colSpan={columns.length}\r\n                className=\"h-24 text-center\"\r\n              >\r\n                No results.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      <TablePagination table={table} />\r\n    </div>\r\n  )\r\n}\r\nexport default ExampleOne;"
        }
    ]
}