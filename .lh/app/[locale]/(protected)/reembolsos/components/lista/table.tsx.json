{
    "sourceFile": "app/[locale]/(protected)/reembolsos/components/lista/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745869783792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745869870766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,4 +79,105 @@\n   }, []);\r\n \r\n \r\n   // Função de abrir o modal\r\n+  const handleView = (linha: LinhaReembolso) => {\r\n+    const influenciador = influenciadores.find((inf) => inf.nome === linha.nome);\r\n+    if (influenciador) {\r\n+      setInfluenciadorSelecionado(influenciador);\r\n+      setModalAberto(true);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Função de atualizar o status de reembolso\r\n+  const handleUpdateStatus = (recargaId: string, newStatus: \"pendente\" | \"pago\") => {\r\n+    console.log(`Atualizar Recarga ${recargaId} para status ${newStatus}`);\r\n+    // Aqui você vai implementar depois a atualização no seu backend/API\r\n+  };\r\n+\r\n+  const columns = getColumns({ onUpdateStatus: handleUpdateStatus, onView: handleView });\r\n+\r\n+  const table = useReactTable({\r\n+    data,\r\n+    columns,\r\n+    onSortingChange: setSorting,\r\n+    onColumnFiltersChange: setColumnFilters,\r\n+    onColumnVisibilityChange: setColumnVisibility,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onPaginationChange: setPagination,\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    state: {\r\n+      sorting,\r\n+      columnFilters,\r\n+      columnVisibility,\r\n+      rowSelection,\r\n+      pagination,\r\n+    },\r\n+  });\r\n+\r\n+  return (\r\n+    <div className=\"w-full\">\r\n+      <div className=\"flex items-center py-4 px-5\">\r\n+        <div className=\"flex-1 text-xl font-medium text-default-900\">Reembolsos Pendentes</div>\r\n+        <div className=\"flex-none\">\r\n+          <Input\r\n+            placeholder=\"Filtrar por nome...\"\r\n+            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n+            onChange={(event) =>\r\n+              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n+            }\r\n+            className=\"max-w-sm\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <Table>\r\n+        <TableHeader className=\"bg-default-200\">\r\n+          {table.getHeaderGroups().map((headerGroup) => (\r\n+            <TableRow key={headerGroup.id}>\r\n+              {headerGroup.headers.map((header) => (\r\n+                <TableHead key={header.id}>\r\n+                  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\r\n+                </TableHead>\r\n+              ))}\r\n+            </TableRow>\r\n+          ))}\r\n+        </TableHeader>\r\n+\r\n+        <TableBody>\r\n+          {table.getRowModel().rows.length ? (\r\n+            table.getRowModel().rows.map((row) => (\r\n+              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n+                {row.getVisibleCells().map((cell) => (\r\n+                  <TableCell key={cell.id}>\r\n+                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                  </TableCell>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))\r\n+          ) : (\r\n+            <TableRow>\r\n+              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n+                Nenhum reembolso pendente encontrado.\r\n+              </TableCell>\r\n+            </TableRow>\r\n+          )}\r\n+        </TableBody>\r\n+      </Table>\r\n+\r\n+      <TablePagination table={table} />\r\n+\r\n+      {/* Modal de visualização do influenciador */}\r\n+      <InfluenciadorModal\r\n+        open={modalAberto}\r\n+        onClose={() => setModalAberto(false)}\r\n+        influenciador={influenciadorSelecionado}\r\n+      />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default ListReembolsos;\r\n"
                }
            ],
            "date": 1745869783792,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  flexRender,\r\n} from '@tanstack/react-table';\r\n\r\nimport { getColumns, LinhaReembolso } from './columns';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport TablePagination from './table-pagination';\r\nimport { useState, useEffect } from 'react';\r\nimport InfluenciadorModal from '@/components/InfluenciadorModal'; // modal do influenciador\r\nimport { Influenciador } from '@/lib/types'; // Importa o tipo certo// <<< modal do influenciador\r\n\r\nconst ListReembolsos = () => {\r\n  const [data, setData] = useState<LinhaReembolso[]>([]);\r\n  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([]);\r\n  \r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [pagination, setPagination] = useState({ pageIndex: 0, pageSize: 10 });\r\n\r\n  const [modalAberto, setModalAberto] = useState(false);\r\n  const [influenciadorSelecionado, setInfluenciadorSelecionado] = useState<Influenciador | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await fetch('/api/influenciadores');\r\n        const lista: Influenciador[] = await res.json();\r\n        setInfluenciadores(lista);\r\n\r\n        const linhas = lista.flatMap((inf) =>\r\n          inf.cadastros_influenciadores?.flatMap((cadastro) =>\r\n            cadastro.recargas\r\n              .filter((rec) => rec.reembolso > 0 && rec.reembolso_status === 'pendente')\r\n              .map((rec) => ({\r\n                recargaId: rec.id,\r\n                nome: inf.nome,\r\n                imagem: inf.imagem,\r\n                instagram: inf.instagram,\r\n                cpf: inf.cpf,\r\n                plataforma: cadastro.plataforma_id,\r\n                inicio: rec.inicio,\r\n                termino: rec.termino,\r\n                meta: Number(rec.meta),\r\n                atingido: Number(rec.atingido),\r\n                reembolso: Number(rec.reembolso),\r\n                reembolsoStatus: rec.reembolso_status as \"pendente\" | \"pago\",\r\n              }))\r\n          ) || []\r\n        );\r\n\r\n        setData(linhas);\r\n      } catch (error) {\r\n        console.error('Erro ao buscar influenciadores:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\nexport default ListReembolsos;\r\n"
        }
    ]
}