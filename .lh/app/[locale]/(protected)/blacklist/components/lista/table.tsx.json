{
    "sourceFile": "app/[locale]/(protected)/blacklist/components/lista/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745873365150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745874084684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,12 +137,18 @@\n       <TablePagination table={table} />\r\n \r\n       {/* Modal para visualizar o influenciador */}\r\n       <InfluenciadorModal\r\n-        open={modalAberto}\r\n-        onClose={() => setModalAberto(false)}\r\n-        influenciador={influenciadorSelecionado}\r\n-      />\r\n+  open={modalAberto}\r\n+  onClose={() => setModalAberto(false)}\r\n+  influenciador={influenciadorSelecionado}\r\n+  onUpdate={(updated) => {\r\n+    setInfluenciadores((prev) =>\r\n+      prev.map((inf) => (inf.id === updated.id ? updated : inf))\r\n+    );\r\n+    setInfluenciadorSelecionado(updated); // também atualiza o modal\r\n+  }}\r\n+/>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1745874192783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n   onClose={() => setModalAberto(false)}\r\n   influenciador={influenciadorSelecionado}\r\n   onUpdate={(updated) => {\r\n     setInfluenciadores((prev) =>\r\n-      prev.map((inf) => (inf.id === updated.id ? updated : inf))\r\n+      prev.map((inf: Influenciador) => (inf.id === updated.id ? updated : inf))\r\n     );\r\n     setInfluenciadorSelecionado(updated); // também atualiza o modal\r\n   }}\r\n />\r\n"
                },
                {
                    "date": 1745874229926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,10 @@\n   \r\n   const [modalAberto, setModalAberto] = useState(false);\r\n   const [influenciadorSelecionado, setInfluenciadorSelecionado] = useState<Influenciador | null>(null);\r\n \r\n+  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([]);\r\n+\r\n   // ⬇️ Buscar da API\r\n   useEffect(() => {\r\n     async function fetchData() {\r\n       try {\r\n"
                }
            ],
            "date": 1745873365150,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  flexRender,\r\n} from '@tanstack/react-table';\r\n\r\nimport { getColumns } from './columns'; // ❗ Ajusta se seu `getColumns` está correto\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport TablePagination from './table-pagination';\r\nimport { useState, useEffect } from 'react';\r\nimport InfluenciadorModal from '@/components/InfluenciadorModal';\r\nimport { Influenciador } from '@/lib/types'; // tipo certo\r\n\r\nconst ListaBlacklist = () => {\r\n  const [data, setData] = useState<Influenciador[]>([]);\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [pagination, setPagination] = useState({ pageIndex: 0, pageSize: 10 });\r\n  \r\n  const [modalAberto, setModalAberto] = useState(false);\r\n  const [influenciadorSelecionado, setInfluenciadorSelecionado] = useState<Influenciador | null>(null);\r\n\r\n  // ⬇️ Buscar da API\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await fetch('/api/influenciadores');\r\n        const lista: Influenciador[] = await res.json();\r\n        \r\n        // Filtra apenas banidos\r\n        const banidos = lista.filter(i => i.status === 'banido');\r\n        setData(banidos);\r\n\r\n      } catch (error) {\r\n        console.error('Erro ao buscar influenciadores:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleView = (inf: Influenciador) => {\r\n    setInfluenciadorSelecionado(inf);\r\n    setModalAberto(true);\r\n  };\r\n\r\n  const columns = getColumns({ onView: handleView }); // Aqui o seu getColumns precisa esperar onView\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    onPaginationChange: setPagination,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n      pagination,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center py-4 px-5\">\r\n        <div className=\"flex-1 text-xl font-medium text-default-900\">Lista Negra</div>\r\n        <div className=\"flex-none\">\r\n          <Input\r\n            placeholder=\"Filtrar por nome...\"\r\n            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n            onChange={(event) => table.getColumn('nome')?.setFilterValue(event.target.value)}\r\n            className=\"max-w-sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <Table>\r\n        <TableHeader className=\"bg-default-200\">\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <TableHead key={header.id}>\r\n                  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\r\n                </TableHead>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n\r\n        <TableBody>\r\n          {table.getRowModel().rows.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                Nenhum influenciador banido encontrado.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      <TablePagination table={table} />\r\n\r\n      {/* Modal para visualizar o influenciador */}\r\n      <InfluenciadorModal\r\n        open={modalAberto}\r\n        onClose={() => setModalAberto(false)}\r\n        influenciador={influenciadorSelecionado}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListaBlacklist;\r\n"
        }
    ]
}