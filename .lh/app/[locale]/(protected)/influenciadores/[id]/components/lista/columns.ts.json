{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/lista/columns.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745007658060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745007658060,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { ColumnDef } from '@tanstack/react-table';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye, SquarePen, Trash2 } from 'lucide-react';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// ✅ Aqui está certo, o tipo já vem de outro lugar\r\nimport { InfluenciadorLista } from '../../types';\r\n\r\n\r\n\r\nexport type InfluenciadorLista = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  instagram: string;\r\n  cpf: string;\r\n  meta: number;\r\n  atingido: number;\r\n  statusMeta: 'completo' | 'incompleto';\r\n};\r\n\r\nexport const columns: ColumnDef<InfluenciadorLista>[] = [\r\n  {\r\n    id: 'select',\r\n    header: ({ table }) => (\r\n      <Checkbox\r\n        checked={\r\n          table.getIsAllPageRowsSelected() ||\r\n          (table.getIsSomePageRowsSelected() && 'indeterminate')\r\n        }\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label=\"Selecionar tudo\"\r\n      />\r\n    ),\r\n    cell: ({ row }) => (\r\n      <Checkbox\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label=\"Selecionar linha\"\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n  },\r\n  {\r\n    accessorKey: 'nome',\r\n    header: 'Nome',\r\n    cell: ({ row }) => {\r\n      const { nome, imagem } = row.original;\r\n      return (\r\n        <div className=\"flex items-center gap-3\">\r\n          <Avatar className=\"w-8 h-8\">\r\n            {imagem ? <AvatarImage src={imagem} /> : <AvatarFallback>INF</AvatarFallback>}\r\n          </Avatar>\r\n          <span>{nome}</span>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'instagram',\r\n    header: 'Instagram',\r\n    cell: ({ row }) => (\r\n      <a\r\n        href={row.original.instagram}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"text-blue-600 underline text-sm\"\r\n      >\r\n        @{row.original.instagram.replace('https://instagram.com/', '')}\r\n      </a>\r\n    ),\r\n  },\r\n  {\r\n    accessorKey: 'cpf',\r\n    header: 'CPF',\r\n    cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'meta',\r\n    header: 'Meta',\r\n    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'atingido',\r\n    header: 'Atingido',\r\n    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'statusMeta',\r\n    header: 'Status da Meta',\r\n    cell: ({ row }) => {\r\n      const status = row.original.statusMeta;\r\n  \r\n      const isCompleto = status === \"completo\";\r\n  \r\n      return (\r\n        <div className=\"inline-flex items-center gap-2 px-2 py-1 rounded-full text-sm font-medium \r\n          border \r\n          whitespace-nowrap\r\n          capitalize\r\n          transition\r\n          text-white\r\n          bg-success/80\r\n          dark:bg-success/70\r\n          \" \r\n          style={{\r\n            backgroundColor: isCompleto ? '#22c55e' : '#facc15',\r\n            color: isCompleto ? 'white' : '#92400e'\r\n          }}\r\n        >\r\n          <span className=\"h-2 w-2 rounded-full bg-white\" />\r\n          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n  {\r\n    id: 'actions',\r\n    header: 'Ações',\r\n    cell: () => (\r\n      <div className=\"flex gap-2\">\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button size=\"icon\" variant=\"outline\">\r\n                <Eye className=\"w-4 h-4\" />\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>Visualizar</TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button size=\"icon\" variant=\"outline\">\r\n                <SquarePen className=\"w-4 h-4\" />\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>Editar</TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button size=\"icon\" variant=\"outline\">\r\n                <Trash2 className=\"w-4 h-4\" />\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>Excluir</TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n      </div>\r\n    ),\r\n  },\r\n];\r\n"
        }
    ]
}