{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/lista/columns.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1744940482302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744940596791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+'use client';\r\n+\r\n+import { ColumnDef } from '@tanstack/react-table';\r\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Checkbox } from '@/components/ui/checkbox';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { cn } from '@/lib/utils';\r\n+\r\n+export type InfluenciadorLista = {\r\n+  id: string;\r\n+  nome: string;\r\n+  imagem?: string;\r\n+  instagram: string;\r\n+  cpf: string;\r\n+  meta: number;\r\n+  atingido: number;\r\n+  statusMeta: 'completo' | 'incompleto';\r\n+};\r\n+\r\n+export const columns: ColumnDef<InfluenciadorLista>[] = [\r\n+  {\r\n+    id: 'select',\r\n+    header: ({ table }) => (\r\n+      <Checkbox\r\n+        checked={\r\n+          table.getIsAllPageRowsSelected() ||\r\n+          (table.getIsSomePageRowsSelected() && 'indeterminate')\r\n+        }\r\n+        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n+        aria-label=\"Selecionar tudo\"\r\n+      />\r\n+    ),\r\n+    cell: ({ row }) => (\r\n+      <Checkbox\r\n+        checked={row.getIsSelected()}\r\n+        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n+        aria-label=\"Selecionar linha\"\r\n+      />\r\n+    ),\r\n+    enableSorting: false,\r\n+    enableHiding: false,\r\n+  },\r\n+  {\r\n+    accessorKey: 'nome',\r\n+    header: 'Nome',\r\n+    cell: ({ row }) => {\r\n+      const { nome, imagem } = row.original;\r\n+      return (\r\n+        <div className=\"flex items-center gap-3\">\r\n+          <Avatar className=\"w-8 h-8\">\r\n+            {imagem ? <AvatarImage src={imagem} /> : <AvatarFallback>INF</AvatarFallback>}\r\n+          </Avatar>\r\n+          <span>{nome}</span>\r\n+        </div>\r\n+      );\r\n+    },\r\n+  },\r\n+  {\r\n+    accessorKey: 'instagram',\r\n+    header: 'Instagram',\r\n+    cell: ({ row }) => (\r\n+      <a\r\n+        href={row.original.instagram}\r\n+        target=\"_blank\"\r\n+        rel=\"noopener noreferrer\"\r\n+        className=\"text-blue-600 underline text-sm\"\r\n+      >\r\n+        @{row.original.instagram.replace('https://instagram.com/', '')}\r\n+      </a>\r\n+    ),\r\n+  },\r\n+  {\r\n+    accessorKey: 'cpf',\r\n+    header: 'CPF',\r\n+    cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n+  },\r\n+  {\r\n+    accessorKey: 'meta',\r\n+    header: 'Meta',\r\n+    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n+  },\r\n+  {\r\n+    accessorKey: 'atingido',\r\n+    header: 'Atingido',\r\n+    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n+  },\r\n+  {\r\n+    accessorKey: 'statusMeta',\r\n+    header: 'Status',\r\n+    cell: ({ row }) => {\r\n+      const status = row.original.statusMeta;\r\n+      const color = status === 'completo' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';\r\n+      return <Badge className={cn('rounded-full px-3 py-1 text-xs', color)}>{status}</Badge>;\r\n+    },\r\n+  },\r\n+  {\r\n+    id: 'actions',\r\n+    header: 'Ações',\r\n+    cell: () => (\r\n+      <div className=\"flex gap-2\">\r\n+        <TooltipProvider>\r\n+          <Tooltip>\r\n+            <TooltipTrigger asChild>\r\n+              <Button size=\"icon\" variant=\"outline\">\r\n+                <Eye className=\"w-4 h-4\" />\r\n+              </Button>\r\n+            </TooltipTrigger>\r\n+            <TooltipContent>Visualizar</TooltipContent>\r\n+          </Tooltip>\r\n+        </TooltipProvider>\r\n+  \r\n+        <TooltipProvider>\r\n+          <Tooltip>\r\n+            <TooltipTrigger asChild>\r\n+              <Button size=\"icon\" variant=\"outline\">\r\n+                <SquarePen className=\"w-4 h-4\" />\r\n+              </Button>\r\n+            </TooltipTrigger>\r\n+            <TooltipContent>Editar</TooltipContent>\r\n+          </Tooltip>\r\n+        </TooltipProvider>\r\n+  \r\n+        <TooltipProvider>\r\n+          <Tooltip>\r\n+            <TooltipTrigger asChild>\r\n+              <Button size=\"icon\" variant=\"outline\">\r\n+                <Trash2 className=\"w-4 h-4\" />\r\n+              </Button>\r\n+            </TooltipTrigger>\r\n+            <TooltipContent>Excluir</TooltipContent>\r\n+          </Tooltip>\r\n+        </TooltipProvider>\r\n+      </div>\r\n+    ),\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744940649525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,8 @@\n             </TooltipTrigger>\r\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n-  \r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n@@ -121,9 +120,8 @@\n             </TooltipTrigger>\r\n             <TooltipContent>Editar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n-  \r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n@@ -134,139 +132,6 @@\n           </Tooltip>\r\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n-  }\n-'use client';\r\n-\r\n-import { ColumnDef } from '@tanstack/react-table';\r\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Checkbox } from '@/components/ui/checkbox';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-\r\n-export type InfluenciadorLista = {\r\n-  id: string;\r\n-  nome: string;\r\n-  imagem?: string;\r\n-  instagram: string;\r\n-  cpf: string;\r\n-  meta: number;\r\n-  atingido: number;\r\n-  statusMeta: 'completo' | 'incompleto';\r\n-};\r\n-\r\n-export const columns: ColumnDef<InfluenciadorLista>[] = [\r\n-  {\r\n-    id: 'select',\r\n-    header: ({ table }) => (\r\n-      <Checkbox\r\n-        checked={\r\n-          table.getIsAllPageRowsSelected() ||\r\n-          (table.getIsSomePageRowsSelected() && 'indeterminate')\r\n-        }\r\n-        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n-        aria-label=\"Selecionar tudo\"\r\n-      />\r\n-    ),\r\n-    cell: ({ row }) => (\r\n-      <Checkbox\r\n-        checked={row.getIsSelected()}\r\n-        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n-        aria-label=\"Selecionar linha\"\r\n-      />\r\n-    ),\r\n-    enableSorting: false,\r\n-    enableHiding: false,\r\n   },\r\n-  {\r\n-    accessorKey: 'nome',\r\n-    header: 'Nome',\r\n-    cell: ({ row }) => {\r\n-      const { nome, imagem } = row.original;\r\n-      return (\r\n-        <div className=\"flex items-center gap-3\">\r\n-          <Avatar className=\"w-8 h-8\">\r\n-            {imagem ? <AvatarImage src={imagem} /> : <AvatarFallback>INF</AvatarFallback>}\r\n-          </Avatar>\r\n-          <span>{nome}</span>\r\n-        </div>\r\n-      );\r\n-    },\r\n-  },\r\n-  {\r\n-    accessorKey: 'instagram',\r\n-    header: 'Instagram',\r\n-    cell: ({ row }) => (\r\n-      <a\r\n-        href={row.original.instagram}\r\n-        target=\"_blank\"\r\n-        rel=\"noopener noreferrer\"\r\n-        className=\"text-blue-600 underline text-sm\"\r\n-      >\r\n-        @{row.original.instagram.replace('https://instagram.com/', '')}\r\n-      </a>\r\n-    ),\r\n-  },\r\n-  {\r\n-    accessorKey: 'cpf',\r\n-    header: 'CPF',\r\n-    cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n-  },\r\n-  {\r\n-    accessorKey: 'meta',\r\n-    header: 'Meta',\r\n-    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n-  },\r\n-  {\r\n-    accessorKey: 'atingido',\r\n-    header: 'Atingido',\r\n-    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n-  },\r\n-  {\r\n-    accessorKey: 'statusMeta',\r\n-    header: 'Status',\r\n-    cell: ({ row }) => {\r\n-      const status = row.original.statusMeta;\r\n-      const color = status === 'completo' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';\r\n-      return <Badge className={cn('rounded-full px-3 py-1 text-xs', color)}>{status}</Badge>;\r\n-    },\r\n-  },\r\n-  {\r\n-    id: 'actions',\r\n-    header: 'Ações',\r\n-    cell: () => (\r\n-      <div className=\"flex gap-2\">\r\n-        <TooltipProvider>\r\n-          <Tooltip>\r\n-            <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <Eye className=\"w-4 h-4\" />\r\n-              </Button>\r\n-            </TooltipTrigger>\r\n-            <TooltipContent>Visualizar</TooltipContent>\r\n-          </Tooltip>\r\n-        </TooltipProvider>\r\n-        <TooltipProvider>\r\n-          <Tooltip>\r\n-            <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <SquarePen className=\"w-4 h-4\" />\r\n-              </Button>\r\n-            </TooltipTrigger>\r\n-            <TooltipContent>Editar</TooltipContent>\r\n-          </Tooltip>\r\n-        </TooltipProvider>\r\n-        <TooltipProvider>\r\n-          <Tooltip>\r\n-            <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <Trash2 className=\"w-4 h-4\" />\r\n-              </Button>\r\n-            </TooltipTrigger>\r\n-            <TooltipContent>Excluir</TooltipContent>\r\n-          </Tooltip>\r\n-        </TooltipProvider>\r\n-      </div>\n\\ No newline at end of file\n+];\r\n"
                },
                {
                    "date": 1745007050657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,14 +88,34 @@\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n     accessorKey: 'statusMeta',\r\n-    header: 'Status',\r\n+    header: 'Status da Meta',\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n-      const color = status === 'completo' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';\r\n-      return <Badge className={cn('rounded-full px-3 py-1 text-xs', color)}>{status}</Badge>;\r\n-    },\r\n+  \r\n+      const isCompleto = status === \"completo\";\r\n+  \r\n+      return (\r\n+        <div className=\"inline-flex items-center gap-2 px-2 py-1 rounded-full text-sm font-medium \r\n+          border \r\n+          whitespace-nowrap\r\n+          capitalize\r\n+          transition\r\n+          text-white\r\n+          bg-success/80\r\n+          dark:bg-success/70\r\n+          \" \r\n+          style={{\r\n+            backgroundColor: isCompleto ? '#22c55e' : '#facc15',\r\n+            color: isCompleto ? 'white' : '#92400e'\r\n+          }}\r\n+        >\r\n+          <span className=\"h-2 w-2 rounded-full bg-white\" />\r\n+          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n+        </div>\r\n+      );\r\n+    }\r\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n"
                },
                {
                    "date": 1745007195312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   instagram: string;\r\n   cpf: string;\r\n   meta: number;\r\n   atingido: number;\r\n-  statusMeta: 'completo' | 'incompleto';\r\n+  statusMeta: relacao && relacao.atingido >= relacao.meta ? 'completo' : 'incompleto',\r\n };\r\n \r\n export const columns: ColumnDef<InfluenciadorLista>[] = [\r\n   {\r\n"
                },
                {
                    "date": 1745007793559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,18 +8,10 @@\n import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n \r\n-export type InfluenciadorLista = {\r\n-  id: string;\r\n-  nome: string;\r\n-  imagem?: string;\r\n-  instagram: string;\r\n-  cpf: string;\r\n-  meta: number;\r\n-  atingido: number;\r\n-  statusMeta: relacao && relacao.atingido >= relacao.meta ? 'completo' : 'incompleto',\r\n-};\r\n+// ✅ Aqui está certo, o tipo já vem de outro lugar\r\n+import { InfluenciadorLista } from '../../../types';\r\n \r\n export const columns: ColumnDef<InfluenciadorLista>[] = [\r\n   {\r\n     id: 'select',\r\n"
                },
                {
                    "date": 1745008167363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n             backgroundColor: isCompleto ? '#22c55e' : '#facc15',\r\n             color: isCompleto ? 'white' : '#92400e'\r\n           }}\r\n         >\r\n-          <span className=\"h-2 w-2 rounded-full bg-white\" />\r\n           {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n         </div>\r\n       );\r\n     }\r\n"
                },
                {
                    "date": 1745008400318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,25 +83,16 @@\n     accessorKey: 'statusMeta',\r\n     header: 'Status da Meta',\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n+      const isCompleto = status === 'completo';\r\n   \r\n-      const isCompleto = status === \"completo\";\r\n-  \r\n       return (\r\n-        <div className=\"inline-flex items-center gap-2 px-2 py-1 rounded-full text-sm font-medium \r\n-          border \r\n-          whitespace-nowrap\r\n-          capitalize\r\n-          transition\r\n-          text-white\r\n-          bg-success/80\r\n-          dark:bg-success/70\r\n-          \" \r\n-          style={{\r\n-            backgroundColor: isCompleto ? '#22c55e' : '#facc15',\r\n-            color: isCompleto ? 'white' : '#92400e'\r\n-          }}\r\n+        <div\r\n+          className={cn(\r\n+            \"w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition\",\r\n+            isCompleto ? \"bg-green-500 text-white\" : \"bg-yellow-400 text-yellow-900\"\r\n+          )}\r\n         >\r\n           {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n         </div>\r\n       );\r\n"
                },
                {
                    "date": 1745008463989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,25 +80,28 @@\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n     accessorKey: 'statusMeta',\r\n-    header: 'Status da Meta',\r\n+    header: () => <div className=\"text-center w-full\">Status da Meta</div>,\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n       const isCompleto = status === 'completo';\r\n   \r\n       return (\r\n-        <div\r\n-          className={cn(\r\n-            \"w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition\",\r\n-            isCompleto ? \"bg-green-500 text-white\" : \"bg-yellow-400 text-yellow-900\"\r\n-          )}\r\n-        >\r\n-          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n+        <div className=\"flex justify-center\">\r\n+          <div\r\n+            className={cn(\r\n+              \"w-[140px] text-center px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap transition\",\r\n+              isCompleto ? \"bg-green-500 text-white\" : \"bg-yellow-400 text-yellow-900\"\r\n+            )}\r\n+          >\r\n+            {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n+          </div>\r\n         </div>\r\n       );\r\n     }\r\n-  },\r\n+  }\r\n+  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: () => (\r\n"
                },
                {
                    "date": 1745008477938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,28 +80,25 @@\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n     accessorKey: 'statusMeta',\r\n-    header: () => <div className=\"text-center w-full\">Status da Meta</div>,\r\n+    header: 'Status da Meta',\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n       const isCompleto = status === 'completo';\r\n   \r\n       return (\r\n-        <div className=\"flex justify-center\">\r\n-          <div\r\n-            className={cn(\r\n-              \"w-[140px] text-center px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap transition\",\r\n-              isCompleto ? \"bg-green-500 text-white\" : \"bg-yellow-400 text-yellow-900\"\r\n-            )}\r\n-          >\r\n-            {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n-          </div>\r\n+        <div\r\n+          className={cn(\r\n+            \"w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition\",\r\n+            isCompleto ? \"bg-green-500 text-white\" : \"bg-yellow-400 text-yellow-900\"\r\n+          )}\r\n+        >\r\n+          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n         </div>\r\n       );\r\n     }\r\n-  }\r\n-  \r\n+  },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: () => (\r\n"
                },
                {
                    "date": 1745008502283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n     accessorKey: 'statusMeta',\r\n-    header: 'Status da Meta',\r\n+    header: () => <div className=\"text-center\">Status da Meta</div>,\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n       const isCompleto = status === 'completo';\r\n   \r\n"
                },
                {
                    "date": 1745101943991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,14 @@\n import { Button } from '@/components/ui/button';\r\n import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n-\r\n-// ✅ Aqui está certo, o tipo já vem de outro lugar\r\n import { InfluenciadorLista } from '../../../types';\r\n \r\n-export const columns: ColumnDef<InfluenciadorLista>[] = [\r\n+export const getColumns = (\r\n+  handleSort: (key: string) => void,\r\n+  sortConfig: { key: string; direction: 'asc' | 'desc' }\r\n+): ColumnDef<InfluenciadorLista>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -36,9 +37,13 @@\n     enableHiding: false,\r\n   },\r\n   {\r\n     accessorKey: 'nome',\r\n-    header: 'Nome',\r\n+    header: () => (\r\n+      <button onClick={() => handleSort('nome')} className=\"flex items-center gap-1\">\r\n+        Nome {sortConfig.key === 'nome' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+      </button>\r\n+    ),\r\n     cell: ({ row }) => {\r\n       const { nome, imagem } = row.original;\r\n       return (\r\n         <div className=\"flex items-center gap-3\">\r\n@@ -69,24 +74,37 @@\n     header: 'CPF',\r\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n-    accessorKey: 'meta',\r\n-    header: 'Meta',\r\n+    header: () => (\r\n+      <button onClick={() => handleSort('meta')} className=\"flex items-center gap-1\">\r\n+        Meta {sortConfig.key === 'meta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+      </button>\r\n+    ),\r\n+    accessorFn: (row) => row.meta,\r\n     cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    accessorKey: 'atingido',\r\n-    header: 'Atingido',\r\n+    header: () => (\r\n+      <button onClick={() => handleSort('atingido')} className=\"flex items-center gap-1\">\r\n+        Atingido {sortConfig.key === 'atingido' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+      </button>\r\n+    ),\r\n+    accessorFn: (row) => row.atingido,\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    accessorKey: 'statusMeta',\r\n-    header: () => <div className=\"text-center\">Status da Meta</div>,\r\n+    header: () => (\r\n+      <button onClick={() => handleSort('statusMeta')} className=\"flex items-center gap-1 justify-center w-full\">\r\n+        Status da Meta{' '}\r\n+        {sortConfig.key === 'statusMeta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+      </button>\r\n+    ),\r\n+    accessorFn: (row) => row.statusMeta,\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n       const isCompleto = status === 'completo';\r\n-  \r\n+\r\n       return (\r\n         <div\r\n           className={cn(\r\n             \"w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition\",\r\n"
                },
                {
                    "date": 1745102041932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n     header: 'CPF',\r\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n+    id: 'meta',\r\n     header: () => (\r\n       <button onClick={() => handleSort('meta')} className=\"flex items-center gap-1\">\r\n         Meta {sortConfig.key === 'meta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n@@ -83,8 +84,9 @@\n     accessorFn: (row) => row.meta,\r\n     cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n+    id: 'atingido',\r\n     header: () => (\r\n       <button onClick={() => handleSort('atingido')} className=\"flex items-center gap-1\">\r\n         Atingido {sortConfig.key === 'atingido' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n@@ -92,8 +94,9 @@\n     accessorFn: (row) => row.atingido,\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n+    id: 'statusMeta',\r\n     header: () => (\r\n       <button onClick={() => handleSort('statusMeta')} className=\"flex items-center gap-1 justify-center w-full\">\r\n         Status da Meta{' '}\r\n         {sortConfig.key === 'statusMeta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n@@ -153,5 +156,5 @@\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n-];\r\n+];\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745102066222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n 'use client';\r\n \r\n import { ColumnDef } from '@tanstack/react-table';\r\n import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n-import { Badge } from '@/components/ui/badge';\r\n import { Checkbox } from '@/components/ui/checkbox';\r\n import { Button } from '@/components/ui/button';\r\n import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n@@ -74,9 +73,9 @@\n     header: 'CPF',\r\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n-    id: 'meta',\r\n+    id: 'meta', // 👈 adicionado\r\n     header: () => (\r\n       <button onClick={() => handleSort('meta')} className=\"flex items-center gap-1\">\r\n         Meta {sortConfig.key === 'meta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n@@ -84,9 +83,9 @@\n     accessorFn: (row) => row.meta,\r\n     cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'atingido',\r\n+    id: 'atingido', // 👈 adicionado\r\n     header: () => (\r\n       <button onClick={() => handleSort('atingido')} className=\"flex items-center gap-1\">\r\n         Atingido {sortConfig.key === 'atingido' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n@@ -94,11 +93,14 @@\n     accessorFn: (row) => row.atingido,\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'statusMeta',\r\n+    id: 'statusMeta', // 👈 adicionado\r\n     header: () => (\r\n-      <button onClick={() => handleSort('statusMeta')} className=\"flex items-center gap-1 justify-center w-full\">\r\n+      <button\r\n+        onClick={() => handleSort('statusMeta')}\r\n+        className=\"flex items-center gap-1 justify-center w-full\"\r\n+      >\r\n         Status da Meta{' '}\r\n         {sortConfig.key === 'statusMeta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n     ),\r\n@@ -116,9 +118,9 @@\n         >\r\n           {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n         </div>\r\n       );\r\n-    }\r\n+    },\r\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n@@ -156,5 +158,5 @@\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n-];\n\\ No newline at end of file\n+];\r\n"
                },
                {
                    "date": 1745102148112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,4 +159,5 @@\n       </div>\r\n     ),\r\n   },\r\n ];\r\n+export default columns;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745102363018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,30 +41,26 @@\n       <button onClick={() => handleSort('nome')} className=\"flex items-center gap-1\">\r\n         Nome {sortConfig.key === 'nome' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n     ),\r\n-    cell: ({ row }) => {\r\n-      const { nome, imagem } = row.original;\r\n-      return (\r\n-        <div className=\"flex items-center gap-3\">\r\n-          <Avatar className=\"w-8 h-8\">\r\n-            {imagem ? <AvatarImage src={imagem} /> : <AvatarFallback>INF</AvatarFallback>}\r\n-          </Avatar>\r\n-          <span>{nome}</span>\r\n-        </div>\r\n-      );\r\n-    },\r\n+    cell: ({ row }) => (\r\n+      <div className=\"flex items-center gap-3\">\r\n+        <Avatar className=\"w-8 h-8\">\r\n+          {row.original.imagem ? (\r\n+            <AvatarImage src={row.original.imagem} />\r\n+          ) : (\r\n+            <AvatarFallback>INF</AvatarFallback>\r\n+          )}\r\n+        </Avatar>\r\n+        <span>{row.original.nome}</span>\r\n+      </div>\r\n+    ),\r\n   },\r\n   {\r\n     accessorKey: 'instagram',\r\n     header: 'Instagram',\r\n     cell: ({ row }) => (\r\n-      <a\r\n-        href={row.original.instagram}\r\n-        target=\"_blank\"\r\n-        rel=\"noopener noreferrer\"\r\n-        className=\"text-blue-600 underline text-sm\"\r\n-      >\r\n+      <a href={row.original.instagram} className=\"text-blue-600 underline\" target=\"_blank\">\r\n         @{row.original.instagram.replace('https://instagram.com/', '')}\r\n       </a>\r\n     ),\r\n   },\r\n@@ -73,54 +69,47 @@\n     header: 'CPF',\r\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n-    id: 'meta', // 👈 adicionado\r\n+    id: 'meta', // ✅ Obrigatório por usar accessorFn\r\n+    accessorFn: (row) => row.meta,\r\n     header: () => (\r\n       <button onClick={() => handleSort('meta')} className=\"flex items-center gap-1\">\r\n         Meta {sortConfig.key === 'meta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n     ),\r\n-    accessorFn: (row) => row.meta,\r\n     cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'atingido', // 👈 adicionado\r\n+    id: 'atingido', // ✅ Obrigatório por usar accessorFn\r\n+    accessorFn: (row) => row.atingido,\r\n     header: () => (\r\n       <button onClick={() => handleSort('atingido')} className=\"flex items-center gap-1\">\r\n         Atingido {sortConfig.key === 'atingido' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n     ),\r\n-    accessorFn: (row) => row.atingido,\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'statusMeta', // 👈 adicionado\r\n+    id: 'statusMeta', // ✅ Obrigatório por usar accessorFn\r\n+    accessorFn: (row) => row.statusMeta,\r\n     header: () => (\r\n-      <button\r\n-        onClick={() => handleSort('statusMeta')}\r\n-        className=\"flex items-center gap-1 justify-center w-full\"\r\n-      >\r\n-        Status da Meta{' '}\r\n-        {sortConfig.key === 'statusMeta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+      <button onClick={() => handleSort('statusMeta')} className=\"flex items-center gap-1\">\r\n+        Status da Meta {sortConfig.key === 'statusMeta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n       </button>\r\n     ),\r\n-    accessorFn: (row) => row.statusMeta,\r\n-    cell: ({ row }) => {\r\n-      const status = row.original.statusMeta;\r\n-      const isCompleto = status === 'completo';\r\n-\r\n-      return (\r\n-        <div\r\n-          className={cn(\r\n-            \"w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition\",\r\n-            isCompleto ? \"bg-green-500 text-white\" : \"bg-yellow-400 text-yellow-900\"\r\n-          )}\r\n-        >\r\n-          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n-        </div>\r\n-      );\r\n-    },\r\n+    cell: ({ row }) => (\r\n+      <div\r\n+        className={cn(\r\n+          \"w-[140px] flex justify-center rounded-full px-2 py-1 text-xs font-medium\",\r\n+          row.original.statusMeta === 'completo'\r\n+            ? 'bg-green-500 text-white'\r\n+            : 'bg-yellow-400 text-yellow-900'\r\n+        )}\r\n+      >\r\n+        {row.original.statusMeta === 'completo' ? 'Meta Batida' : 'Meta Pendente'}\r\n+      </div>\r\n+    ),\r\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n@@ -128,36 +117,29 @@\n       <div className=\"flex gap-2\">\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <Eye className=\"w-4 h-4\" />\r\n-              </Button>\r\n+              <Button size=\"icon\" variant=\"outline\"><Eye className=\"w-4 h-4\"/></Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <SquarePen className=\"w-4 h-4\" />\r\n-              </Button>\r\n+              <Button size=\"icon\" variant=\"outline\"><SquarePen className=\"w-4 h-4\"/></Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Editar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <Trash2 className=\"w-4 h-4\" />\r\n-              </Button>\r\n+              <Button size=\"icon\" variant=\"outline\"><Trash2 className=\"w-4 h-4\"/></Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Excluir</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n\\ No newline at end of file\n   },\r\n ];\r\n-export default columns;\n"
                },
                {
                    "date": 1745103064732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,9 @@\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { InfluenciadorLista } from '../../../types';\r\n \r\n-export const getColumns = (\r\n-  handleSort: (key: string) => void,\r\n-  sortConfig: { key: string; direction: 'asc' | 'desc' }\r\n-): ColumnDef<InfluenciadorLista>[] => [\r\n+export const getColumns = (): ColumnDef<InfluenciadorLista>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -36,31 +33,38 @@\n     enableHiding: false,\r\n   },\r\n   {\r\n     accessorKey: 'nome',\r\n-    header: () => (\r\n-      <button onClick={() => handleSort('nome')} className=\"flex items-center gap-1\">\r\n-        Nome {sortConfig.key === 'nome' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Nome {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n       </button>\r\n     ),\r\n-    cell: ({ row }) => (\r\n-      <div className=\"flex items-center gap-3\">\r\n-        <Avatar className=\"w-8 h-8\">\r\n-          {row.original.imagem ? (\r\n-            <AvatarImage src={row.original.imagem} />\r\n-          ) : (\r\n-            <AvatarFallback>INF</AvatarFallback>\r\n-          )}\r\n-        </Avatar>\r\n-        <span>{row.original.nome}</span>\r\n-      </div>\r\n-    ),\r\n+    cell: ({ row }) => {\r\n+      const { nome, imagem } = row.original;\r\n+      return (\r\n+        <div className=\"flex items-center gap-3\">\r\n+          <Avatar className=\"w-8 h-8\">\r\n+            {imagem ? <AvatarImage src={imagem} /> : <AvatarFallback>INF</AvatarFallback>}\r\n+          </Avatar>\r\n+          <span>{nome}</span>\r\n+        </div>\r\n+      );\r\n+    },\r\n   },\r\n   {\r\n     accessorKey: 'instagram',\r\n     header: 'Instagram',\r\n     cell: ({ row }) => (\r\n-      <a href={row.original.instagram} className=\"text-blue-600 underline\" target=\"_blank\">\r\n+      <a\r\n+        href={row.original.instagram}\r\n+        target=\"_blank\"\r\n+        rel=\"noopener noreferrer\"\r\n+        className=\"text-blue-600 underline text-sm\"\r\n+      >\r\n         @{row.original.instagram.replace('https://instagram.com/', '')}\r\n       </a>\r\n     ),\r\n   },\r\n@@ -69,47 +73,60 @@\n     header: 'CPF',\r\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n-    id: 'meta', // ✅ Obrigatório por usar accessorFn\r\n-    accessorFn: (row) => row.meta,\r\n-    header: () => (\r\n-      <button onClick={() => handleSort('meta')} className=\"flex items-center gap-1\">\r\n-        Meta {sortConfig.key === 'meta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+    id: 'meta',\r\n+    accessorKey: 'meta',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Meta {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n       </button>\r\n     ),\r\n     cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'atingido', // ✅ Obrigatório por usar accessorFn\r\n-    accessorFn: (row) => row.atingido,\r\n-    header: () => (\r\n-      <button onClick={() => handleSort('atingido')} className=\"flex items-center gap-1\">\r\n-        Atingido {sortConfig.key === 'atingido' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+    id: 'atingido',\r\n+    accessorKey: 'atingido',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Atingido {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n       </button>\r\n     ),\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'statusMeta', // ✅ Obrigatório por usar accessorFn\r\n-    accessorFn: (row) => row.statusMeta,\r\n-    header: () => (\r\n-      <button onClick={() => handleSort('statusMeta')} className=\"flex items-center gap-1\">\r\n-        Status da Meta {sortConfig.key === 'statusMeta' && (sortConfig.direction === 'asc' ? '⬆️' : '⬇️')}\r\n+    id: 'statusMeta',\r\n+    accessorKey: 'statusMeta',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1 justify-center w-full\"\r\n+      >\r\n+        Status da Meta{' '}\r\n+        {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n       </button>\r\n     ),\r\n-    cell: ({ row }) => (\r\n-      <div\r\n-        className={cn(\r\n-          \"w-[140px] flex justify-center rounded-full px-2 py-1 text-xs font-medium\",\r\n-          row.original.statusMeta === 'completo'\r\n-            ? 'bg-green-500 text-white'\r\n-            : 'bg-yellow-400 text-yellow-900'\r\n-        )}\r\n-      >\r\n-        {row.original.statusMeta === 'completo' ? 'Meta Batida' : 'Meta Pendente'}\r\n-      </div>\r\n-    ),\r\n+    cell: ({ row }) => {\r\n+      const status = row.original.statusMeta;\r\n+      const isCompleto = status === 'completo';\r\n+\r\n+      return (\r\n+        <div\r\n+          className={cn(\r\n+            'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n+            isCompleto ? 'bg-green-500 text-white' : 'bg-yellow-400 text-yellow-900'\r\n+          )}\r\n+        >\r\n+          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n+        </div>\r\n+      );\r\n+    },\r\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n@@ -117,29 +134,35 @@\n       <div className=\"flex gap-2\">\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\"><Eye className=\"w-4 h-4\"/></Button>\r\n+              <Button size=\"icon\" variant=\"outline\">\r\n+                <Eye className=\"w-4 h-4\" />\r\n+              </Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\"><SquarePen className=\"w-4 h-4\"/></Button>\r\n+              <Button size=\"icon\" variant=\"outline\">\r\n+                <SquarePen className=\"w-4 h-4\" />\r\n+              </Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Editar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\"><Trash2 className=\"w-4 h-4\"/></Button>\r\n+              <Button size=\"icon\" variant=\"outline\">\r\n+                <Trash2 className=\"w-4 h-4\" />\r\n\\ No newline at end of file\n+              </Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Excluir</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n-];\n+];\r\n"
                },
                {
                    "date": 1745104961151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,25 @@\n     ),\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n+    accessorKey: 'dataCadastro',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Data de Cadastro{' '}\r\n+        {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n+      </button>\r\n+    ),\r\n+    cell: ({ row }) => {\r\n+      const data = row.original.dataCadastro;\r\n+      const [ano, mes, dia] = data.split('-');\r\n+      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n+    },\r\n+  },\r\n+  {\r\n     id: 'statusMeta',\r\n     accessorKey: 'statusMeta',\r\n     header: ({ column }) => (\r\n       <button\r\n@@ -164,5 +181,5 @@\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n-];\n\\ No newline at end of file\n+];\r\n"
                },
                {
                    "date": 1745105014242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,11 @@\n       </button>\r\n     ),\r\n     cell: ({ row }) => {\r\n       const data = row.original.dataCadastro;\r\n+      \r\n+      if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n+    \r\n       const [ano, mes, dia] = data.split('-');\r\n       return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n     },\r\n   },\r\n"
                },
                {
                    "date": 1745118552483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,28 @@\n     enableSorting: false,\r\n     enableHiding: false,\r\n   },\r\n   {\r\n+    accessorKey: 'dataCadastro',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Data de Cadastro{' '}\r\n+        {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n+      </button>\r\n+    ),\r\n+    cell: ({ row }) => {\r\n+      const data = row.original.dataCadastro;\r\n+      \r\n+      if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n+    \r\n+      const [ano, mes, dia] = data.split('-');\r\n+      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n+    },\r\n+  },\r\n+  {\r\n     accessorKey: 'nome',\r\n     header: ({ column }) => (\r\n       <button\r\n         onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n@@ -99,27 +119,20 @@\n     ),\r\n     cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    accessorKey: 'dataCadastro',\r\n-    header: ({ column }) => (\r\n-      <button\r\n-        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n-        className=\"flex items-center gap-1\"\r\n-      >\r\n-        Data de Cadastro{' '}\r\n-        {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n-      </button>\r\n-    ),\r\n+    accessorKey: 'reembolso',\r\n+    header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const data = row.original.dataCadastro;\r\n-      \r\n-      if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n-    \r\n-      const [ano, mes, dia] = data.split('-');\r\n-      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n+      const valor = row.original.reembolso;\r\n+      return (\r\n+        <span className={valor > 0 ? 'text-red-600 font-medium' : 'text-green-600'}>\r\n+          {valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+        </span>\r\n+      );\r\n     },\r\n   },\r\n+  \r\n   {\r\n     id: 'statusMeta',\r\n     accessorKey: 'statusMeta',\r\n     header: ({ column }) => (\r\n"
                },
                {
                    "date": 1745119836725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,44 +122,37 @@\n   {\r\n     accessorKey: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const valor = row.original.reembolso;\r\n+      const meta = row.original.meta;\r\n+      const atingido = row.original.atingido;\r\n+    \r\n+      const statusLabel =\r\n+        meta === 0 && atingido === 0\r\n+          ? 'Meta indefinida'\r\n+          : atingido >= meta\r\n+          ? 'Meta Batida'\r\n+          : 'Meta Pendente';\r\n+    \r\n+      const statusClass = \r\n+        meta === 0 && atingido === 0\r\n+          ? 'bg-muted text-muted-foreground'\r\n+          : atingido >= meta\r\n+          ? 'bg-green-500 text-white'\r\n+          : 'bg-yellow-400 text-yellow-900';\r\n+    \r\n       return (\r\n-        <span className={valor > 0 ? 'text-red-600 font-medium' : 'text-green-600'}>\r\n-          {valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n-        </span>\r\n-      );\r\n-    },\r\n-  },\r\n-  \r\n-  {\r\n-    id: 'statusMeta',\r\n-    accessorKey: 'statusMeta',\r\n-    header: ({ column }) => (\r\n-      <button\r\n-        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n-        className=\"flex items-center gap-1 justify-center w-full\"\r\n-      >\r\n-        Status da Meta{' '}\r\n-        {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n-      </button>\r\n-    ),\r\n-    cell: ({ row }) => {\r\n-      const status = row.original.statusMeta;\r\n-      const isCompleto = status === 'completo';\r\n-\r\n-      return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n-            isCompleto ? 'bg-green-500 text-white' : 'bg-yellow-400 text-yellow-900'\r\n+            statusClass\r\n           )}\r\n         >\r\n-          {isCompleto ? 'Meta Batida' : 'Meta Pendente'}\r\n+          {statusLabel}\r\n         </div>\r\n       );\r\n-    },\r\n+    }\r\n+    ,\r\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n"
                },
                {
                    "date": 1745121325640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,16 @@\n import { Button } from '@/components/ui/button';\r\n import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n-import { InfluenciadorLista } from '../../../types';\r\n+import { Influenciador } from '@/lib/influenciadores';\r\n \r\n-export const getColumns = (): ColumnDef<InfluenciadorLista>[] => [\r\n+\r\n+type Props = {\r\n+  onView: (influenciador: Influenciador) => void;\r\n+};\r\n+\r\n+export const getColumns = ({ onView }: Props): ColumnDef<Influenciador>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -155,34 +160,31 @@\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n-    cell: () => (\r\n+    cell: ({ row }) => (\r\n       <div className=\"flex gap-2\">\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n+              <Button\r\n+                size=\"icon\"\r\n+                variant=\"outline\"\r\n+                onClick={() => onView(row.original)}\r\n+              >\r\n                 <Eye className=\"w-4 h-4\" />\r\n               </Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n+\r\n+        {/* Apagando o botão \"Editar\" */}\r\n+\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n-                <SquarePen className=\"w-4 h-4\" />\r\n-              </Button>\r\n-            </TooltipTrigger>\r\n-            <TooltipContent>Editar</TooltipContent>\r\n-          </Tooltip>\r\n-        </TooltipProvider>\r\n-        <TooltipProvider>\r\n-          <Tooltip>\r\n-            <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n                 <Trash2 className=\"w-4 h-4\" />\r\n               </Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Excluir</TooltipContent>\r\n"
                },
                {
                    "date": 1745125519315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,53 +99,44 @@\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n     id: 'meta',\r\n-    accessorKey: 'meta',\r\n-    header: ({ column }) => (\r\n-      <button\r\n-        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n-        className=\"flex items-center gap-1\"\r\n-      >\r\n-        Meta {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n-      </button>\r\n-    ),\r\n-    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n+    header: 'Meta',\r\n+    cell: ({ row }) => {\r\n+      const rel = row.original.relacoes[0];\r\n+      return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n+    },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n-    accessorKey: 'atingido',\r\n-    header: ({ column }) => (\r\n-      <button\r\n-        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n-        className=\"flex items-center gap-1\"\r\n-      >\r\n-        Atingido {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n-      </button>\r\n-    ),\r\n-    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n+    header: 'Atingido',\r\n+    cell: ({ row }) => {\r\n+      const rel = row.original.relacoes[0];\r\n+      return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n+    },\r\n   },\r\n   {\r\n-    accessorKey: 'reembolso',\r\n+    id: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const meta = row.original.meta;\r\n-      const atingido = row.original.atingido;\r\n-    \r\n+      const rel = row.original.relacoes[0];\r\n+      const meta = rel?.meta || 0;\r\n+      const atingido = rel?.atingido || 0;\r\n+  \r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n           ? 'Meta Batida'\r\n           : 'Meta Pendente';\r\n-    \r\n-      const statusClass = \r\n+  \r\n+      const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-yellow-400 text-yellow-900';\r\n-    \r\n+  \r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n@@ -154,11 +145,11 @@\n         >\r\n           {statusLabel}\r\n         </div>\r\n       );\r\n-    }\r\n-    ,\r\n+    },\r\n   },\r\n+  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: ({ row }) => (\r\n"
                },
                {
                    "date": 1745125530747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,44 +99,53 @@\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n     id: 'meta',\r\n-    header: 'Meta',\r\n-    cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n-    },\r\n+    accessorKey: 'meta',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Meta {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n+      </button>\r\n+    ),\r\n+    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n     id: 'atingido',\r\n-    header: 'Atingido',\r\n-    cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n-    },\r\n+    accessorKey: 'atingido',\r\n+    header: ({ column }) => (\r\n+      <button\r\n+        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n+        className=\"flex items-center gap-1\"\r\n+      >\r\n+        Atingido {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n+      </button>\r\n+    ),\r\n+    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n   },\r\n   {\r\n-    id: 'reembolso',\r\n+    accessorKey: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      const meta = rel?.meta || 0;\r\n-      const atingido = rel?.atingido || 0;\r\n-  \r\n+      const meta = row.original.meta;\r\n+      const atingido = row.original.atingido;\r\n+    \r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n           ? 'Meta Batida'\r\n           : 'Meta Pendente';\r\n-  \r\n-      const statusClass =\r\n+    \r\n+      const statusClass = \r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-yellow-400 text-yellow-900';\r\n-  \r\n+    \r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n@@ -145,11 +154,11 @@\n         >\r\n           {statusLabel}\r\n         </div>\r\n       );\r\n-    },\r\n+    }\r\n+    ,\r\n   },\r\n-  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: ({ row }) => (\r\n"
                },
                {
                    "date": 1745125878893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,19 +3,19 @@\n import { ColumnDef } from '@tanstack/react-table';\r\n import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n import { Checkbox } from '@/components/ui/checkbox';\r\n import { Button } from '@/components/ui/button';\r\n-import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n+import { Eye, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Influenciador } from '@/lib/influenciadores';\r\n \r\n-\r\n type Props = {\r\n   onView: (influenciador: Influenciador) => void;\r\n+  plataformaId: string;\r\n };\r\n \r\n-export const getColumns = ({ onView }: Props): ColumnDef<Influenciador>[] => [\r\n+export const getColumns = ({ onView, plataformaId }: Props): ColumnDef<Influenciador>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -49,11 +49,9 @@\n       </button>\r\n     ),\r\n     cell: ({ row }) => {\r\n       const data = row.original.dataCadastro;\r\n-      \r\n       if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n-    \r\n       const [ano, mes, dia] = data.split('-');\r\n       return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n     },\r\n   },\r\n@@ -99,53 +97,42 @@\n     cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n   },\r\n   {\r\n     id: 'meta',\r\n-    accessorKey: 'meta',\r\n-    header: ({ column }) => (\r\n-      <button\r\n-        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n-        className=\"flex items-center gap-1\"\r\n-      >\r\n-        Meta {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n-      </button>\r\n-    ),\r\n-    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n+    header: 'Meta',\r\n+    cell: ({ row }) => {\r\n+      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n+    },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n-    accessorKey: 'atingido',\r\n-    header: ({ column }) => (\r\n-      <button\r\n-        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n-        className=\"flex items-center gap-1\"\r\n-      >\r\n-        Atingido {column.getIsSorted() === 'asc' ? '⬆️' : column.getIsSorted() === 'desc' ? '⬇️' : ''}\r\n-      </button>\r\n-    ),\r\n-    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n+    header: 'Atingido',\r\n+    cell: ({ row }) => {\r\n+      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n+    },\r\n   },\r\n   {\r\n-    accessorKey: 'reembolso',\r\n-    header: 'Reembolso',\r\n+    id: 'statusMeta',\r\n+    header: 'Status da Meta',\r\n     cell: ({ row }) => {\r\n-      const meta = row.original.meta;\r\n-      const atingido = row.original.atingido;\r\n-    \r\n+      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      if (!rel) return <span className=\"text-muted-foreground\">Sem dados</span>;\r\n       const statusLabel =\r\n-        meta === 0 && atingido === 0\r\n+        rel.meta === 0 && rel.atingido === 0\r\n           ? 'Meta indefinida'\r\n-          : atingido >= meta\r\n+          : rel.atingido >= rel.meta\r\n           ? 'Meta Batida'\r\n           : 'Meta Pendente';\r\n-    \r\n-      const statusClass = \r\n-        meta === 0 && atingido === 0\r\n+\r\n+      const statusClass =\r\n+        rel.meta === 0 && rel.atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n-          : atingido >= meta\r\n+          : rel.atingido >= rel.meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-yellow-400 text-yellow-900';\r\n-    \r\n+\r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n@@ -154,10 +141,9 @@\n         >\r\n           {statusLabel}\r\n         </div>\r\n       );\r\n-    }\r\n-    ,\r\n+    },\r\n   },\r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n@@ -177,10 +163,8 @@\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n \r\n-        {/* Apagando o botão \"Editar\" */}\r\n-\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n"
                },
                {
                    "date": 1745125894599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,19 +3,19 @@\n import { ColumnDef } from '@tanstack/react-table';\r\n import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n import { Checkbox } from '@/components/ui/checkbox';\r\n import { Button } from '@/components/ui/button';\r\n-import { Eye, Trash2 } from 'lucide-react';\r\n+import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Influenciador } from '@/lib/influenciadores';\r\n \r\n+\r\n type Props = {\r\n   onView: (influenciador: Influenciador) => void;\r\n-  plataformaId: string;\r\n };\r\n \r\n-export const getColumns = ({ onView, plataformaId }: Props): ColumnDef<Influenciador>[] => [\r\n+export const getColumns = ({ onView }: Props): ColumnDef<Influenciador>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -49,9 +49,11 @@\n       </button>\r\n     ),\r\n     cell: ({ row }) => {\r\n       const data = row.original.dataCadastro;\r\n+      \r\n       if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n+    \r\n       const [ano, mes, dia] = data.split('-');\r\n       return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n     },\r\n   },\r\n@@ -99,40 +101,42 @@\n   {\r\n     id: 'meta',\r\n     header: 'Meta',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      const rel = row.original.relacoes[0];\r\n       return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n     header: 'Atingido',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      const rel = row.original.relacoes[0];\r\n       return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n-    id: 'statusMeta',\r\n-    header: 'Status da Meta',\r\n+    id: 'reembolso',\r\n+    header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n-      if (!rel) return <span className=\"text-muted-foreground\">Sem dados</span>;\r\n+      const rel = row.original.relacoes[0];\r\n+      const meta = rel?.meta || 0;\r\n+      const atingido = rel?.atingido || 0;\r\n+  \r\n       const statusLabel =\r\n-        rel.meta === 0 && rel.atingido === 0\r\n+        meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n-          : rel.atingido >= rel.meta\r\n+          : atingido >= meta\r\n           ? 'Meta Batida'\r\n           : 'Meta Pendente';\r\n-\r\n+  \r\n       const statusClass =\r\n-        rel.meta === 0 && rel.atingido === 0\r\n+        meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n-          : rel.atingido >= rel.meta\r\n+          : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-yellow-400 text-yellow-900';\r\n-\r\n+  \r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n@@ -143,8 +147,9 @@\n         </div>\r\n       );\r\n     },\r\n   },\r\n+  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: ({ row }) => (\r\n@@ -163,8 +168,10 @@\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n \r\n+        {/* Apagando o botão \"Editar\" */}\r\n+\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n"
                },
                {
                    "date": 1745126047703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,30 +117,34 @@\n   {\r\n     id: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n+      const plataformaId = row.original.plataformaId; // precisa ser passado\r\n+      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+  \r\n       const meta = rel?.meta || 0;\r\n       const atingido = rel?.atingido || 0;\r\n+      const reembolso = Math.max(meta - atingido, 0);\r\n+      const superouMeta = atingido > meta ? atingido - meta : 0;\r\n   \r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n-          ? 'Meta Batida'\r\n-          : 'Meta Pendente';\r\n+          ? `Superou R$ ${superouMeta.toLocaleString('pt-BR')}`\r\n+          : `Reembolsar R$ ${reembolso.toLocaleString('pt-BR')}`;\r\n   \r\n       const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n-          : 'bg-yellow-400 text-yellow-900';\r\n+          : 'bg-red-500 text-white';\r\n   \r\n       return (\r\n         <div\r\n           className={cn(\r\n-            'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n+            'w-[160px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n             statusClass\r\n           )}\r\n         >\r\n           {statusLabel}\r\n"
                },
                {
                    "date": 1745126126346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,19 +3,20 @@\n import { ColumnDef } from '@tanstack/react-table';\r\n import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n import { Checkbox } from '@/components/ui/checkbox';\r\n import { Button } from '@/components/ui/button';\r\n-import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n+import { Eye, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Influenciador } from '@/lib/influenciadores';\r\n \r\n-\r\n+// Atualizado: agora recebe também o plataformaId\r\n type Props = {\r\n   onView: (influenciador: Influenciador) => void;\r\n+  plataformaId: string;\r\n };\r\n \r\n-export const getColumns = ({ onView }: Props): ColumnDef<Influenciador>[] => [\r\n+export const getColumns = ({ onView, plataformaId }: Props): ColumnDef<Influenciador>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -49,11 +50,9 @@\n       </button>\r\n     ),\r\n     cell: ({ row }) => {\r\n       const data = row.original.dataCadastro;\r\n-      \r\n       if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n-    \r\n       const [ano, mes, dia] = data.split('-');\r\n       return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n     },\r\n   },\r\n@@ -101,46 +100,44 @@\n   {\r\n     id: 'meta',\r\n     header: 'Meta',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n+      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n       return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n     header: 'Atingido',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n+      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n       return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const plataformaId = row.original.plataformaId; // precisa ser passado\r\n       const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n-  \r\n       const meta = rel?.meta || 0;\r\n       const atingido = rel?.atingido || 0;\r\n       const reembolso = Math.max(meta - atingido, 0);\r\n       const superouMeta = atingido > meta ? atingido - meta : 0;\r\n-  \r\n+\r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n           ? `Superou R$ ${superouMeta.toLocaleString('pt-BR')}`\r\n           : `Reembolsar R$ ${reembolso.toLocaleString('pt-BR')}`;\r\n-  \r\n+\r\n       const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-red-500 text-white';\r\n-  \r\n+\r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[160px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n@@ -151,9 +148,8 @@\n         </div>\r\n       );\r\n     },\r\n   },\r\n-  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: ({ row }) => (\r\n@@ -172,10 +168,8 @@\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n \r\n-        {/* Apagando o botão \"Editar\" */}\r\n-\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n@@ -187,5 +181,5 @@\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n-];\r\n+];\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745126136840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,20 +3,19 @@\n import { ColumnDef } from '@tanstack/react-table';\r\n import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n import { Checkbox } from '@/components/ui/checkbox';\r\n import { Button } from '@/components/ui/button';\r\n-import { Eye, Trash2 } from 'lucide-react';\r\n+import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Influenciador } from '@/lib/influenciadores';\r\n \r\n-// Atualizado: agora recebe também o plataformaId\r\n+\r\n type Props = {\r\n   onView: (influenciador: Influenciador) => void;\r\n-  plataformaId: string;\r\n };\r\n \r\n-export const getColumns = ({ onView, plataformaId }: Props): ColumnDef<Influenciador>[] => [\r\n+export const getColumns = ({ onView }: Props): ColumnDef<Influenciador>[] => [\r\n   {\r\n     id: 'select',\r\n     header: ({ table }) => (\r\n       <Checkbox\r\n@@ -50,9 +49,11 @@\n       </button>\r\n     ),\r\n     cell: ({ row }) => {\r\n       const data = row.original.dataCadastro;\r\n+      \r\n       if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n+    \r\n       const [ano, mes, dia] = data.split('-');\r\n       return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n     },\r\n   },\r\n@@ -100,56 +101,55 @@\n   {\r\n     id: 'meta',\r\n     header: 'Meta',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      const rel = row.original.relacoes[0];\r\n       return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n     header: 'Atingido',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      const rel = row.original.relacoes[0];\r\n       return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes.find(r => r.plataformaId === plataformaId);\r\n+      const rel = row.original.relacoes[0];\r\n       const meta = rel?.meta || 0;\r\n       const atingido = rel?.atingido || 0;\r\n-      const reembolso = Math.max(meta - atingido, 0);\r\n-      const superouMeta = atingido > meta ? atingido - meta : 0;\r\n-\r\n+  \r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n-          ? `Superou R$ ${superouMeta.toLocaleString('pt-BR')}`\r\n-          : `Reembolsar R$ ${reembolso.toLocaleString('pt-BR')}`;\r\n-\r\n+          ? 'Meta Batida'\r\n+          : 'Meta Pendente';\r\n+  \r\n       const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n-          : 'bg-red-500 text-white';\r\n-\r\n+          : 'bg-yellow-400 text-yellow-900';\r\n+  \r\n       return (\r\n         <div\r\n           className={cn(\r\n-            'w-[160px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n+            'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n             statusClass\r\n           )}\r\n         >\r\n           {statusLabel}\r\n         </div>\r\n       );\r\n     },\r\n   },\r\n+  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: ({ row }) => (\r\n@@ -168,8 +168,10 @@\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n \r\n+        {/* Apagando o botão \"Editar\" */}\r\n+\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n@@ -181,5 +183,5 @@\n         </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n-];\n\\ No newline at end of file\n+];\r\n"
                },
                {
                    "date": 1745126242847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,15 +120,27 @@\n     cell: ({ row }) => {\r\n       const rel = row.original.relacoes[0];\r\n       const meta = rel?.meta || 0;\r\n       const atingido = rel?.atingido || 0;\r\n+      const reembolso = meta > atingido ? meta - atingido : 0;\r\n   \r\n+      return <span>R$ {reembolso.toLocaleString('pt-BR')}</span>;\r\n+    },\r\n+  },\r\n+  {\r\n+    id: 'statusMeta',\r\n+    header: 'Status da Meta',\r\n+    cell: ({ row }) => {\r\n+      const rel = row.original.relacoes[0];\r\n+      const meta = rel?.meta || 0;\r\n+      const atingido = rel?.atingido || 0;\r\n+  \r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n-          ? 'Meta Batida'\r\n-          : 'Meta Pendente';\r\n+          ? 'Meta batida'\r\n+          : 'Meta pendente';\r\n   \r\n       const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n"
                },
                {
                    "date": 1745126322640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,11 +122,15 @@\n       const meta = rel?.meta || 0;\r\n       const atingido = rel?.atingido || 0;\r\n       const reembolso = meta > atingido ? meta - atingido : 0;\r\n   \r\n-      return <span>R$ {reembolso.toLocaleString('pt-BR')}</span>;\r\n+      const reembolsoClass =\r\n+        reembolso > 0 ? 'text-red-500 font-medium' : 'text-green-600 font-medium';\r\n+  \r\n+      return <span className={reembolsoClass}>R$ {reembolso.toLocaleString('pt-BR')}</span>;\r\n     },\r\n   },\r\n+  \r\n   {\r\n     id: 'statusMeta',\r\n     header: 'Status da Meta',\r\n     cell: ({ row }) => {\r\n"
                },
                {
                    "date": 1745126391067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,11 @@\n   },\r\n   \r\n   {\r\n     id: 'statusMeta',\r\n-    header: 'Status da Meta',\r\n+    header: () => (\r\n+      <div className=\"w-full text-center font-medium\">Status da Meta</div>\r\n+    ),\r\n     cell: ({ row }) => {\r\n       const rel = row.original.relacoes[0];\r\n       const meta = rel?.meta || 0;\r\n       const atingido = rel?.atingido || 0;\r\n"
                },
                {
                    "date": 1745347144350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,13 @@\n import { ColumnDef } from '@tanstack/react-table';\r\n import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n import { Checkbox } from '@/components/ui/checkbox';\r\n import { Button } from '@/components/ui/button';\r\n-import { Eye, SquarePen, Trash2 } from 'lucide-react';\r\n+import { Eye, Trash2 } from 'lucide-react';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Influenciador } from '@/lib/influenciadores';\r\n \r\n-\r\n type Props = {\r\n   onView: (influenciador: Influenciador) => void;\r\n };\r\n \r\n@@ -49,11 +48,9 @@\n       </button>\r\n     ),\r\n     cell: ({ row }) => {\r\n       const data = row.original.dataCadastro;\r\n-      \r\n       if (!data) return <span className=\"text-muted-foreground\">Sem data</span>;\r\n-    \r\n       const [ano, mes, dia] = data.split('-');\r\n       return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n     },\r\n   },\r\n@@ -101,60 +98,65 @@\n   {\r\n     id: 'meta',\r\n     header: 'Meta',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      return <span>R$ {rel?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n+      const ultima = [...row.original.recargas].sort((a, b) =>\r\n+        b.inicio.localeCompare(a.inicio)\r\n+      )[0];\r\n+      return <span>R$ {ultima?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n     header: 'Atingido',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      return <span>R$ {rel?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n+      const ultima = [...row.original.recargas].sort((a, b) =>\r\n+        b.inicio.localeCompare(a.inicio)\r\n+      )[0];\r\n+      return <span>R$ {ultima?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      const meta = rel?.meta || 0;\r\n-      const atingido = rel?.atingido || 0;\r\n+      const ultima = [...row.original.recargas].sort((a, b) =>\r\n+        b.inicio.localeCompare(a.inicio)\r\n+      )[0];\r\n+      const meta = ultima?.meta || 0;\r\n+      const atingido = ultima?.atingido || 0;\r\n       const reembolso = meta > atingido ? meta - atingido : 0;\r\n-  \r\n       const reembolsoClass =\r\n         reembolso > 0 ? 'text-red-500 font-medium' : 'text-green-600 font-medium';\r\n-  \r\n+\r\n       return <span className={reembolsoClass}>R$ {reembolso.toLocaleString('pt-BR')}</span>;\r\n     },\r\n   },\r\n-  \r\n   {\r\n     id: 'statusMeta',\r\n-    header: () => (\r\n-      <div className=\"w-full text-center font-medium\">Status da Meta</div>\r\n-    ),\r\n+    header: () => <div className=\"w-full text-center font-medium\">Status da Meta</div>,\r\n     cell: ({ row }) => {\r\n-      const rel = row.original.relacoes[0];\r\n-      const meta = rel?.meta || 0;\r\n-      const atingido = rel?.atingido || 0;\r\n-  \r\n+      const ultima = [...row.original.recargas].sort((a, b) =>\r\n+        b.inicio.localeCompare(a.inicio)\r\n+      )[0];\r\n+\r\n+      const meta = ultima?.meta || 0;\r\n+      const atingido = ultima?.atingido || 0;\r\n+\r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n           ? 'Meta batida'\r\n           : 'Meta pendente';\r\n-  \r\n+\r\n       const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-yellow-400 text-yellow-900';\r\n-  \r\n+\r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n@@ -165,31 +167,24 @@\n         </div>\r\n       );\r\n     },\r\n   },\r\n-  \r\n   {\r\n     id: 'actions',\r\n     header: 'Ações',\r\n     cell: ({ row }) => (\r\n       <div className=\"flex gap-2\">\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n-              <Button\r\n-                size=\"icon\"\r\n-                variant=\"outline\"\r\n-                onClick={() => onView(row.original)}\r\n-              >\r\n+              <Button size=\"icon\" variant=\"outline\" onClick={() => onView(row.original)}>\r\n                 <Eye className=\"w-4 h-4\" />\r\n               </Button>\r\n             </TooltipTrigger>\r\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n \r\n-        {/* Apagando o botão \"Editar\" */}\r\n-\r\n         <TooltipProvider>\r\n           <Tooltip>\r\n             <TooltipTrigger asChild>\r\n               <Button size=\"icon\" variant=\"outline\">\r\n"
                },
                {
                    "date": 1745355929689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,31 @@\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Influenciador } from '@/lib/influenciadores';\r\n \r\n+const hojeTimestamp = new Date().getTime();\r\n+\r\n+function getRecargaResumo(recargas: Influenciador['recargas']) {\r\n+  const ativas = recargas.filter((r) => new Date(r.termino).getTime() >= hojeTimestamp);\r\n+\r\n+  if (ativas.length > 0) {\r\n+    return ativas.reduce(\r\n+      (acc, r) => {\r\n+        acc.meta += r.meta;\r\n+        acc.atingido += r.atingido;\r\n+        return acc;\r\n+      },\r\n+      { meta: 0, atingido: 0 }\r\n+    );\r\n+  } else {\r\n+    const ultima = [...recargas].sort((a, b) => b.inicio.localeCompare(a.inicio))[0];\r\n+    return {\r\n+      meta: ultima?.meta || 0,\r\n+      atingido: ultima?.atingido || 0,\r\n+    };\r\n+  }\r\n+}\r\n+\r\n type Props = {\r\n   onView: (influenciador: Influenciador) => void;\r\n };\r\n \r\n@@ -98,65 +121,48 @@\n   {\r\n     id: 'meta',\r\n     header: 'Meta',\r\n     cell: ({ row }) => {\r\n-      const ultima = [...row.original.recargas].sort((a, b) =>\r\n-        b.inicio.localeCompare(a.inicio)\r\n-      )[0];\r\n-      return <span>R$ {ultima?.meta?.toLocaleString('pt-BR') || '0'}</span>;\r\n+      const { meta } = getRecargaResumo(row.original.recargas);\r\n+      return <span>R$ {meta.toLocaleString('pt-BR')}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'atingido',\r\n     header: 'Atingido',\r\n     cell: ({ row }) => {\r\n-      const ultima = [...row.original.recargas].sort((a, b) =>\r\n-        b.inicio.localeCompare(a.inicio)\r\n-      )[0];\r\n-      return <span>R$ {ultima?.atingido?.toLocaleString('pt-BR') || '0'}</span>;\r\n+      const { atingido } = getRecargaResumo(row.original.recargas);\r\n+      return <span>R$ {atingido.toLocaleString('pt-BR')}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'reembolso',\r\n     header: 'Reembolso',\r\n     cell: ({ row }) => {\r\n-      const ultima = [...row.original.recargas].sort((a, b) =>\r\n-        b.inicio.localeCompare(a.inicio)\r\n-      )[0];\r\n-      const meta = ultima?.meta || 0;\r\n-      const atingido = ultima?.atingido || 0;\r\n+      const { meta, atingido } = getRecargaResumo(row.original.recargas);\r\n       const reembolso = meta > atingido ? meta - atingido : 0;\r\n       const reembolsoClass =\r\n         reembolso > 0 ? 'text-red-500 font-medium' : 'text-green-600 font-medium';\r\n-\r\n       return <span className={reembolsoClass}>R$ {reembolso.toLocaleString('pt-BR')}</span>;\r\n     },\r\n   },\r\n   {\r\n     id: 'statusMeta',\r\n     header: () => <div className=\"w-full text-center font-medium\">Status da Meta</div>,\r\n     cell: ({ row }) => {\r\n-      const ultima = [...row.original.recargas].sort((a, b) =>\r\n-        b.inicio.localeCompare(a.inicio)\r\n-      )[0];\r\n-\r\n-      const meta = ultima?.meta || 0;\r\n-      const atingido = ultima?.atingido || 0;\r\n-\r\n+      const { meta, atingido } = getRecargaResumo(row.original.recargas);\r\n       const statusLabel =\r\n         meta === 0 && atingido === 0\r\n           ? 'Meta indefinida'\r\n           : atingido >= meta\r\n           ? 'Meta batida'\r\n           : 'Meta pendente';\r\n-\r\n       const statusClass =\r\n         meta === 0 && atingido === 0\r\n           ? 'bg-muted text-muted-foreground'\r\n           : atingido >= meta\r\n           ? 'bg-green-500 text-white'\r\n           : 'bg-yellow-400 text-yellow-900';\r\n-\r\n       return (\r\n         <div\r\n           className={cn(\r\n             'w-[140px] mx-auto flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium text-center whitespace-nowrap transition',\r\n"
                },
                {
                    "date": 1745511393786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,19 +188,8 @@\n             </TooltipTrigger>\r\n             <TooltipContent>Visualizar</TooltipContent>\r\n           </Tooltip>\r\n         </TooltipProvider>\r\n-\r\n-        <TooltipProvider>\r\n-          <Tooltip>\r\n-            <TooltipTrigger asChild>\r\n-              <Button size=\"icon\" variant=\"outline\">\r\n-                <Trash2 className=\"w-4 h-4\" />\r\n-              </Button>\r\n-            </TooltipTrigger>\r\n-            <TooltipContent>Excluir</TooltipContent>\r\n-          </Tooltip>\r\n-        </TooltipProvider>\r\n       </div>\r\n     ),\r\n   },\r\n ];\r\n"
                }
            ],
            "date": 1744940482302,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { ColumnDef } from '@tanstack/react-table';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye, SquarePen, Trash2 } from 'lucide-react';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport type InfluenciadorLista = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  instagram: string;\r\n  cpf: string;\r\n  meta: number;\r\n  atingido: number;\r\n  statusMeta: 'completo' | 'incompleto';\r\n};\r\n\r\nexport const columns: ColumnDef<InfluenciadorLista>[] = [\r\n  {\r\n    id: 'select',\r\n    header: ({ table }) => (\r\n      <Checkbox\r\n        checked={\r\n          table.getIsAllPageRowsSelected() ||\r\n          (table.getIsSomePageRowsSelected() && 'indeterminate')\r\n        }\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label=\"Selecionar tudo\"\r\n      />\r\n    ),\r\n    cell: ({ row }) => (\r\n      <Checkbox\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label=\"Selecionar linha\"\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n  },\r\n  {\r\n    accessorKey: 'nome',\r\n    header: 'Nome',\r\n    cell: ({ row }) => {\r\n      const { nome, imagem } = row.original;\r\n      return (\r\n        <div className=\"flex items-center gap-3\">\r\n          <Avatar className=\"w-8 h-8\">\r\n            {imagem ? <AvatarImage src={imagem} /> : <AvatarFallback>INF</AvatarFallback>}\r\n          </Avatar>\r\n          <span>{nome}</span>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'instagram',\r\n    header: 'Instagram',\r\n    cell: ({ row }) => (\r\n      <a\r\n        href={row.original.instagram}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"text-blue-600 underline text-sm\"\r\n      >\r\n        @{row.original.instagram.replace('https://instagram.com/', '')}\r\n      </a>\r\n    ),\r\n  },\r\n  {\r\n    accessorKey: 'cpf',\r\n    header: 'CPF',\r\n    cell: ({ row }) => <span>{row.original.cpf}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'meta',\r\n    header: 'Meta',\r\n    cell: ({ row }) => <span>R$ {row.original.meta.toLocaleString('pt-BR')}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'atingido',\r\n    header: 'Atingido',\r\n    cell: ({ row }) => <span>R$ {row.original.atingido.toLocaleString('pt-BR')}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'statusMeta',\r\n    header: 'Status',\r\n    cell: ({ row }) => {\r\n      const status = row.original.statusMeta;\r\n      const color = status === 'completo' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';\r\n      return <Badge className={cn('rounded-full px-3 py-1 text-xs', color)}>{status}</Badge>;\r\n    },\r\n  },\r\n  {\r\n    id: 'actions',\r\n    header: 'Ações',\r\n    cell: () => (\r\n      <div className=\"flex gap-2\">\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button size=\"icon\" variant=\"outline\">\r\n                <Eye className=\"w-4 h-4\" />\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>Visualizar</TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button size=\"icon\" variant=\"outline\">\r\n                <SquarePen className=\"w-4 h-4\" />\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>Editar</TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button size=\"icon\" variant=\"outline\">\r\n                <Trash2 className=\"w-4 h-4\" />\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>Excluir</TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n      </div>\r\n"
        }
    ]
}