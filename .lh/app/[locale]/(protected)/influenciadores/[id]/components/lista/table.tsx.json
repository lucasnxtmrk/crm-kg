{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/lista/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1744940463076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744941110307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,17 @@\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n+import { useMemo } from 'react'; // ðŸ‘ˆ adicionado aqui\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n-  const data = getInfluenciadoresBySlug(plataformaSlug);\r\n+  // âœ… Memoiza os dados\r\n+  const data = useMemo(() => getInfluenciadoresBySlug(plataformaSlug), [plataformaSlug]);\r\n \r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n@@ -58,57 +60,9 @@\n   });\r\n \r\n   return (\r\n     <div className=\"w-full\">\r\n-      <div className=\"flex items-center py-4 px-5\">\r\n-        <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n-        <div className=\"flex-none\">\r\n-          <Input\r\n-            placeholder=\"Filtrar por nome...\"\r\n-            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n-            onChange={(event) =>\r\n-              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n-            }\r\n-            className=\"max-w-sm\"\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <Table>\r\n-        <TableHeader className=\"bg-default-200\">\r\n-          {table.getHeaderGroups().map((headerGroup) => (\r\n-            <TableRow key={headerGroup.id}>\r\n-              {headerGroup.headers.map((header) => (\r\n-                <TableHead key={header.id}>\r\n-                  {header.isPlaceholder\r\n-                    ? null\r\n-                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n-                </TableHead>\r\n-              ))}\r\n-            </TableRow>\r\n-          ))}\r\n-        </TableHeader>\r\n-        <TableBody>\r\n-          {table.getRowModel().rows?.length ? (\r\n-            table.getRowModel().rows.map((row) => (\r\n-              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n-                {row.getVisibleCells().map((cell) => (\r\n-                  <TableCell key={cell.id}>\r\n-                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                  </TableCell>\r\n-                ))}\r\n-              </TableRow>\r\n-            ))\r\n-          ) : (\r\n-            <TableRow>\r\n-              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n-                Nenhum resultado encontrado.\r\n-              </TableCell>\r\n-            </TableRow>\r\n-          )}\r\n-        </TableBody>\r\n-      </Table>\r\n-      <TablePagination table={table} />\r\n+      {/* ... resto igual ... */}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1744941153657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,16 +24,16 @@\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n-import { useMemo } from 'react'; // ðŸ‘ˆ adicionado aqui\r\n+import { useMemo } from 'react';\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n-  // âœ… Memoiza os dados\r\n+  // âœ… memoiza os dados filtrados por plataforma\r\n   const data = useMemo(() => getInfluenciadoresBySlug(plataformaSlug), [plataformaSlug]);\r\n \r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n@@ -60,9 +60,57 @@\n   });\r\n \r\n   return (\r\n     <div className=\"w-full\">\r\n-      {/* ... resto igual ... */}\r\n+      <div className=\"flex items-center py-4 px-5\">\r\n+        <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n+        <div className=\"flex-none\">\r\n+          <Input\r\n+            placeholder=\"Filtrar por nome...\"\r\n+            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n+            onChange={(event) =>\r\n+              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n+            }\r\n+            className=\"max-w-sm\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <Table>\r\n+        <TableHeader className=\"bg-default-200\">\r\n+          {table.getHeaderGroups().map((headerGroup) => (\r\n+            <TableRow key={headerGroup.id}>\r\n+              {headerGroup.headers.map((header) => (\r\n+                <TableHead key={header.id}>\r\n+                  {header.isPlaceholder\r\n+                    ? null\r\n+                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n+                </TableHead>\r\n+              ))}\r\n+            </TableRow>\r\n+          ))}\r\n+        </TableHeader>\r\n+        <TableBody>\r\n+          {table.getRowModel().rows?.length ? (\r\n+            table.getRowModel().rows.map((row) => (\r\n+              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n+                {row.getVisibleCells().map((cell) => (\r\n+                  <TableCell key={cell.id}>\r\n+                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                  </TableCell>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))\r\n+          ) : (\r\n+            <TableRow>\r\n+              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n+                Nenhum resultado encontrado.\r\n+              </TableCell>\r\n+            </TableRow>\r\n+          )}\r\n+        </TableBody>\r\n+      </Table>\r\n+      <TablePagination table={table} />\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1744941609509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,32 +31,38 @@\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n-  // âœ… memoiza os dados filtrados por plataforma\r\n+  // Memoiza os dados da plataforma\r\n   const data = useMemo(() => getInfluenciadoresBySlug(plataformaSlug), [plataformaSlug]);\r\n \r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n+  const [pagination, setPagination] = React.useState({\r\n+    pageIndex: 0,\r\n+    pageSize: 10,\r\n+  });\r\n \r\n   const table = useReactTable({\r\n     data,\r\n     columns,\r\n     onSortingChange: setSorting,\r\n     onColumnFiltersChange: setColumnFilters,\r\n+    onColumnVisibilityChange: setColumnVisibility,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onPaginationChange: setPagination,\r\n     getCoreRowModel: getCoreRowModel(),\r\n     getPaginationRowModel: getPaginationRowModel(),\r\n     getSortedRowModel: getSortedRowModel(),\r\n     getFilteredRowModel: getFilteredRowModel(),\r\n-    onColumnVisibilityChange: setColumnVisibility,\r\n-    onRowSelectionChange: setRowSelection,\r\n     state: {\r\n       sorting,\r\n       columnFilters,\r\n       columnVisibility,\r\n       rowSelection,\r\n+      pagination,\r\n     },\r\n   });\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1744941663775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n-    pageSize: 10,\r\n+    pageSize: 5,\r\n   });\r\n \r\n   const table = useReactTable({\r\n     data,\r\n"
                },
                {
                    "date": 1744941682183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n-    pageSize: 5,\r\n+    pageSize: 10,\r\n   });\r\n \r\n   const table = useReactTable({\r\n     data,\r\n"
                },
                {
                    "date": 1745007372267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,18 +23,18 @@\n   TableHeader,\r\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n-import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresListaBySlug } from '@/lib/influenciadores';\r\n import { useMemo } from 'react';\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n   // Memoiza os dados da plataforma\r\n-  const data = useMemo(() => getInfluenciadoresBySlug(plataformaSlug), [plataformaSlug]);\r\n+  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug), [plataformaSlug]);\r\n \r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n"
                },
                {
                    "date": 1745101800627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,15 +38,51 @@\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n+  const [sortConfig, setSortConfig] = React.useState({ key: 'nome', direction: 'asc' });\r\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   });\r\n-\r\n+  function getStatusMeta(influenciador: Influenciador) {\r\n+    const relacao = influenciador.relacoes[0];\r\n+    if (!relacao) return 'incompleto';\r\n+    return relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n+  }\r\n+  \r\n+  const sortedInfluenciadores = [...influenciadores].sort((a, b) => {\r\n+    const { key, direction } = sortConfig;\r\n+  \r\n+    let aValue = key === 'statusMeta'\r\n+      ? getStatusMeta(a)\r\n+      : key === 'meta' || key === 'atingido'\r\n+      ? a.relacoes[0]?.[key] || 0\r\n+      : a[key];\r\n+  \r\n+    let bValue = key === 'statusMeta'\r\n+      ? getStatusMeta(b)\r\n+      : key === 'meta' || key === 'atingido'\r\n+      ? b.relacoes[0]?.[key] || 0\r\n+      : b[key];\r\n+  \r\n+    if (typeof aValue === 'string') {\r\n+      aValue = aValue.toLowerCase();\r\n+      bValue = bValue.toLowerCase();\r\n+    }\r\n+  \r\n+    if (aValue < bValue) return direction === 'asc' ? -1 : 1;\r\n+    if (aValue > bValue) return direction === 'asc' ? 1 : -1;\r\n+    return 0;\r\n+  });\r\n+  const handleSort = (key: string) => {\r\n+  setSortConfig((prev) => ({\r\n+    key,\r\n+    direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\r\n+  }));\r\n+};\r\n   const table = useReactTable({\r\n-    data,\r\n+    data: sortedInfluenciadores,\r\n     columns,\r\n     onSortingChange: setSorting,\r\n     onColumnFiltersChange: setColumnFilters,\r\n     onColumnVisibilityChange: setColumnVisibility,\r\n"
                },
                {
                    "date": 1745101820166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   TableHeader,\r\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n-import { getInfluenciadoresListaBySlug } from '@/lib/influenciadores';\r\n+import influenciadores, { getInfluenciadoresListaBySlug, Influenciador } from '@/lib/influenciadores';\r\n import { useMemo } from 'react';\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n"
                },
                {
                    "date": 1745101878912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+'use client';\r\n+\r\n+import * as React from 'react';\r\n+import {\r\n+  ColumnFiltersState,\r\n+  SortingState,\r\n+  VisibilityState,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  useReactTable,\r\n+  flexRender,\r\n+} from '@tanstack/react-table';\r\n+\r\n+import { columns } from './columns';\r\n+import { Input } from '@/components/ui/input';\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableHead,\r\n+  TableHeader,\r\n+  TableRow,\r\n+} from '@/components/ui/table';\r\n+import TablePagination from './table-pagination';\r\n+import influenciadores, { getInfluenciadoresListaBySlug, Influenciador } from '@/lib/influenciadores';\r\n+import { useMemo } from 'react';\r\n+\r\n+interface Props {\r\n+  plataformaSlug: string;\r\n+}\r\n+\r\n+const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n+  // Memoiza os dados da plataforma\r\n+  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug), [plataformaSlug]);\r\n+\r\n+  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n+  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n+  const [rowSelection, setRowSelection] = React.useState({});\r\n+  const [sortConfig, setSortConfig] = React.useState({ key: 'nome', direction: 'asc' });\r\n+  const [pagination, setPagination] = React.useState({\r\n+    pageIndex: 0,\r\n+    pageSize: 10,\r\n+  });\r\n+  function getStatusMeta(influenciador: Influenciador) {\r\n+    const relacao = influenciador.relacoes[0];\r\n+    if (!relacao) return 'incompleto';\r\n+    return relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n+  }\r\n+  \r\n+  const sortedInfluenciadores = [...data].sort((a, b) => {\r\n+    const { key, direction } = sortConfig;\r\n+  \r\n+    let aValue = key === 'statusMeta'\r\n+      ? getStatusMeta(a as unknown as Influenciador)\r\n+      : key === 'meta' || key === 'atingido'\r\n+      ? a.relacoes[0]?.[key] || 0\r\n+      : (a as any)[key];\r\n+  \r\n+    let bValue = key === 'statusMeta'\r\n+      ? getStatusMeta(b as Influenciador)\r\n+      : key === 'meta' || key === 'atingido'\r\n+      ? b.relacoes[0]?.[key] || 0\r\n+      : (b as any)[key];\r\n+  \r\n+    if (typeof aValue === 'string') {\r\n+      aValue = aValue.toLowerCase();\r\n+      bValue = bValue.toLowerCase();\r\n+    }\r\n+  \r\n+    if (aValue < bValue) return direction === 'asc' ? -1 : 1;\r\n+    if (aValue > bValue) return direction === 'asc' ? 1 : -1;\r\n+    return 0;\r\n+  });  const handleSort = (key: string) => {  setSortConfig((prev) => ({\r\n+    key,\r\n+    direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\r\n+  }));\r\n+};\r\n+  const table = useReactTable({\r\n+    data: sortedInfluenciadores,\r\n+    columns,\r\n+    onSortingChange: setSorting,\r\n+    onColumnFiltersChange: setColumnFilters,\r\n+    onColumnVisibilityChange: setColumnVisibility,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onPaginationChange: setPagination,\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    state: {\r\n+      sorting,\r\n+      columnFilters,\r\n+      columnVisibility,\r\n+      rowSelection,\r\n+      pagination,\r\n+    },\r\n+  });\r\n+\r\n+  return (\r\n+    <div className=\"w-full\">\r\n+      <div className=\"flex items-center py-4 px-5\">\r\n+        <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n+        <div className=\"flex-none\">\r\n+          <Input\r\n+            placeholder=\"Filtrar por nome...\"\r\n+            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n+            onChange={(event) =>\r\n+              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n+            }\r\n+            className=\"max-w-sm\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <Table>\r\n+        <TableHeader className=\"bg-default-200\">\r\n+          {table.getHeaderGroups().map((headerGroup) => (\r\n+            <TableRow key={headerGroup.id}>\r\n+              {headerGroup.headers.map((header) => (\r\n+                <TableHead key={header.id}>\r\n+                  {header.isPlaceholder\r\n+                    ? null\r\n+                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n+                </TableHead>\r\n+              ))}\r\n+            </TableRow>\r\n+          ))}\r\n+        </TableHeader>\r\n+        <TableBody>\r\n+          {table.getRowModel().rows?.length ? (\r\n+            table.getRowModel().rows.map((row) => (\r\n+              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n+                {row.getVisibleCells().map((cell) => (\r\n+                  <TableCell key={cell.id}>\r\n+                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                  </TableCell>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))\r\n+          ) : (\r\n+            <TableRow>\r\n+              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n+                Nenhum resultado encontrado.\r\n+              </TableCell>\r\n+            </TableRow>\r\n+          )}\r\n+        </TableBody>\r\n+      </Table>\r\n+      <TablePagination table={table} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default ListaInfluenciadores;\r\n"
                },
                {
                    "date": 1745102454206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n-  // Memoiza os dados da plataforma\r\n-  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug), [plataformaSlug]);\r\n+  // Garante que sempre retorna array, mesmo vazio\r\n+  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug) ?? [], [plataformaSlug]);\r\n \r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n@@ -43,204 +43,54 @@\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   });\r\n+\r\n+  // FunÃ§Ã£o auxiliar para calcular o status da meta\r\n   function getStatusMeta(influenciador: Influenciador) {\r\n     const relacao = influenciador.relacoes[0];\r\n     if (!relacao) return 'incompleto';\r\n     return relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n   }\r\n-  \r\n+\r\n+  // OrdenaÃ§Ã£o manual para colunas customizadas\r\n   const sortedInfluenciadores = [...data].sort((a, b) => {\r\n     const { key, direction } = sortConfig;\r\n-  \r\n+\r\n     let aValue = key === 'statusMeta'\r\n-      ? getStatusMeta(a as unknown as Influenciador)\r\n+      ? getStatusMeta(a)\r\n       : key === 'meta' || key === 'atingido'\r\n       ? a.relacoes[0]?.[key] || 0\r\n       : (a as any)[key];\r\n-  \r\n+\r\n     let bValue = key === 'statusMeta'\r\n-      ? getStatusMeta(b as Influenciador)\r\n+      ? getStatusMeta(b)\r\n       : key === 'meta' || key === 'atingido'\r\n       ? b.relacoes[0]?.[key] || 0\r\n       : (b as any)[key];\r\n-  \r\n+\r\n     if (typeof aValue === 'string') {\r\n       aValue = aValue.toLowerCase();\r\n       bValue = bValue.toLowerCase();\r\n     }\r\n-  \r\n+\r\n     if (aValue < bValue) return direction === 'asc' ? -1 : 1;\r\n     if (aValue > bValue) return direction === 'asc' ? 1 : -1;\r\n     return 0;\r\n-  });  const handleSort = (key: string) => {  setSortConfig((prev) => ({\r\n-    key,\r\n-    direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\r\n-  }));\r\n-};\r\n-  const table = useReactTable({\r\n-    data: sortedInfluenciadores,\r\n-    columns,\r\n-    onSortingChange: setSorting,\r\n-    onColumnFiltersChange: setColumnFilters,\r\n-    onColumnVisibilityChange: setColumnVisibility,\r\n-    onRowSelectionChange: setRowSelection,\r\n-    onPaginationChange: setPagination,\r\n-    getCoreRowModel: getCoreRowModel(),\r\n-    getPaginationRowModel: getPaginationRowModel(),\r\n-    getSortedRowModel: getSortedRowModel(),\r\n-    getFilteredRowModel: getFilteredRowModel(),\r\n-    state: {\r\n-      sorting,\r\n-      columnFilters,\r\n-      columnVisibility,\r\n-      rowSelection,\r\n-      pagination,\r\n-    },\r\n   });\r\n \r\n-  return (\r\n-    <div className=\"w-full\">\r\n-      <div className=\"flex items-center py-4 px-5\">\r\n-        <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n-        <div className=\"flex-none\">\r\n-          <Input\r\n-            placeholder=\"Filtrar por nome...\"\r\n-            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n-            onChange={(event) =>\r\n-              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n-            }\r\n-            className=\"max-w-sm\"\r\n-          />\r\n-        </div>\r\n-      </div>\r\n+  // Atualiza configuraÃ§Ã£o de ordenaÃ§Ã£o ao clicar no header\r\n+  const handleSort = (key: string) => {\r\n+    setSortConfig((prev) => ({\r\n+      key,\r\n+      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\r\n+    }));\r\n+  };\r\n \r\n-      <Table>\r\n-        <TableHeader className=\"bg-default-200\">\r\n-          {table.getHeaderGroups().map((headerGroup) => (\r\n-            <TableRow key={headerGroup.id}>\r\n-              {headerGroup.headers.map((header) => (\r\n-                <TableHead key={header.id}>\r\n-                  {header.isPlaceholder\r\n-                    ? null\r\n-                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n-                </TableHead>\r\n-              ))}\r\n-            </TableRow>\r\n-          ))}\r\n-        </TableHeader>\r\n-        <TableBody>\r\n-          {table.getRowModel().rows?.length ? (\r\n-            table.getRowModel().rows.map((row) => (\r\n-              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n-                {row.getVisibleCells().map((cell) => (\r\n-                  <TableCell key={cell.id}>\r\n-                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                  </TableCell>\r\n-                ))}\r\n-              </TableRow>\r\n-            ))\r\n-          ) : (\r\n-            <TableRow>\r\n-              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n-                Nenhum resultado encontrado.\r\n-              </TableCell>\r\n-            </TableRow>\r\n-          )}\r\n-        </TableBody>\r\n-      </Table>\r\n-      <TablePagination table={table} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default ListaInfluenciadores;\r\n-'use client';\r\n-\r\n-import * as React from 'react';\r\n-import {\r\n-  ColumnFiltersState,\r\n-  SortingState,\r\n-  VisibilityState,\r\n-  getCoreRowModel,\r\n-  getFilteredRowModel,\r\n-  getPaginationRowModel,\r\n-  getSortedRowModel,\r\n-  useReactTable,\r\n-  flexRender,\r\n-} from '@tanstack/react-table';\r\n-\r\n-import { columns } from './columns';\r\n-import { Input } from '@/components/ui/input';\r\n-import {\r\n-  Table,\r\n-  TableBody,\r\n-  TableCell,\r\n-  TableHead,\r\n-  TableHeader,\r\n-  TableRow,\r\n-} from '@/components/ui/table';\r\n-import TablePagination from './table-pagination';\r\n-import influenciadores, { getInfluenciadoresListaBySlug, Influenciador } from '@/lib/influenciadores';\r\n-import { useMemo } from 'react';\r\n-\r\n-interface Props {\r\n-  plataformaSlug: string;\r\n-}\r\n-\r\n-const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n-  // Memoiza os dados da plataforma\r\n-  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug), [plataformaSlug]);\r\n-\r\n-  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n-  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n-  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n-  const [rowSelection, setRowSelection] = React.useState({});\r\n-  const [sortConfig, setSortConfig] = React.useState({ key: 'nome', direction: 'asc' });\r\n-  const [pagination, setPagination] = React.useState({\r\n-    pageIndex: 0,\r\n-    pageSize: 10,\r\n-  });\r\n-  function getStatusMeta(influenciador: Influenciador) {\r\n-    const relacao = influenciador.relacoes[0];\r\n-    if (!relacao) return 'incompleto';\r\n-    return relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n-  }\r\n-  \r\n-  const sortedInfluenciadores = [...influenciadores].sort((a, b) => {\r\n-    const { key, direction } = sortConfig;\r\n-  \r\n-    let aValue = key === 'statusMeta'\r\n-      ? getStatusMeta(a)\r\n-      : key === 'meta' || key === 'atingido'\r\n-      ? a.relacoes[0]?.[key] || 0\r\n-      : a[key];\r\n-  \r\n-    let bValue = key === 'statusMeta'\r\n-      ? getStatusMeta(b)\r\n-      : key === 'meta' || key === 'atingido'\r\n-      ? b.relacoes[0]?.[key] || 0\r\n-      : b[key];\r\n-  \r\n-    if (typeof aValue === 'string') {\r\n-      aValue = aValue.toLowerCase();\r\n-      bValue = bValue.toLowerCase();\r\n-    }\r\n-  \r\n-    if (aValue < bValue) return direction === 'asc' ? -1 : 1;\r\n-    if (aValue > bValue) return direction === 'asc' ? 1 : -1;\r\n-    return 0;\r\n-  });\r\n-  const handleSort = (key: string) => {\r\n-  setSortConfig((prev) => ({\r\n-    key,\r\n-    direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\r\n-  }));\r\n-};\r\n+  // Inicializa a tabela do react-table\r\n   const table = useReactTable({\r\n     data: sortedInfluenciadores,\r\n-    columns,\r\n+    columns: columns(handleSort, sortConfig), // importante passar os handlers\r\n     onSortingChange: setSorting,\r\n     onColumnFiltersChange: setColumnFilters,\r\n     onColumnVisibilityChange: setColumnVisibility,\r\n     onRowSelectionChange: setRowSelection,\r\n@@ -275,9 +125,9 @@\n       </div>\r\n \r\n       <Table>\r\n         <TableHeader className=\"bg-default-200\">\r\n-          {table.getHeaderGroups().map((headerGroup) => (\r\n+          {table.getHeaderGroups()?.map((headerGroup) => (\r\n             <TableRow key={headerGroup.id}>\r\n               {headerGroup.headers.map((header) => (\r\n                 <TableHead key={header.id}>\r\n                   {header.isPlaceholder\r\n@@ -287,8 +137,9 @@\n               ))}\r\n             </TableRow>\r\n           ))}\r\n         </TableHeader>\r\n+\r\n         <TableBody>\r\n           {table.getRowModel().rows?.length ? (\r\n             table.getRowModel().rows.map((row) => (\r\n               <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n@@ -300,15 +151,16 @@\n               </TableRow>\r\n             ))\r\n           ) : (\r\n             <TableRow>\r\n-              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n+              <TableCell colSpan={columns(handleSort, sortConfig).length} className=\"h-24 text-center\">\r\n                 Nenhum resultado encontrado.\r\n               </TableCell>\r\n             </TableRow>\r\n           )}\r\n         </TableBody>\r\n       </Table>\r\n+\r\n       <TablePagination table={table} />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1745102516784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   useReactTable,\r\n   flexRender,\r\n } from '@tanstack/react-table';\r\n \r\n-import { columns } from './columns';\r\n+import { getColumns } from './columns';\r\n import { Input } from '@/components/ui/input';\r\n import {\r\n   Table,\r\n   TableBody,\r\n"
                },
                {
                    "date": 1745102597850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n-  const [sortConfig, setSortConfig] = React.useState({ key: 'nome', direction: 'asc' });\r\n+  const [sortConfig, setSortConfig] = React.useState<{ key: string; direction: 'asc' | 'desc' }>({ key: 'nome', direction: 'asc' });\r\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   });\r\n@@ -88,9 +88,9 @@\n \r\n   // Inicializa a tabela do react-table\r\n   const table = useReactTable({\r\n     data: sortedInfluenciadores,\r\n-    columns: columns(handleSort, sortConfig), // importante passar os handlers\r\n+    columns: getColumns(handleSort, sortConfig), // importante passar os handlers\r\n     onSortingChange: setSorting,\r\n     onColumnFiltersChange: setColumnFilters,\r\n     onColumnVisibilityChange: setColumnVisibility,\r\n     onRowSelectionChange: setRowSelection,\r\n@@ -163,6 +163,5 @@\n       <TablePagination table={table} />\r\n     </div>\r\n   );\r\n };\r\n-\r\n export default ListaInfluenciadores;\r\n"
                },
                {
                    "date": 1745102638974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,12 @@\n       pagination,\r\n     },\r\n   });\r\n \r\n+  function columns(handleSort: (key: string) => void, sortConfig: { key: string; direction: \"asc\" | \"desc\"; }) {\r\n+    throw new Error('Function not implemented.');\r\n+  }\r\n+\r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n         <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n@@ -151,9 +155,9 @@\n               </TableRow>\r\n             ))\r\n           ) : (\r\n             <TableRow>\r\n-              <TableCell colSpan={columns(handleSort, sortConfig).length} className=\"h-24 text-center\">\r\n+              <TableCell colSpan={getColumns(handleSort, sortConfig).length} className=\"h-24 text-center\">\r\n                 Nenhum resultado encontrado.\r\n               </TableCell>\r\n             </TableRow>\r\n           )}\r\n"
                },
                {
                    "date": 1745102690055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   useReactTable,\r\n   flexRender,\r\n } from '@tanstack/react-table';\r\n \r\n-import { getColumns } from './columns';\r\n+import { getColumns } from './columns'; // âœ… funÃ§Ã£o correta importada\r\n import { Input } from '@/components/ui/input';\r\n import {\r\n   Table,\r\n   TableBody,\r\n@@ -23,9 +23,9 @@\n   TableHeader,\r\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n-import influenciadores, { getInfluenciadoresListaBySlug, Influenciador } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresListaBySlug, Influenciador } from '@/lib/influenciadores';\r\n import { useMemo } from 'react';\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n@@ -38,9 +38,12 @@\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n-  const [sortConfig, setSortConfig] = React.useState<{ key: string; direction: 'asc' | 'desc' }>({ key: 'nome', direction: 'asc' });\r\n+  const [sortConfig, setSortConfig] = React.useState<{ key: string; direction: 'asc' | 'desc' }>({\r\n+    key: 'nome',\r\n+    direction: 'asc',\r\n+  });\r\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   });\r\n@@ -55,19 +58,21 @@\n   // OrdenaÃ§Ã£o manual para colunas customizadas\r\n   const sortedInfluenciadores = [...data].sort((a, b) => {\r\n     const { key, direction } = sortConfig;\r\n \r\n-    let aValue = key === 'statusMeta'\r\n-      ? getStatusMeta(a)\r\n-      : key === 'meta' || key === 'atingido'\r\n-      ? a.relacoes[0]?.[key] || 0\r\n-      : (a as any)[key];\r\n+    let aValue =\r\n+      key === 'statusMeta'\r\n+        ? getStatusMeta(a)\r\n+        : key === 'meta' || key === 'atingido'\r\n+        ? a.relacoes[0]?.[key] || 0\r\n+        : (a as any)[key];\r\n \r\n-    let bValue = key === 'statusMeta'\r\n-      ? getStatusMeta(b)\r\n-      : key === 'meta' || key === 'atingido'\r\n-      ? b.relacoes[0]?.[key] || 0\r\n-      : (b as any)[key];\r\n+    let bValue =\r\n+      key === 'statusMeta'\r\n+        ? getStatusMeta(b)\r\n+        : key === 'meta' || key === 'atingido'\r\n+        ? b.relacoes[0]?.[key] || 0\r\n+        : (b as any)[key];\r\n \r\n     if (typeof aValue === 'string') {\r\n       aValue = aValue.toLowerCase();\r\n       bValue = bValue.toLowerCase();\r\n@@ -88,9 +93,9 @@\n \r\n   // Inicializa a tabela do react-table\r\n   const table = useReactTable({\r\n     data: sortedInfluenciadores,\r\n-    columns: getColumns(handleSort, sortConfig), // importante passar os handlers\r\n+    columns: getColumns(handleSort, sortConfig),\r\n     onSortingChange: setSorting,\r\n     onColumnFiltersChange: setColumnFilters,\r\n     onColumnVisibilityChange: setColumnVisibility,\r\n     onRowSelectionChange: setRowSelection,\r\n@@ -107,12 +112,8 @@\n       pagination,\r\n     },\r\n   });\r\n \r\n-  function columns(handleSort: (key: string) => void, sortConfig: { key: string; direction: \"asc\" | \"desc\"; }) {\r\n-    throw new Error('Function not implemented.');\r\n-  }\r\n-\r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n         <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n@@ -155,9 +156,12 @@\n               </TableRow>\r\n             ))\r\n           ) : (\r\n             <TableRow>\r\n-              <TableCell colSpan={getColumns(handleSort, sortConfig).length} className=\"h-24 text-center\">\r\n+              <TableCell\r\n+                colSpan={getColumns(handleSort, sortConfig).length}\r\n+                className=\"h-24 text-center\"\r\n+              >\r\n                 Nenhum resultado encontrado.\r\n               </TableCell>\r\n             </TableRow>\r\n           )}\r\n@@ -167,5 +171,6 @@\n       <TablePagination table={table} />\r\n     </div>\r\n   );\r\n };\r\n+\r\n export default ListaInfluenciadores;\r\n"
                },
                {
                    "date": 1745103026180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   useReactTable,\r\n   flexRender,\r\n } from '@tanstack/react-table';\r\n \r\n-import { getColumns } from './columns'; // âœ… funÃ§Ã£o correta importada\r\n+import { getColumns } from './columns';\r\n import { Input } from '@/components/ui/input';\r\n import {\r\n   Table,\r\n   TableBody,\r\n@@ -23,79 +23,46 @@\n   TableHeader,\r\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n-import { getInfluenciadoresListaBySlug, Influenciador } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresListaBySlug } from '@/lib/influenciadores';\r\n import { useMemo } from 'react';\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n-  // Garante que sempre retorna array, mesmo vazio\r\n-  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug) ?? [], [plataformaSlug]);\r\n+  // Transforma os dados com os campos derivados jÃ¡ prontos\r\n+  const data = useMemo(() => {\r\n+    const base = getInfluenciadoresListaBySlug(plataformaSlug) ?? [];\r\n \r\n+    return base.map((inf) => {\r\n+      const relacao = inf.relacoes[0] ?? { meta: 0, atingido: 0 };\r\n+      const statusMeta = relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n+\r\n+      return {\r\n+        ...inf,\r\n+        meta: relacao.meta,\r\n+        atingido: relacao.atingido,\r\n+        statusMeta,\r\n+      };\r\n+    });\r\n+  }, [plataformaSlug]);\r\n+\r\n+  // Estado da tabela\r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = React.useState({});\r\n-  const [sortConfig, setSortConfig] = React.useState<{ key: string; direction: 'asc' | 'desc' }>({\r\n-    key: 'nome',\r\n-    direction: 'asc',\r\n-  });\r\n   const [pagination, setPagination] = React.useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   });\r\n \r\n-  // FunÃ§Ã£o auxiliar para calcular o status da meta\r\n-  function getStatusMeta(influenciador: Influenciador) {\r\n-    const relacao = influenciador.relacoes[0];\r\n-    if (!relacao) return 'incompleto';\r\n-    return relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n-  }\r\n-\r\n-  // OrdenaÃ§Ã£o manual para colunas customizadas\r\n-  const sortedInfluenciadores = [...data].sort((a, b) => {\r\n-    const { key, direction } = sortConfig;\r\n-\r\n-    let aValue =\r\n-      key === 'statusMeta'\r\n-        ? getStatusMeta(a)\r\n-        : key === 'meta' || key === 'atingido'\r\n-        ? a.relacoes[0]?.[key] || 0\r\n-        : (a as any)[key];\r\n-\r\n-    let bValue =\r\n-      key === 'statusMeta'\r\n-        ? getStatusMeta(b)\r\n-        : key === 'meta' || key === 'atingido'\r\n-        ? b.relacoes[0]?.[key] || 0\r\n-        : (b as any)[key];\r\n-\r\n-    if (typeof aValue === 'string') {\r\n-      aValue = aValue.toLowerCase();\r\n-      bValue = bValue.toLowerCase();\r\n-    }\r\n-\r\n-    if (aValue < bValue) return direction === 'asc' ? -1 : 1;\r\n-    if (aValue > bValue) return direction === 'asc' ? 1 : -1;\r\n-    return 0;\r\n-  });\r\n-\r\n-  // Atualiza configuraÃ§Ã£o de ordenaÃ§Ã£o ao clicar no header\r\n-  const handleSort = (key: string) => {\r\n-    setSortConfig((prev) => ({\r\n-      key,\r\n-      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\r\n-    }));\r\n-  };\r\n-\r\n-  // Inicializa a tabela do react-table\r\n   const table = useReactTable({\r\n-    data: sortedInfluenciadores,\r\n-    columns: getColumns(handleSort, sortConfig),\r\n+    data,\r\n+    columns: getColumns(), // âœ… sem handleSort\r\n     onSortingChange: setSorting,\r\n     onColumnFiltersChange: setColumnFilters,\r\n     onColumnVisibilityChange: setColumnVisibility,\r\n     onRowSelectionChange: setRowSelection,\r\n@@ -156,12 +123,9 @@\n               </TableRow>\r\n             ))\r\n           ) : (\r\n             <TableRow>\r\n-              <TableCell\r\n-                colSpan={getColumns(handleSort, sortConfig).length}\r\n-                className=\"h-24 text-center\"\r\n-              >\r\n+              <TableCell colSpan={getColumns().length} className=\"h-24 text-center\">\r\n                 Nenhum resultado encontrado.\r\n               </TableCell>\r\n             </TableRow>\r\n           )}\r\n"
                },
                {
                    "date": 1745103108631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,11 @@\n   const data = useMemo(() => {\r\n     const base = getInfluenciadoresListaBySlug(plataformaSlug) ?? [];\r\n \r\n     return base.map((inf) => {\r\n-      const relacao = inf.relacoes[0] ?? { meta: 0, atingido: 0 };\r\n-      const statusMeta = relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n+      const relacao = Array.isArray(inf.relacoes) && inf.relacoes.length > 0\r\n+      ? inf.relacoes[0]\r\n+      : { meta: 0, atingido: 0 };      const statusMeta = relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n \r\n       return {\r\n         ...inf,\r\n         meta: relacao.meta,\r\n"
                },
                {
                    "date": 1745103251452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,18 +34,21 @@\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n   // Transforma os dados com os campos derivados jÃ¡ prontos\r\n   const data = useMemo(() => {\r\n     const base = getInfluenciadoresListaBySlug(plataformaSlug) ?? [];\r\n-\r\n+  \r\n     return base.map((inf) => {\r\n-      const relacao = Array.isArray(inf.relacoes) && inf.relacoes.length > 0\r\n-      ? inf.relacoes[0]\r\n-      : { meta: 0, atingido: 0 };      const statusMeta = relacao.atingido >= relacao.meta ? 'completo' : 'incompleto';\r\n-\r\n+      // Busca a relaÃ§Ã£o especÃ­fica da plataforma atual\r\n+      const relacao = inf.relacoes.find((r) => r.plataformaId === plataformaSlug);\r\n+  \r\n+      const meta = relacao?.meta ?? 0;\r\n+      const atingido = relacao?.atingido ?? 0;\r\n+      const statusMeta = atingido >= meta ? 'completo' : 'incompleto';\r\n+  \r\n       return {\r\n         ...inf,\r\n-        meta: relacao.meta,\r\n-        atingido: relacao.atingido,\r\n+        meta,\r\n+        atingido,\r\n         statusMeta,\r\n       };\r\n     });\r\n   }, [plataformaSlug]);\r\n"
                },
                {
                    "date": 1745103283559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     const base = getInfluenciadoresListaBySlug(plataformaSlug) ?? [];\r\n   \r\n     return base.map((inf) => {\r\n       // Busca a relaÃ§Ã£o especÃ­fica da plataforma atual\r\n-      const relacao = inf.relacoes.find((r) => r.plataformaId === plataformaSlug);\r\n+      const relacao = inf.relacoes.find((r: { plataformaId: string; }) => r.plataformaId === plataformaSlug);\r\n   \r\n       const meta = relacao?.meta ?? 0;\r\n       const atingido = relacao?.atingido ?? 0;\r\n       const statusMeta = atingido >= meta ? 'completo' : 'incompleto';\r\n"
                },
                {
                    "date": 1745103395427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,11 @@\n     const base = getInfluenciadoresListaBySlug(plataformaSlug) ?? [];\r\n   \r\n     return base.map((inf) => {\r\n       // Busca a relaÃ§Ã£o especÃ­fica da plataforma atual\r\n-      const relacao = inf.relacoes.find((r: { plataformaId: string; }) => r.plataformaId === plataformaSlug);\r\n-  \r\n+      const relacao = Array.isArray(inf.relacoes)\r\n+      ? inf.relacoes.find((r) => r.plataformaId === plataformaSlug)\r\n+      : undefined;  \r\n       const meta = relacao?.meta ?? 0;\r\n       const atingido = relacao?.atingido ?? 0;\r\n       const statusMeta = atingido >= meta ? 'completo' : 'incompleto';\r\n   \r\n"
                },
                {
                    "date": 1745103700672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,29 +32,11 @@\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n   // Transforma os dados com os campos derivados jÃ¡ prontos\r\n-  const data = useMemo(() => {\r\n-    const base = getInfluenciadoresListaBySlug(plataformaSlug) ?? [];\r\n-  \r\n-    return base.map((inf) => {\r\n-      // Busca a relaÃ§Ã£o especÃ­fica da plataforma atual\r\n-      const relacao = Array.isArray(inf.relacoes)\r\n-      ? inf.relacoes.find((r) => r.plataformaId === plataformaSlug)\r\n-      : undefined;  \r\n-      const meta = relacao?.meta ?? 0;\r\n-      const atingido = relacao?.atingido ?? 0;\r\n-      const statusMeta = atingido >= meta ? 'completo' : 'incompleto';\r\n-  \r\n-      return {\r\n-        ...inf,\r\n-        meta,\r\n-        atingido,\r\n-        statusMeta,\r\n-      };\r\n-    });\r\n-  }, [plataformaSlug]);\r\n+  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug), [plataformaSlug]);\r\n \r\n+\r\n   // Estado da tabela\r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n"
                },
                {
                    "date": 1745118387625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,20 +23,19 @@\n   TableHeader,\r\n   TableRow,\r\n } from '@/components/ui/table';\r\n import TablePagination from './table-pagination';\r\n-import { getInfluenciadoresListaBySlug } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n import { useMemo } from 'react';\r\n \r\n interface Props {\r\n   plataformaSlug: string;\r\n }\r\n \r\n const ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n   // Transforma os dados com os campos derivados jÃ¡ prontos\r\n-  const data = useMemo(() => getInfluenciadoresListaBySlug(plataformaSlug), [plataformaSlug]);\r\n+  const data = useMemo(() => getInfluenciadoresBySlug(plataformaSlug), [plataformaSlug]);\r\n \r\n-\r\n   // Estado da tabela\r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n"
                }
            ],
            "date": 1744940463076,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  flexRender,\r\n} from '@tanstack/react-table';\r\n\r\nimport { columns } from './columns';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport TablePagination from './table-pagination';\r\nimport { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n\r\ninterface Props {\r\n  plataformaSlug: string;\r\n}\r\n\r\nconst ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n  const data = getInfluenciadoresBySlug(plataformaSlug);\r\n\r\n  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = React.useState({});\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center py-4 px-5\">\r\n        <div className=\"flex-1 text-xl font-medium text-default-900\">Influenciadores</div>\r\n        <div className=\"flex-none\">\r\n          <Input\r\n            placeholder=\"Filtrar por nome...\"\r\n            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n            onChange={(event) =>\r\n              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n            }\r\n            className=\"max-w-sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <Table>\r\n        <TableHeader className=\"bg-default-200\">\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <TableHead key={header.id}>\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n                </TableHead>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {table.getRowModel().rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                Nenhum resultado encontrado.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      <TablePagination table={table} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListaInfluenciadores;\r\n"
        }
    ]
}