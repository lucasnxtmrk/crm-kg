{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/lista/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745868826000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745868826000,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  flexRender,\r\n} from '@tanstack/react-table';\r\n\r\nimport { getColumns } from './columns';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport TablePagination from './table-pagination';\r\nimport { Influenciador } from '@/lib/types'; // Apenas o tipo agora\r\nimport { useMemo, useState, useEffect } from 'react';\r\nimport InfluenciadorModal from '@/components/InfluenciadorModal';\r\nimport NewInfluenciadorModal from '@/components/NewInfluenciadorModal';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ninterface Props {\r\n  plataformaSlug: string;\r\n}\r\n\r\nconst ListaInfluenciadores = ({ plataformaSlug }: Props) => {\r\n  const [influenciadores, setInfluenciadores] = useState<Influenciador[]>([]);\r\n\r\n  // Novo: carregar da API real\r\n  const fetchInfluenciadores = async () => {\r\n    try {\r\n      const resposta = await fetch('/api/influenciadores');\r\n      const dados = await resposta.json();\r\n      setInfluenciadores(dados);\r\n    } catch (error) {\r\n      console.error('Erro ao buscar influenciadores:', error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchInfluenciadores();\r\n  }, []);\r\n\r\n  const data = useMemo(() => {\r\n    return influenciadores\r\n      .filter((inf) => inf.status !== \"banido\") // 🔥 EXCLUI os banidos\r\n      .filter((inf) =>\r\n        inf.cadastros_influenciadores?.some(\r\n          (cadastro) => cadastro.plataforma_id === plataformaSlug\r\n        )\r\n      );\r\n  }, [influenciadores, plataformaSlug]);\r\n\r\n  // table state\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [pagination, setPagination] = useState({\r\n    pageIndex: 0,\r\n    pageSize: 10,\r\n  });\r\n\r\n  // \"view details\" modal\r\n  const [modalAberto, setModalAberto] = useState(false);\r\n  const [influenciadorSelecionado, setInfluenciadorSelecionado] = useState<Influenciador | null>(null);\r\n\r\n  const handleView = (inf: Influenciador) => {\r\n    setInfluenciadorSelecionado(inf);\r\n    setModalAberto(true);\r\n  };\r\n\r\n  const columns = getColumns({\r\n    onView: handleView,\r\n    plataformaId: plataformaSlug, // ou a variável que contém a plataforma clicada\r\n  });\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      pagination,\r\n    },\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onPaginationChange: setPagination,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n  });\r\n\r\n  // \"add new influencer\" modal\r\n  const [novoOpen, setNovoOpen] = useState(false);\r\n  const handleSaveInfluenciador = (data: {\r\n    nome: string;\r\n    instagram: string;\r\n    email: string;\r\n    telefone: string;\r\n    cpf: string;\r\n    chavePix: string;\r\n    plataformas: string[];\r\n    status: string;\r\n    foto?: string;\r\n  }) => {\r\n    console.log(\"Novo influenciador:\", data);\r\n    setNovoOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center py-4 px-5\">\r\n        <div className=\"flex-1 text-xl font-medium text-default-900\">\r\n          Influenciadores\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <Input\r\n            placeholder=\"Filtrar por nome...\"\r\n            value={\r\n              (table.getColumn('nome')?.getFilterValue() as string) ?? ''\r\n            }\r\n            onChange={(e) =>\r\n              table.getColumn('nome')?.setFilterValue(e.target.value)\r\n            }\r\n            className=\"max-w-sm\"\r\n          />\r\n          <Button className='bg-primary' onClick={() => setNovoOpen(true)}>\r\n            Adicionar Influenciador\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Table>\r\n        <TableHeader className=\"bg-default-200\">\r\n          {table.getHeaderGroups().map((hg) => (\r\n            <TableRow key={hg.id}>\r\n              {hg.headers.map((header) => (\r\n                <TableHead key={header.id}>\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(\r\n                        header.column.columnDef.header,\r\n                        header.getContext()\r\n                      )}\r\n                </TableHead>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n\r\n        <TableBody>\r\n          {table.getRowModel().rows.length > 0 ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(\r\n                      cell.column.columnDef.cell,\r\n                      cell.getContext()\r\n                    )}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell\r\n                colSpan={columns.length}\r\n                className=\"h-24 text-center\"\r\n              >\r\n                Nenhum resultado encontrado.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      <TablePagination table={table} />\r\n\r\n      {/* detalhes */}\r\n      <InfluenciadorModal\r\n  open={modalAberto}\r\n  onClose={() => setModalAberto(false)}\r\n  influenciador={influenciadorSelecionado}\r\n  onUpdate={async () => {\r\n    await fetchInfluenciadores(); // 🔥 Atualiza a lista inteira!\r\n  }}\r\n/>\r\n\r\n      {/* novo influencer */}\r\n      <NewInfluenciadorModal\r\n        open={novoOpen}\r\n        onClose={() => {\r\n          setNovoOpen(false);\r\n          fetchInfluenciadores();      // recarrega após fechar\r\n        }}\r\n        plataformaId={plataformaSlug}  // ⬅️ passe o slug/ID da plataforma\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListaInfluenciadores;\r\n"
        }
    ]
}