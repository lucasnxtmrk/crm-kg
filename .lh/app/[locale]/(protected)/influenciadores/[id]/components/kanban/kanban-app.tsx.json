{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/kanban/kanban-app.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1745001915639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745002127759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,27 @@\n-'use client';\r\n-\r\n import { useParams } from 'next/navigation';\r\n-import { useMemo } from 'react';\r\n-import { columns, gerarInfluenciadoresKanban } from './data';\r\n-import { influenciadores } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n import ColumnContainer from './column';\r\n \r\n+const columns = [\r\n+  { id: 'novo', title: 'Novo' },\r\n+  { id: 'contato', title: 'Contato' }, // você pode criar lógica depois\r\n+  { id: 'ativo', title: 'Ativo' },\r\n+  { id: 'banido', title: 'Banido' },   // idem\r\n+];\r\n+\r\n export default function KanbanApp() {\r\n   const params = useParams();\r\n   const plataformaSlug = params?.id as string;\r\n+  const tasks = getInfluenciadoresBySlug(plataformaSlug);\r\n \r\n-  const tasks = useMemo(() => {\r\n-    return gerarInfluenciadoresKanban(influenciadores, plataformaSlug);\r\n-  }, [plataformaSlug]);\r\n-\r\n   return (\r\n     <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n       {columns.map((col) => (\r\n         <ColumnContainer\r\n           key={col.id}\r\n           column={col}\r\n-          tasks={tasks.filter((t) => t.columnId === col.id)}\r\n+          tasks={tasks.filter((t) => t.status === col.id)}\r\n         />\r\n       ))}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1745002143838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,13 @@\n       {columns.map((col) => (\r\n         <ColumnContainer\r\n           key={col.id}\r\n           column={col}\r\n-          tasks={tasks.filter((t) => t.status === col.id)}\r\n+          tasks={tasks.filter((t) => t.status === col.id).map(task => ({\r\n+            ...task,\r\n+            columnId: col.id,\r\n+            porcentagem: 0\r\n+          }))}\r\n         />\r\n       ))}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1745002342699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,69 @@\n+'use client';\r\n+\r\n import { useParams } from 'next/navigation';\r\n-import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n+import { useEffect, useMemo, useState } from 'react';\r\n+import {\r\n+  DndContext,\r\n+  DragEndEvent,\r\n+  PointerSensor,\r\n+  useSensor,\r\n+  useSensors\r\n+} from '@dnd-kit/core';\r\n+import { SortableContext } from '@dnd-kit/sortable';\r\n+\r\n import ColumnContainer from './column';\r\n+import { getInfluenciadoresBySlug, InfluenciadorKanban } from '@/lib/influenciadores';\r\n \r\n const columns = [\r\n   { id: 'novo', title: 'Novo' },\r\n-  { id: 'contato', title: 'Contato' }, // você pode criar lógica depois\r\n+  { id: 'contato', title: 'Contato' },\r\n   { id: 'ativo', title: 'Ativo' },\r\n-  { id: 'banido', title: 'Banido' },   // idem\r\n+  { id: 'banido', title: 'Banido' }\r\n ];\r\n \r\n export default function KanbanApp() {\r\n   const params = useParams();\r\n   const plataformaSlug = params?.id as string;\r\n-  const tasks = getInfluenciadoresBySlug(plataformaSlug);\r\n \r\n+  const [influenciadores, setInfluenciadores] = useState<InfluenciadorKanban[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const dados = getInfluenciadoresBySlug(plataformaSlug);\r\n+    setInfluenciadores(dados);\r\n+  }, [plataformaSlug]);\r\n+\r\n+  const sensors = useSensors(\r\n+    useSensor(PointerSensor, {\r\n+      activationConstraint: { distance: 5 }\r\n+    })\r\n+  );\r\n+\r\n+  function onDragEnd(event: DragEndEvent) {\r\n+    const { active, over } = event;\r\n+    if (!over || active.id === over.id) return;\r\n+\r\n+    const overColumnId = over.id.toString();\r\n+\r\n+    setInfluenciadores((prev) =>\r\n+      prev.map((inf) =>\r\n+        inf.id === active.id ? { ...inf, status: overColumnId } : inf\r\n+      )\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n-    <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n-      {columns.map((col) => (\r\n-        <ColumnContainer\r\n-          key={col.id}\r\n-          column={col}\r\n-          tasks={tasks.filter((t) => t.status === col.id).map(task => ({\r\n-            ...task,\r\n-            columnId: col.id,\r\n-            porcentagem: 0\r\n-          }))}\r\n-        />\r\n-      ))}\r\n-    </div>\r\n+    <DndContext sensors={sensors} onDragEnd={onDragEnd}>\r\n+      <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n+        <SortableContext items={columns.map((c) => c.id)}>\r\n+          {columns.map((col) => (\r\n+            <ColumnContainer\r\n+              key={col.id}\r\n+              column={col}\r\n+              tasks={influenciadores.filter((inf) => inf.status === col.id)}\r\n+            />\r\n+          ))}\r\n+        </SortableContext>\r\n+      </div>\r\n+    </DndContext>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745002629761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,138 @@\n 'use client';\r\n \r\n-import { useParams } from 'next/navigation';\r\n-import { useEffect, useMemo, useState } from 'react';\r\n+import React, { useState, useMemo, useEffect } from 'react';\r\n import {\r\n   DndContext,\r\n+  DragStartEvent,\r\n   DragEndEvent,\r\n+  DragOverEvent,\r\n+  DragOverlay,\r\n   PointerSensor,\r\n   useSensor,\r\n   useSensors\r\n } from '@dnd-kit/core';\r\n-import { SortableContext } from '@dnd-kit/sortable';\r\n+import { SortableContext, arrayMove } from '@dnd-kit/sortable';\r\n+import { createPortal } from 'react-dom';\r\n \r\n-import ColumnContainer from './column';\r\n import { getInfluenciadoresBySlug, InfluenciadorKanban } from '@/lib/influenciadores';\r\n \r\n+import ColumnContainer from './column';\r\n+import TaskCard from './task';\r\n+import AddBoard from './add-board';\r\n+import CreateTask from './create-task';\r\n+\r\n const columns = [\r\n   { id: 'novo', title: 'Novo' },\r\n   { id: 'contato', title: 'Contato' },\r\n   { id: 'ativo', title: 'Ativo' },\r\n   { id: 'banido', title: 'Banido' }\r\n ];\r\n \r\n export default function KanbanApp() {\r\n-  const params = useParams();\r\n-  const plataformaSlug = params?.id as string;\r\n+  const plataformaSlug = typeof window !== 'undefined'\r\n+    ? window.location.pathname.split('/').pop()\r\n+    : '';\r\n \r\n   const [influenciadores, setInfluenciadores] = useState<InfluenciadorKanban[]>([]);\r\n+  const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n+  const [open, setOpen] = useState<boolean>(false);\r\n \r\n   useEffect(() => {\r\n-    const dados = getInfluenciadoresBySlug(plataformaSlug);\r\n-    setInfluenciadores(dados);\r\n+    if (plataformaSlug) {\r\n+      const dados = getInfluenciadoresBySlug(plataformaSlug);\r\n+      setInfluenciadores(dados);\r\n+    }\r\n   }, [plataformaSlug]);\r\n \r\n+  const tasksByStatus = (status: string) =>\r\n+    influenciadores.filter((t) => t.status === status);\r\n+\r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: { distance: 5 }\r\n     })\r\n   );\r\n \r\n-  function onDragEnd(event: DragEndEvent) {\r\n+  function onDragStart(event: DragStartEvent) {\r\n+    if (event.active.data.current?.type === 'Task') {\r\n+      setActiveTask(event.active.data.current.task);\r\n+    }\r\n+  }\r\n+\r\n+  function onDragEnd(_: DragEndEvent) {\r\n+    setActiveTask(null);\r\n+  }\r\n+\r\n+  function onDragOver(event: DragOverEvent) {\r\n     const { active, over } = event;\r\n-    if (!over || active.id === over.id) return;\r\n+    if (!over) return;\r\n \r\n-    const overColumnId = over.id.toString();\r\n+    const activeId = active.id;\r\n+    const overId = over.id;\r\n \r\n-    setInfluenciadores((prev) =>\r\n-      prev.map((inf) =>\r\n-        inf.id === active.id ? { ...inf, status: overColumnId } : inf\r\n-      )\r\n-    );\r\n+    if (activeId === overId) return;\r\n+\r\n+    const activeTaskItem = active.data.current?.task;\r\n+    const isActiveATask = active.data.current?.type === 'Task';\r\n+    const isOverATask = over.data.current?.type === 'Task';\r\n+    const isOverAColumn = over.data.current?.type === 'Column';\r\n+\r\n+    if (!isActiveATask) return;\r\n+\r\n+    setInfluenciadores((tasks) => {\r\n+      const updated = [...tasks];\r\n+      const taskIndex = updated.findIndex((t) => t.id === activeId);\r\n+      if (taskIndex === -1) return tasks;\r\n+\r\n+      if (isOverATask) {\r\n+        const overTask = over.data.current?.task;\r\n+        updated[taskIndex].status = overTask.status;\r\n+      }\r\n+\r\n+      if (isOverAColumn) {\r\n+        updated[taskIndex].status = overId;\r\n+      }\r\n+\r\n+      return updated;\r\n+    });\r\n   }\r\n \r\n   return (\r\n-    <DndContext sensors={sensors} onDragEnd={onDragEnd}>\r\n-      <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n-        <SortableContext items={columns.map((c) => c.id)}>\r\n+    <>\r\n+      <div className=\"flex gap-2 mb-5\">\r\n+        <h1 className=\"text-xl font-semibold\">Kanban: {plataformaSlug}</h1>\r\n+        <AddBoard />\r\n+      </div>\r\n+\r\n+      <DndContext\r\n+        sensors={sensors}\r\n+        onDragStart={onDragStart}\r\n+        onDragEnd={onDragEnd}\r\n+        onDragOver={onDragOver}\r\n+      >\r\n+        <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n           {columns.map((col) => (\r\n-            <ColumnContainer\r\n-              key={col.id}\r\n-              column={col}\r\n-              tasks={influenciadores.filter((inf) => inf.status === col.id)}\r\n-            />\r\n+            <SortableContext key={col.id} items={tasksByStatus(col.id)}>\r\n+              <ColumnContainer\r\n+                column={col}\r\n+                tasks={tasksByStatus(col.id)}\r\n+                handleOpenTask={() => setOpen(true)}\r\n+              />\r\n+            </SortableContext>\r\n           ))}\r\n-        </SortableContext>\r\n-      </div>\r\n-    </DndContext>\r\n+        </div>\r\n+\r\n+        {createPortal(\r\n+          <DragOverlay>\r\n+            {activeTask && (\r\n+              <TaskCard task={{ ...activeTask, type: 'Task' }} />\r\n+            )}\r\n+          </DragOverlay>,\r\n+          document.body\r\n+        )}\r\n+      </DndContext>\r\n+\r\n+      <CreateTask open={open} setOpen={setOpen} />\r\n+    </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745003146423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,138 +1,174 @@\n-'use client';\r\n-\r\n-import React, { useState, useMemo, useEffect } from 'react';\r\n+'use client'\r\n+import React, { useState, useMemo } from 'react'\r\n+import { type Column, type Task } from './data';\r\n import {\r\n-  DndContext,\r\n-  DragStartEvent,\r\n-  DragEndEvent,\r\n-  DragOverEvent,\r\n-  DragOverlay,\r\n-  PointerSensor,\r\n-  useSensor,\r\n-  useSensors\r\n-} from '@dnd-kit/core';\r\n-import { SortableContext, arrayMove } from '@dnd-kit/sortable';\r\n-import { createPortal } from 'react-dom';\r\n-\r\n-import { getInfluenciadoresBySlug, InfluenciadorKanban } from '@/lib/influenciadores';\r\n-\r\n-import ColumnContainer from './column';\r\n+    DndContext,\r\n+    DragEndEvent,\r\n+    DragOverEvent,\r\n+    DragOverlay,\r\n+    DragStartEvent,\r\n+    PointerSensor,\r\n+    useSensor,\r\n+    useSensors,\r\n+} from \"@dnd-kit/core\";\r\n+import { SortableContext, arrayMove } from \"@dnd-kit/sortable\";\r\n+import ColumnContainer from \"./column\"\r\n import TaskCard from './task';\r\n+import { createPortal } from \"react-dom\";\r\n import AddBoard from './add-board';\r\n-import CreateTask from './create-task';\r\n+import CreateTask from \"./create-task\";\r\n+import { useTranslations } from 'next-intl';\r\n+const KanBanApp = ({ defaultCols, defaultTasks }: { defaultCols: Column[], defaultTasks: Task[] }) => {\r\n+    const t = useTranslations(\"KanbanApp\");\r\n+    const [columns, setColumns] = useState<Column[]>(defaultCols);\r\n+    const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n-const columns = [\r\n-  { id: 'novo', title: 'Novo' },\r\n-  { id: 'contato', title: 'Contato' },\r\n-  { id: 'ativo', title: 'Ativo' },\r\n-  { id: 'banido', title: 'Banido' }\r\n-];\r\n+    const [tasks, setTasks] = useState<Task[]>(defaultTasks);\r\n \r\n-export default function KanbanApp() {\r\n-  const plataformaSlug = typeof window !== 'undefined'\r\n-    ? window.location.pathname.split('/').pop()\r\n-    : '';\r\n+    const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n \r\n-  const [influenciadores, setInfluenciadores] = useState<InfluenciadorKanban[]>([]);\r\n-  const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n-  const [open, setOpen] = useState<boolean>(false);\r\n+    const [activeTask, setActiveTask] = useState<Task | null>(null);\r\n \r\n-  useEffect(() => {\r\n-    if (plataformaSlug) {\r\n-      const dados = getInfluenciadoresBySlug(plataformaSlug);\r\n-      setInfluenciadores(dados);\r\n+    // create task state \r\n+    const [open, setOpen] = useState<boolean>(false);\r\n+    const sensors = useSensors(\r\n+        useSensor(PointerSensor, {\r\n+            activationConstraint: {\r\n+                distance: 10,\r\n+            },\r\n+        })\r\n+    );\r\n+    function onDragStart(event: DragStartEvent) {\r\n+        if (event.active.data.current?.type === \"Column\") {\r\n+            setActiveColumn(event.active.data.current.column);\r\n+            return;\r\n+        }\r\n+\r\n+        if (event.active.data.current?.type === \"Task\") {\r\n+            setActiveTask(event.active.data.current.task);\r\n+            return;\r\n+        }\r\n     }\r\n-  }, [plataformaSlug]);\r\n+    function onDragEnd(event: DragEndEvent) {\r\n+        setActiveColumn(null);\r\n+        setActiveTask(null);\r\n \r\n-  const tasksByStatus = (status: string) =>\r\n-    influenciadores.filter((t) => t.status === status);\r\n+        const { active, over } = event;\r\n+        if (!over) return;\r\n \r\n-  const sensors = useSensors(\r\n-    useSensor(PointerSensor, {\r\n-      activationConstraint: { distance: 5 }\r\n-    })\r\n-  );\r\n+        const activeId = active.id;\r\n+        const overId = over.id;\r\n \r\n-  function onDragStart(event: DragStartEvent) {\r\n-    if (event.active.data.current?.type === 'Task') {\r\n-      setActiveTask(event.active.data.current.task);\r\n+        if (activeId === overId) return;\r\n+\r\n+        const isActiveAColumn = active.data.current?.type === \"Column\";\r\n+        if (!isActiveAColumn) return;\r\n+\r\n+        console.log(\"DRAG END\");\r\n+\r\n+        setColumns((columns) => {\r\n+            const activeColumnIndex = columns.findIndex((col) => col.id === activeId);\r\n+\r\n+            const overColumnIndex = columns.findIndex((col) => col.id === overId);\r\n+\r\n+            return arrayMove(columns, activeColumnIndex, overColumnIndex);\r\n+        });\r\n     }\r\n-  }\r\n+    function onDragOver(event: DragOverEvent) {\r\n+        const { active, over } = event;\r\n+        if (!over) return;\r\n \r\n-  function onDragEnd(_: DragEndEvent) {\r\n-    setActiveTask(null);\r\n-  }\r\n+        const activeId = active.id;\r\n+        const overId = over.id;\r\n \r\n-  function onDragOver(event: DragOverEvent) {\r\n-    const { active, over } = event;\r\n-    if (!over) return;\r\n+        if (activeId === overId) return;\r\n \r\n-    const activeId = active.id;\r\n-    const overId = over.id;\r\n+        const isActiveATask = active.data.current?.type === \"Task\";\r\n+        const isOverATask = over.data.current?.type === \"Task\";\r\n \r\n-    if (activeId === overId) return;\r\n+        if (!isActiveATask) return;\r\n \r\n-    const activeTaskItem = active.data.current?.task;\r\n-    const isActiveATask = active.data.current?.type === 'Task';\r\n-    const isOverATask = over.data.current?.type === 'Task';\r\n-    const isOverAColumn = over.data.current?.type === 'Column';\r\n \r\n-    if (!isActiveATask) return;\r\n+        if (isActiveATask && isOverATask) {\r\n+            setTasks((tasks) => {\r\n+                const activeIndex = tasks.findIndex((t) => t.id === activeId);\r\n+                const overIndex = tasks.findIndex((t) => t.id === overId);\r\n \r\n-    setInfluenciadores((tasks) => {\r\n-      const updated = [...tasks];\r\n-      const taskIndex = updated.findIndex((t) => t.id === activeId);\r\n-      if (taskIndex === -1) return tasks;\r\n+                if (tasks[activeIndex].columnId != tasks[overIndex].columnId) {\r\n \r\n-      if (isOverATask) {\r\n-        const overTask = over.data.current?.task;\r\n-        updated[taskIndex].status = overTask.status;\r\n-      }\r\n+                    tasks[activeIndex].columnId = tasks[overIndex].columnId;\r\n+                    return arrayMove(tasks, activeIndex, overIndex - 1);\r\n+                }\r\n \r\n-      if (isOverAColumn) {\r\n-        updated[taskIndex].status = overId;\r\n-      }\r\n+                return arrayMove(tasks, activeIndex, overIndex);\r\n+            });\r\n+        }\r\n \r\n-      return updated;\r\n-    });\r\n-  }\r\n+        const isOverAColumn = over.data.current?.type === \"Column\";\r\n \r\n-  return (\r\n-    <>\r\n-      <div className=\"flex gap-2 mb-5\">\r\n-        <h1 className=\"text-xl font-semibold\">Kanban: {plataformaSlug}</h1>\r\n-        <AddBoard />\r\n-      </div>\r\n \r\n-      <DndContext\r\n-        sensors={sensors}\r\n-        onDragStart={onDragStart}\r\n-        onDragEnd={onDragEnd}\r\n-        onDragOver={onDragOver}\r\n-      >\r\n-        <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n-          {columns.map((col) => (\r\n-            <SortableContext key={col.id} items={tasksByStatus(col.id)}>\r\n-              <ColumnContainer\r\n-                column={col}\r\n-                tasks={tasksByStatus(col.id)}\r\n-                handleOpenTask={() => setOpen(true)}\r\n-              />\r\n-            </SortableContext>\r\n-          ))}\r\n-        </div>\r\n+        if (isActiveATask && isOverAColumn) {\r\n+            setTasks((tasks) => {\r\n+                const activeIndex = tasks.findIndex((t) => t.id === activeId);\r\n+                tasks[activeIndex].columnId = overId.toString();\r\n+                return arrayMove(tasks, activeIndex, activeIndex);\r\n+            });\r\n+        }\r\n+    }\r\n+    return (\r\n+        <>\r\n+            <div className=\"\">\r\n+                <div className=\"flex gap-2 mb-5\">\r\n+                    <div className=\"flex-1 font-medium lg:text-2xl text-xl capitalize text-default-900\">\r\n+                        {t(\"title\")}\r\n+                    </div>\r\n+                    <div className=\"flex-none\">\r\n+                        <AddBoard />\r\n+                    </div>\r\n+                </div>\r\n+                <DndContext\r\n+                    sensors={sensors}\r\n+                    onDragStart={onDragStart}\r\n+                    onDragEnd={onDragEnd}\r\n+                    onDragOver={onDragOver}\r\n+                >\r\n+                    <div className=\"flex  gap-4 overflow-x-auto no-scrollbar\">\r\n+                        <div className=\"flex gap-4\">\r\n+                            <SortableContext items={columnsId}>\r\n+                                {columns.map((col) => (\r\n+                                    <ColumnContainer\r\n+                                        key={col.id}\r\n+                                        column={col}\r\n+                                        tasks={tasks.filter((task) => task.columnId === col.id)}\r\n+                                        handleOpenTask={() => setOpen(true)}\r\n+                                    />\r\n+                                ))}\r\n+                            </SortableContext>\r\n+                        </div>\r\n+                    </div>\r\n \r\n-        {createPortal(\r\n-          <DragOverlay>\r\n-            {activeTask && (\r\n-              <TaskCard task={{ ...activeTask, type: 'Task' }} />\r\n-            )}\r\n-          </DragOverlay>,\r\n-          document.body\r\n-        )}\r\n-      </DndContext>\r\n+                    {createPortal(\r\n+                        <DragOverlay>\r\n+                            {activeColumn && (\r\n+                                <ColumnContainer\r\n+                                    column={activeColumn}\r\n+                                    handleOpenTask={() => setOpen(true)}\r\n+                                    tasks={tasks.filter((task) => task.columnId === activeColumn.id)}\r\n+                                />\r\n+                            )}\r\n+                            {activeTask && <TaskCard task={activeTask} />}\r\n+                        </DragOverlay>,\r\n+                        document.body\r\n+                    )}\r\n+                </DndContext>\r\n+            </div>\r\n+            <CreateTask\r\n+                open={open}\r\n+                setOpen={setOpen}\r\n+            />\r\n+        </>\r\n+    )\r\n \r\n-      <CreateTask open={open} setOpen={setOpen} />\r\n-    </>\r\n-  );\r\n }\r\n+\r\n+export default KanBanApp\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745005074061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +1,181 @@\n-'use client'\r\n-import React, { useState, useMemo } from 'react'\r\n-import { type Column, type Task } from './data';\r\n+'use client';\r\n+\r\n+import React, { useState, useMemo } from 'react';\r\n+import { useParams } from 'next/navigation';\r\n import {\r\n-    DndContext,\r\n-    DragEndEvent,\r\n-    DragOverEvent,\r\n-    DragOverlay,\r\n-    DragStartEvent,\r\n-    PointerSensor,\r\n-    useSensor,\r\n-    useSensors,\r\n-} from \"@dnd-kit/core\";\r\n-import { SortableContext, arrayMove } from \"@dnd-kit/sortable\";\r\n-import ColumnContainer from \"./column\"\r\n+  DndContext,\r\n+  DragEndEvent,\r\n+  DragOverEvent,\r\n+  DragOverlay,\r\n+  DragStartEvent,\r\n+  PointerSensor,\r\n+  useSensor,\r\n+  useSensors,\r\n+} from '@dnd-kit/core';\r\n+import { SortableContext, arrayMove } from '@dnd-kit/sortable';\r\n+import ColumnContainer from './column';\r\n import TaskCard from './task';\r\n-import { createPortal } from \"react-dom\";\r\n+import { createPortal } from 'react-dom';\r\n import AddBoard from './add-board';\r\n-import CreateTask from \"./create-task\";\r\n+import CreateTask from './create-task';\r\n import { useTranslations } from 'next-intl';\r\n-const KanBanApp = ({ defaultCols, defaultTasks }: { defaultCols: Column[], defaultTasks: Task[] }) => {\r\n-    const t = useTranslations(\"KanbanApp\");\r\n-    const [columns, setColumns] = useState<Column[]>(defaultCols);\r\n-    const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n+import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n \r\n-    const [tasks, setTasks] = useState<Task[]>(defaultTasks);\r\n+type Column = {\r\n+  id: string;\r\n+  title: string;\r\n+};\r\n \r\n-    const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n+type InfluenciadorKanban = {\r\n+  id: string;\r\n+  nome: string;\r\n+  imagem?: string;\r\n+  instagram: string;\r\n+  cpf: string;\r\n+  meta: number;\r\n+  atingido: number;\r\n+  status: string;\r\n+};\r\n \r\n-    const [activeTask, setActiveTask] = useState<Task | null>(null);\r\n+const defaultColumns: Column[] = [\r\n+  { id: 'novo', title: 'Novo' },\r\n+  { id: 'contato', title: 'Contato' },\r\n+  { id: 'ativo', title: 'Ativo' },\r\n+  { id: 'banido', title: 'Banido' },\r\n+];\r\n \r\n-    // create task state \r\n-    const [open, setOpen] = useState<boolean>(false);\r\n-    const sensors = useSensors(\r\n-        useSensor(PointerSensor, {\r\n-            activationConstraint: {\r\n-                distance: 10,\r\n-            },\r\n-        })\r\n-    );\r\n-    function onDragStart(event: DragStartEvent) {\r\n-        if (event.active.data.current?.type === \"Column\") {\r\n-            setActiveColumn(event.active.data.current.column);\r\n-            return;\r\n-        }\r\n+const KanBanApp = () => {\r\n+  const t = useTranslations(\"KanbanApp\");\r\n+  const params = useParams();\r\n+  const plataformaId = params?.id as string;\r\n \r\n-        if (event.active.data.current?.type === \"Task\") {\r\n-            setActiveTask(event.active.data.current.task);\r\n-            return;\r\n-        }\r\n-    }\r\n-    function onDragEnd(event: DragEndEvent) {\r\n-        setActiveColumn(null);\r\n-        setActiveTask(null);\r\n+  const [columns, setColumns] = useState<Column[]>(defaultColumns);\r\n+  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n-        const { active, over } = event;\r\n-        if (!over) return;\r\n+  const [tasks, setTasks] = useState<InfluenciadorKanban[]>(\r\n+    getInfluenciadoresBySlug(plataformaId)\r\n+  );\r\n \r\n-        const activeId = active.id;\r\n-        const overId = over.id;\r\n+  const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n+  const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n+  const [open, setOpen] = useState<boolean>(false);\r\n \r\n-        if (activeId === overId) return;\r\n+  const sensors = useSensors(\r\n+    useSensor(PointerSensor, {\r\n+      activationConstraint: {\r\n+        distance: 10,\r\n+      },\r\n+    })\r\n+  );\r\n \r\n-        const isActiveAColumn = active.data.current?.type === \"Column\";\r\n-        if (!isActiveAColumn) return;\r\n+  function onDragStart(event: DragStartEvent) {\r\n+    if (event.active.data.current?.type === 'Column') {\r\n+      setActiveColumn(event.active.data.current.column);\r\n+      return;\r\n+    }\r\n \r\n-        console.log(\"DRAG END\");\r\n-\r\n-        setColumns((columns) => {\r\n-            const activeColumnIndex = columns.findIndex((col) => col.id === activeId);\r\n-\r\n-            const overColumnIndex = columns.findIndex((col) => col.id === overId);\r\n-\r\n-            return arrayMove(columns, activeColumnIndex, overColumnIndex);\r\n-        });\r\n+    if (event.active.data.current?.type === 'Task') {\r\n+      setActiveTask(event.active.data.current.task);\r\n+      return;\r\n     }\r\n-    function onDragOver(event: DragOverEvent) {\r\n-        const { active, over } = event;\r\n-        if (!over) return;\r\n+  }\r\n \r\n-        const activeId = active.id;\r\n-        const overId = over.id;\r\n+  function onDragEnd(event: DragEndEvent) {\r\n+    setActiveColumn(null);\r\n+    setActiveTask(null);\r\n \r\n-        if (activeId === overId) return;\r\n+    const { active, over } = event;\r\n+    if (!over) return;\r\n \r\n-        const isActiveATask = active.data.current?.type === \"Task\";\r\n-        const isOverATask = over.data.current?.type === \"Task\";\r\n+    const activeId = active.id;\r\n+    const overId = over.id;\r\n \r\n-        if (!isActiveATask) return;\r\n+    if (activeId === overId) return;\r\n \r\n+    const isActiveAColumn = active.data.current?.type === 'Column';\r\n+    if (!isActiveAColumn) return;\r\n \r\n-        if (isActiveATask && isOverATask) {\r\n-            setTasks((tasks) => {\r\n-                const activeIndex = tasks.findIndex((t) => t.id === activeId);\r\n-                const overIndex = tasks.findIndex((t) => t.id === overId);\r\n+    setColumns((columns) => {\r\n+      const activeColumnIndex = columns.findIndex((col) => col.id === activeId);\r\n+      const overColumnIndex = columns.findIndex((col) => col.id === overId);\r\n\\ No newline at end of file\n+      return arrayMove(columns, activeColumnIndex, overColumnIndex);\r\n+    });\r\n+  }\r\n \r\n-                if (tasks[activeIndex].columnId != tasks[overIndex].columnId) {\r\n+  function onDragOver(event: DragOverEvent) {\r\n+    const { active, over } = event;\r\n+    if (!over) return;\r\n \r\n-                    tasks[activeIndex].columnId = tasks[overIndex].columnId;\r\n-                    return arrayMove(tasks, activeIndex, overIndex - 1);\r\n-                }\r\n+    const activeId = active.id;\r\n+    const overId = over.id;\r\n \r\n-                return arrayMove(tasks, activeIndex, overIndex);\r\n-            });\r\n-        }\r\n+    if (activeId === overId) return;\r\n \r\n-        const isOverAColumn = over.data.current?.type === \"Column\";\r\n+    const isActiveATask = active.data.current?.type === 'Task';\r\n+    const isOverATask = over.data.current?.type === 'Task';\r\n+    const isOverAColumn = over.data.current?.type === 'Column';\r\n \r\n+    if (!isActiveATask) return;\r\n \r\n-        if (isActiveATask && isOverAColumn) {\r\n-            setTasks((tasks) => {\r\n-                const activeIndex = tasks.findIndex((t) => t.id === activeId);\r\n-                tasks[activeIndex].columnId = overId.toString();\r\n-                return arrayMove(tasks, activeIndex, activeIndex);\r\n-            });\r\n-        }\r\n+    if (isOverATask || isOverAColumn) {\r\n+      setTasks((prev) =>\r\n+        prev.map((task) =>\r\n+          task.id === activeId\r\n+            ? { ...task, status: isOverATask ? over.data.current.task.status : overId }\r\n+            : task\r\n+        )\r\n+      );\r\n     }\r\n-    return (\r\n-        <>\r\n-            <div className=\"\">\r\n-                <div className=\"flex gap-2 mb-5\">\r\n-                    <div className=\"flex-1 font-medium lg:text-2xl text-xl capitalize text-default-900\">\r\n-                        {t(\"title\")}\r\n-                    </div>\r\n-                    <div className=\"flex-none\">\r\n-                        <AddBoard />\r\n-                    </div>\r\n-                </div>\r\n-                <DndContext\r\n-                    sensors={sensors}\r\n-                    onDragStart={onDragStart}\r\n-                    onDragEnd={onDragEnd}\r\n-                    onDragOver={onDragOver}\r\n-                >\r\n-                    <div className=\"flex  gap-4 overflow-x-auto no-scrollbar\">\r\n-                        <div className=\"flex gap-4\">\r\n-                            <SortableContext items={columnsId}>\r\n-                                {columns.map((col) => (\r\n-                                    <ColumnContainer\r\n-                                        key={col.id}\r\n-                                        column={col}\r\n-                                        tasks={tasks.filter((task) => task.columnId === col.id)}\r\n-                                        handleOpenTask={() => setOpen(true)}\r\n-                                    />\r\n-                                ))}\r\n-                            </SortableContext>\r\n-                        </div>\r\n-                    </div>\r\n+  }\r\n \r\n-                    {createPortal(\r\n-                        <DragOverlay>\r\n-                            {activeColumn && (\r\n-                                <ColumnContainer\r\n-                                    column={activeColumn}\r\n-                                    handleOpenTask={() => setOpen(true)}\r\n-                                    tasks={tasks.filter((task) => task.columnId === activeColumn.id)}\r\n-                                />\r\n-                            )}\r\n-                            {activeTask && <TaskCard task={activeTask} />}\r\n-                        </DragOverlay>,\r\n-                        document.body\r\n-                    )}\r\n-                </DndContext>\r\n-            </div>\r\n-            <CreateTask\r\n-                open={open}\r\n-                setOpen={setOpen}\r\n-            />\r\n-        </>\r\n-    )\r\n+  return (\r\n+    <>\r\n+      <div className=\"\">\r\n+        <div className=\"flex gap-2 mb-5\">\r\n+          <div className=\"flex-1 font-medium lg:text-2xl text-xl capitalize text-default-900\">\r\n+            {t(\"title\")}\r\n+          </div>\r\n+          <div className=\"flex-none\">\r\n+            <AddBoard />\r\n+          </div>\r\n+        </div>\r\n+        <DndContext\r\n+          sensors={sensors}\r\n+          onDragStart={onDragStart}\r\n+          onDragEnd={onDragEnd}\r\n+          onDragOver={onDragOver}\r\n+        >\r\n+          <div className=\"flex gap-4 overflow-x-auto no-scrollbar\">\r\n+            <SortableContext items={columnsId}>\r\n+              {columns.map((col) => (\r\n+                <ColumnContainer\r\n+                  key={col.id}\r\n+                  column={col}\r\n+                  tasks={tasks.filter((task) => task.status === col.id)}\r\n+                  handleOpenTask={() => setOpen(true)}\r\n+                />\r\n+              ))}\r\n+            </SortableContext>\r\n+          </div>\r\n \r\n-}\r\n+          {createPortal(\r\n+            <DragOverlay>\r\n+              {activeColumn && (\r\n+                <ColumnContainer\r\n+                  column={activeColumn}\r\n+                  handleOpenTask={() => setOpen(true)}\r\n+                  tasks={tasks.filter((task) => task.status === activeColumn.id)}\r\n+                />\r\n+              )}\r\n+              {activeTask && <TaskCard task={activeTask} />}\r\n+            </DragOverlay>,\r\n+            document.body\r\n+          )}\r\n+        </DndContext>\r\n+      </div>\r\n+      <CreateTask open={open} setOpen={setOpen} />\r\n+    </>\r\n+  );\r\n+};\r\n \r\n-export default KanBanApp\n+export default KanBanApp;\r\n"
                },
                {
                    "date": 1745005363562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,11 +131,8 @@\n   return (\r\n     <>\r\n       <div className=\"\">\r\n         <div className=\"flex gap-2 mb-5\">\r\n-          <div className=\"flex-1 font-medium lg:text-2xl text-xl capitalize text-default-900\">\r\n-            {t(\"title\")}\r\n-          </div>\r\n           <div className=\"flex-none\">\r\n             <AddBoard />\r\n           </div>\r\n         </div>\r\n@@ -177,5 +174,5 @@\n     </>\r\n   );\r\n };\r\n \r\n-export default KanBanApp;\n\\ No newline at end of file\n+export default KanBanApp;\r\n"
                },
                {
                    "date": 1745005413467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,11 +131,8 @@\n   return (\r\n     <>\r\n       <div className=\"\">\r\n         <div className=\"flex gap-2 mb-5\">\r\n-          <div className=\"flex-none\">\r\n-            <AddBoard />\r\n-          </div>\r\n         </div>\r\n         <DndContext\r\n           sensors={sensors}\r\n           onDragStart={onDragStart}\r\n"
                },
                {
                    "date": 1745007391067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n import { createPortal } from 'react-dom';\r\n import AddBoard from './add-board';\r\n import CreateTask from './create-task';\r\n import { useTranslations } from 'next-intl';\r\n-import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresKanbanBySlug } from '@/lib/influenciadores';\r\n \r\n type Column = {\r\n   id: string;\r\n   title: string;\r\n@@ -52,9 +52,9 @@\n   const [columns, setColumns] = useState<Column[]>(defaultColumns);\r\n   const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n   const [tasks, setTasks] = useState<InfluenciadorKanban[]>(\r\n-    getInfluenciadoresBySlug(plataformaId)\r\n+    getInfluenciadoresKanbanBySlug(plataformaId)\r\n   );\r\n \r\n   const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n   const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n"
                },
                {
                    "date": 1745010120279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,11 @@\n import AddBoard from './add-board';\r\n import CreateTask from './create-task';\r\n import { useTranslations } from 'next-intl';\r\n import { getInfluenciadoresKanbanBySlug } from '@/lib/influenciadores';\r\n+import { statusKanbanList } from '@/lib/influenciadores';\r\n \r\n+\r\n type Column = {\r\n   id: string;\r\n   title: string;\r\n };\r\n"
                },
                {
                    "date": 1745010321637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,22 +38,22 @@\n   atingido: number;\r\n   status: string;\r\n };\r\n \r\n-const defaultColumns: Column[] = [\r\n-  { id: 'novo', title: 'Novo' },\r\n-  { id: 'contato', title: 'Contato' },\r\n-  { id: 'ativo', title: 'Ativo' },\r\n-  { id: 'banido', title: 'Banido' },\r\n-];\r\n \r\n const KanBanApp = () => {\r\n   const t = useTranslations(\"KanbanApp\");\r\n   const params = useParams();\r\n   const plataformaId = params?.id as string;\r\n \r\n-  const [columns, setColumns] = useState<Column[]>(defaultColumns);\r\n-  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n+  const [columns, setColumns] = useState<Column[]>(\r\n+    statusKanbanList\r\n+      .filter((status) => !status.ocultoNoKanban)\r\n+      .map((status) => ({\r\n+        id: status.id,\r\n+        title: status.title,\r\n+      }))\r\n+  );  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n   const [tasks, setTasks] = useState<InfluenciadorKanban[]>(\r\n     getInfluenciadoresKanbanBySlug(plataformaId)\r\n   );\r\n"
                },
                {
                    "date": 1745117628453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n import { createPortal } from 'react-dom';\r\n import AddBoard from './add-board';\r\n import CreateTask from './create-task';\r\n import { useTranslations } from 'next-intl';\r\n-import { getInfluenciadoresKanbanBySlug } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n import { statusKanbanList } from '@/lib/influenciadores';\r\n \r\n \r\n type Column = {\r\n@@ -54,9 +54,9 @@\n       }))\r\n   );  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n   const [tasks, setTasks] = useState<InfluenciadorKanban[]>(\r\n-    getInfluenciadoresKanbanBySlug(plataformaId)\r\n+    getInfluenciadoresBySlug(plataformaId)\r\n   );\r\n \r\n   const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n   const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n"
                },
                {
                    "date": 1745118014399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,44 +18,34 @@\n import { createPortal } from 'react-dom';\r\n import AddBoard from './add-board';\r\n import CreateTask from './create-task';\r\n import { useTranslations } from 'next-intl';\r\n-import { getInfluenciadoresBySlug } from '@/lib/influenciadores';\r\n-import { statusKanbanList } from '@/lib/influenciadores';\r\n+import { getInfluenciadoresBySlug, statusKanbanList } from '@/lib/influenciadores';\r\n \r\n+// ❌ REMOVA ISSO:\r\n+// type InfluenciadorKanban = { ... }\r\n \r\n-type Column = {\r\n-  id: string;\r\n-  title: string;\r\n-};\r\n+// ✅ USE ISSO:\r\n+import type { Influenciador } from '@/lib/influenciadores';\r\n \r\n-type InfluenciadorKanban = {\r\n-  id: string;\r\n-  nome: string;\r\n-  imagem?: string;\r\n-  instagram: string;\r\n-  cpf: string;\r\n-  meta: number;\r\n-  atingido: number;\r\n-  status: string;\r\n-};\r\n-\r\n-\r\n const KanBanApp = () => {\r\n   const t = useTranslations(\"KanbanApp\");\r\n   const params = useParams();\r\n   const plataformaId = params?.id as string;\r\n \r\n-  const [columns, setColumns] = useState<Column[]>(\r\n+  const [columns, setColumns] = useState(\r\n     statusKanbanList\r\n       .filter((status) => !status.ocultoNoKanban)\r\n       .map((status) => ({\r\n         id: status.id,\r\n         title: status.title,\r\n       }))\r\n-  );  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n+  );\r\n+  \r\n+  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n-  const [tasks, setTasks] = useState<InfluenciadorKanban[]>(\r\n+  // ✅ Usando tipo completo: Influenciador\r\n+  const [tasks, setTasks] = useState<Influenciador[]>(\r\n     getInfluenciadoresBySlug(plataformaId)\r\n   );\r\n \r\n   const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n"
                },
                {
                    "date": 1745118244113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,12 @@\n \r\n // ✅ USE ISSO:\r\n import type { Influenciador } from '@/lib/influenciadores';\r\n \r\n+type Column = {\r\n+  id: string;\r\n+  title: string;\r\n+};\r\n const KanBanApp = () => {\r\n   const t = useTranslations(\"KanbanApp\");\r\n   const params = useParams();\r\n   const plataformaId = params?.id as string;\r\n@@ -48,9 +52,9 @@\n     getInfluenciadoresBySlug(plataformaId)\r\n   );\r\n \r\n   const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n-  const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n+  const [activeTask, setActiveTask] = useState<Influenciador | null>(null);\r\n   const [open, setOpen] = useState<boolean>(false);\r\n \r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n@@ -112,11 +116,10 @@\n     if (isOverATask || isOverAColumn) {\r\n       setTasks((prev) =>\r\n         prev.map((task) =>\r\n           task.id === activeId\r\n-            ? { ...task, status: isOverATask ? over.data.current.task.status : overId }\r\n-            : task\r\n-        )\r\n+            ? { ...task, status: isOverATask && over.data.current ? over.data.current.task.status : overId }\r\n+            : task        )\r\n       );\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1745127437499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,18 @@\n import { SortableContext, arrayMove } from '@dnd-kit/sortable';\r\n import ColumnContainer from './column';\r\n import TaskCard from './task';\r\n import { createPortal } from 'react-dom';\r\n-import AddBoard from './add-board';\r\n-import CreateTask from './create-task';\r\n import { useTranslations } from 'next-intl';\r\n import { getInfluenciadoresBySlug, statusKanbanList } from '@/lib/influenciadores';\r\n-\r\n-// ❌ REMOVA ISSO:\r\n-// type InfluenciadorKanban = { ... }\r\n-\r\n-// ✅ USE ISSO:\r\n import type { Influenciador } from '@/lib/influenciadores';\r\n+import InfluenciadorModal from '@/app/[locale]/(protected)/influenciadores/components/InfluenciadorModal';\r\n \r\n type Column = {\r\n   id: string;\r\n   title: string;\r\n };\r\n+\r\n const KanBanApp = () => {\r\n   const t = useTranslations(\"KanbanApp\");\r\n   const params = useParams();\r\n   const plataformaId = params?.id as string;\r\n@@ -43,20 +38,22 @@\n         id: status.id,\r\n         title: status.title,\r\n       }))\r\n   );\r\n-  \r\n+\r\n   const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n \r\n-  // ✅ Usando tipo completo: Influenciador\r\n   const [tasks, setTasks] = useState<Influenciador[]>(\r\n     getInfluenciadoresBySlug(plataformaId)\r\n   );\r\n \r\n   const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n   const [activeTask, setActiveTask] = useState<Influenciador | null>(null);\r\n-  const [open, setOpen] = useState<boolean>(false);\r\n \r\n+  // ✅ Estado do Modal\r\n+  const [modalOpen, setModalOpen] = useState(false);\r\n+  const [influenciadorSelecionado, setInfluenciadorSelecionado] = useState<Influenciador | null>(null);\r\n+\r\n   const sensors = useSensors(\r\n     useSensor(PointerSensor, {\r\n       activationConstraint: {\r\n         distance: 10,\r\n@@ -116,19 +113,23 @@\n     if (isOverATask || isOverAColumn) {\r\n       setTasks((prev) =>\r\n         prev.map((task) =>\r\n           task.id === activeId\r\n-            ? { ...task, status: isOverATask && over.data.current ? over.data.current.task.status : overId }\r\n-            : task        )\r\n+            ? {\r\n+                ...task,\r\n+                status: isOverATask && over.data.current\r\n+                  ? over.data.current.task.status\r\n+                  : overId,\r\n+              }\r\n+            : task\r\n+        )\r\n       );\r\n     }\r\n   }\r\n \r\n   return (\r\n     <>\r\n       <div className=\"\">\r\n-        <div className=\"flex gap-2 mb-5\">\r\n-        </div>\r\n         <DndContext\r\n           sensors={sensors}\r\n           onDragStart={onDragStart}\r\n           onDragEnd={onDragEnd}\r\n@@ -140,9 +141,12 @@\n                 <ColumnContainer\r\n                   key={col.id}\r\n                   column={col}\r\n                   tasks={tasks.filter((task) => task.status === col.id)}\r\n-                  handleOpenTask={() => setOpen(true)}\r\n+                  onTaskClick={(inf) => {\r\n+                    setInfluenciadorSelecionado(inf);\r\n+                    setModalOpen(true);\r\n+                  }}\r\n                 />\r\n               ))}\r\n             </SortableContext>\r\n           </div>\r\n@@ -151,9 +155,8 @@\n             <DragOverlay>\r\n               {activeColumn && (\r\n                 <ColumnContainer\r\n                   column={activeColumn}\r\n-                  handleOpenTask={() => setOpen(true)}\r\n                   tasks={tasks.filter((task) => task.status === activeColumn.id)}\r\n                 />\r\n               )}\r\n               {activeTask && <TaskCard task={activeTask} />}\r\n@@ -161,9 +164,15 @@\n             document.body\r\n           )}\r\n         </DndContext>\r\n       </div>\r\n-      <CreateTask open={open} setOpen={setOpen} />\r\n+\r\n+      {/* ✅ Modal do influenciador */}\r\n+      <InfluenciadorModal\r\n+        open={modalOpen}\r\n+        onClose={() => setModalOpen(false)}\r\n+        influenciador={influenciadorSelecionado}\r\n+      />\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1745128920773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,12 +167,18 @@\n       </div>\r\n \r\n       {/* ✅ Modal do influenciador */}\r\n       <InfluenciadorModal\r\n-        open={modalOpen}\r\n-        onClose={() => setModalOpen(false)}\r\n-        influenciador={influenciadorSelecionado}\r\n-      />\r\n+  open={modalOpen}\r\n+  onClose={() => setModalOpen(false)}\r\n+  influenciador={influenciadorSelecionado}\r\n+  onUpdate={(updated) => {\r\n+    setTasks((prev) =>\r\n+      prev.map((task) => (task.id === updated.id ? updated : task))\r\n+    );\r\n+    setModalOpen(false);\r\n+  }}\r\n+/>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1745129185022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,19 +167,17 @@\n       </div>\r\n \r\n       {/* ✅ Modal do influenciador */}\r\n       <InfluenciadorModal\r\n-  open={modalOpen}\r\n-  onClose={() => setModalOpen(false)}\r\n-  influenciador={influenciadorSelecionado}\r\n-  onUpdate={(updated) => {\r\n-    setTasks((prev) =>\r\n-      prev.map((task) => (task.id === updated.id ? updated : task))\r\n-    );\r\n-    setModalOpen(false);\r\n-  }}\r\n-/>\r\n+        open={modalOpen}\r\n+        onClose={() => setModalOpen(false)}\r\n+        influenciador={influenciadorSelecionado}\r\n+        onUpdate={(atualizado) => {\r\n+          setTasks((prev) =>\r\n+            prev.map((i) => (i.id === atualizado.id ? atualizado : i))\r\n+          );\r\n+        }}\r\n+      />\r\n     </>\r\n   );\r\n };\r\n-\r\n export default KanBanApp;\r\n"
                }
            ],
            "date": 1745001915639,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useParams } from 'next/navigation';\r\nimport { useMemo } from 'react';\r\nimport { columns, gerarInfluenciadoresKanban } from './data';\r\nimport { influenciadores } from '@/lib/influenciadores';\r\nimport ColumnContainer from './column';\r\n\r\nexport default function KanbanApp() {\r\n  const params = useParams();\r\n  const plataformaSlug = params?.id as string;\r\n\r\n  const tasks = useMemo(() => {\r\n    return gerarInfluenciadoresKanban(influenciadores, plataformaSlug);\r\n  }, [plataformaSlug]);\r\n\r\n  return (\r\n    <div className=\"flex gap-4 overflow-x-auto no-scrollbar p-2\">\r\n      {columns.map((col) => (\r\n        <ColumnContainer\r\n          key={col.id}\r\n          column={col}\r\n          tasks={tasks.filter((t) => t.columnId === col.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}