{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/kanban/task.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1745865854778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745865884265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n         </CardHeader>\r\n \r\n         <CardContent className=\"text-xs text-muted-foreground space-y-1\">\r\n \r\n-          {/* Tipo de meta */}\r\n+          Tipo de meta\r\n           <p className=\"font-bold\">\r\n             {\" \"}\r\n             {task.tipo === \"valor\" ? \" Meta por Recarga (R$)\" : \"Meta por Depositantes\"}\r\n           </p>\r\n"
                },
                {
                    "date": 1745879235116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\n \r\n import { Instagram, MoreVertical, AlertCircle } from \"lucide-react\";\r\n import DeleteConfirmationDialog from \"@/components/delete-confirmation-dialog\";\r\n+import MotivoBanimentoDialog from '@/components/MotivoBanimentoDialog'; // importa\r\n \r\n+\r\n type InfluenciadorKanban = {\r\n   id: string;\r\n   nome: string;\r\n   imagem?: string;\r\n@@ -49,9 +51,30 @@\n       type: \"Task\",\r\n       task,\r\n     },\r\n   });\r\n-\r\n+  const [openMotivo, setOpenMotivo] = useState(false);\r\n+  async function handleBanir(motivo: string) {\r\n+    try {\r\n+      const response = await fetch(`/api/influenciadores/${task.id}`, {\r\n+        method: \"PATCH\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify({\r\n+          status: \"banido\",\r\n+          motivo_banimento: motivo,\r\n+        }),\r\n+      });\r\n+  \r\n+      if (!response.ok) throw new Error(\"Erro ao banir influenciador.\");\r\n+  \r\n+      console.log(\"Influenciador banido com sucesso!\");\r\n+      // Se quiser, for√ßa um reload aqui\r\n+      // ou chama um onUpdate para atualizar a tela\r\n+    } catch (error) {\r\n+      console.error(error);\r\n+    }\r\n+  }\r\n+  \r\n   const style = {\r\n     transition,\r\n     transform: CSS.Transform.toString(transform),\r\n   };\r\n@@ -66,8 +89,13 @@\n \r\n   return (\r\n     <>\r\n       <DeleteConfirmationDialog open={open} onClose={() => setOpen(false)} />\r\n+      <MotivoBanimentoDialog\r\n+      open={openMotivo}\r\n+      onClose={() => setOpenMotivo(false)}\r\n+      onConfirm={handleBanir}\r\n+    />\r\n \r\n       <Card\r\n         ref={setNodeRef}\r\n         style={style}\r\n@@ -97,36 +125,37 @@\n             </a>\r\n           </div>\r\n \r\n           <DropdownMenu>\r\n-            <DropdownMenuTrigger asChild>\r\n-              <Button\r\n-                size=\"icon\"\r\n-                className=\"bg-transparent hover:bg-transparent hover:ring-0 hover:ring-transparent w-6\"\r\n-                onClick={(e) => e.stopPropagation()}\r\n-              >\r\n-                <MoreVertical className=\"h-4 w-4 text-default-900\" />\r\n-              </Button>\r\n-            </DropdownMenuTrigger>\r\n-            <DropdownMenuContent className=\"p-0 overflow-hidden\" align=\"end\">\r\n-              <DropdownMenuItem\r\n-                className=\"py-2 bg-destructive/30 text-destructive focus:bg-destructive focus:text-destructive-foreground rounded-none cursor-pointer\"\r\n-                onClick={() => setOpen(true)}\r\n-              >\r\n-                <AlertCircle className=\"w-3.5 h-3.5 me-1\" />\r\n-                Banir\r\n-              </DropdownMenuItem>\r\n-            </DropdownMenuContent>\r\n-          </DropdownMenu>\r\n+      <DropdownMenuTrigger asChild>\r\n+        <Button\r\n+          size=\"icon\"\r\n+          className=\"bg-transparent hover:bg-transparent hover:ring-0 hover:ring-transparent w-6\"\r\n+          onClick={(e) => e.stopPropagation()}\r\n+        >\r\n+          <MoreVertical className=\"h-4 w-4 text-default-900\" />\r\n+        </Button>\r\n+      </DropdownMenuTrigger>\r\n+\r\n+      <DropdownMenuContent className=\"p-0 overflow-hidden\" align=\"end\">\r\n+        <DropdownMenuItem\r\n+          className=\"py-2 bg-destructive/30 text-destructive focus:bg-destructive focus:text-destructive-foreground rounded-none cursor-pointer\"\r\n+          onClick={() => setOpenMotivo(true)} // üëà abrir o motivo\r\n+        >\r\n+          <AlertCircle className=\"w-3.5 h-3.5 me-1\" />\r\n+          Banir\r\n+        </DropdownMenuItem>\r\n+      </DropdownMenuContent>\r\n+    </DropdownMenu>\r\n         </CardHeader>\r\n \r\n         <CardContent className=\"text-xs text-muted-foreground space-y-1\">\r\n \r\n-          Tipo de meta\r\n-          <p className=\"font-bold\">\r\n+          {/* Tipo de meta */}\r\n+          {/* <p className=\"font-bold\">\r\n             {\" \"}\r\n             {task.tipo === \"valor\" ? \" Meta por Recarga (R$)\" : \"Meta por Depositantes\"}\r\n-          </p>\r\n+          </p> */}\r\n \r\n           {/* Meta */}\r\n           <p>\r\n           {task.meta ? (\r\n"
                },
                {
                    "date": 1745879266857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n \r\n type Props = {\r\n   task: InfluenciadorKanban;\r\n   onClick?: () => void;\r\n+  onBanido?: () => void; // adiciona isso\r\n };\r\n \r\n function TaskCard({ task, onClick }: Props) {\r\n   const [open, setOpen] = useState(false);\r\n@@ -66,15 +67,19 @@\n   \r\n       if (!response.ok) throw new Error(\"Erro ao banir influenciador.\");\r\n   \r\n       console.log(\"Influenciador banido com sucesso!\");\r\n-      // Se quiser, for√ßa um reload aqui\r\n-      // ou chama um onUpdate para atualizar a tela\r\n+  \r\n+      // Aqui: chama o pai pra atualizar\r\n+      if (onBanido) {\r\n+        onBanido();\r\n+      }\r\n     } catch (error) {\r\n       console.error(error);\r\n     }\r\n   }\r\n   \r\n+  \r\n   const style = {\r\n     transition,\r\n     transform: CSS.Transform.toString(transform),\r\n   };\r\n"
                },
                {
                    "date": 1745879313855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   onClick?: () => void;\r\n   onBanido?: () => void; // adiciona isso\r\n };\r\n \r\n-function TaskCard({ task, onClick }: Props) {\r\n+function TaskCard({ task, onClick, onBanido }: Props) {\r\n   const [open, setOpen] = useState(false);\r\n \r\n   const {\r\n     setNodeRef,\r\n"
                },
                {
                    "date": 1745879384940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,10 +143,12 @@\n \r\n       <DropdownMenuContent className=\"p-0 overflow-hidden\" align=\"end\">\r\n         <DropdownMenuItem\r\n           className=\"py-2 bg-destructive/30 text-destructive focus:bg-destructive focus:text-destructive-foreground rounded-none cursor-pointer\"\r\n-          onClick={() => setOpenMotivo(true)} // üëà abrir o motivo\r\n-        >\r\n+          onClick={(e) => {\r\n+            e.stopPropagation(); // üî• impede que o Card abra\r\n+            setOpenMotivo(true);\r\n+          }}        >\r\n           <AlertCircle className=\"w-3.5 h-3.5 me-1\" />\r\n           Banir\r\n         </DropdownMenuItem>\r\n       </DropdownMenuContent>\r\n"
                }
            ],
            "date": 1745865854778,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\n\r\nimport { Instagram, MoreVertical, AlertCircle } from \"lucide-react\";\r\nimport DeleteConfirmationDialog from \"@/components/delete-confirmation-dialog\";\r\n\r\ntype InfluenciadorKanban = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  instagram: string;\r\n  cpf: string;\r\n  meta: number;\r\n  atingido: number;\r\n  reembolso: number;\r\n  status: string;\r\n  tipo: \"valor\" | \"depositantes\";\r\n  status_meta: \"completo\" | \"incompleto\" | \"indefinido\";\r\n};\r\n\r\ntype Props = {\r\n  task: InfluenciadorKanban;\r\n  onClick?: () => void;\r\n};\r\n\r\nfunction TaskCard({ task, onClick }: Props) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const {\r\n    setNodeRef,\r\n    attributes,\r\n    listeners,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({\r\n    id: task.id,\r\n    data: {\r\n      type: \"Task\",\r\n      task,\r\n    },\r\n  });\r\n\r\n  const style = {\r\n    transition,\r\n    transform: CSS.Transform.toString(transform),\r\n  };\r\n\r\n  const handle = task.instagram\r\n    .replace(/^@/, '')\r\n    .replace(/^https?:\\/\\/(www\\.)?instagram\\.com\\//, '');\r\n    \r\n  const instagramUrl = task.instagram.startsWith('http')\r\n    ? task.instagram\r\n    : `https://instagram.com/${handle}`;\r\n\r\n  return (\r\n    <>\r\n      <DeleteConfirmationDialog open={open} onClose={() => setOpen(false)} />\r\n\r\n      <Card\r\n        ref={setNodeRef}\r\n        style={style}\r\n        onClick={onClick}\r\n        {...attributes}\r\n        {...listeners}\r\n        className={cn(\"shadow cursor-pointer\", {\r\n          \"opacity-20 bg-primary/20\": isDragging,\r\n        })}\r\n      >\r\n        <CardHeader className=\"flex-row items-center gap-3 pb-2\">\r\n          <Avatar className=\"h-10 w-10\">\r\n            <AvatarImage src={task.imagem} />\r\n            <AvatarFallback>{task.nome.charAt(0)}</AvatarFallback>\r\n          </Avatar>\r\n          <div className=\"flex-1\">\r\n            <p className=\"font-semibold text-sm truncate\">{task.nome}</p>\r\n            <a\r\n              href={instagramUrl}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              onClick={(e) => e.stopPropagation()}\r\n              className=\"flex items-center gap-1 text-xs text-muted-foreground hover:underline\"\r\n            >\r\n              <Instagram className=\"w-3 h-3 text-pink-600\" />\r\n              @{handle}\r\n            </a>\r\n          </div>\r\n\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button\r\n                size=\"icon\"\r\n                className=\"bg-transparent hover:bg-transparent hover:ring-0 hover:ring-transparent w-6\"\r\n                onClick={(e) => e.stopPropagation()}\r\n              >\r\n                <MoreVertical className=\"h-4 w-4 text-default-900\" />\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent className=\"p-0 overflow-hidden\" align=\"end\">\r\n              <DropdownMenuItem\r\n                className=\"py-2 bg-destructive/30 text-destructive focus:bg-destructive focus:text-destructive-foreground rounded-none cursor-pointer\"\r\n                onClick={() => setOpen(true)}\r\n              >\r\n                <AlertCircle className=\"w-3.5 h-3.5 me-1\" />\r\n                Banir\r\n              </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"text-xs text-muted-foreground space-y-1\">\r\n\r\n          {/* Tipo de meta */}\r\n          <p className=\"font-bold\">\r\n            {\" \"}\r\n            {task.tipo === \"valor\" ? \" Meta por Recarga (R$)\" : \"Meta por Depositantes\"}\r\n          </p>\r\n\r\n          {/* Meta */}\r\n          <p>\r\n          {task.meta ? (\r\n  <p>\r\n    <span className=\"font-medium\">Meta: </span>\r\n    {task.tipo === \"valor\"\r\n      ? `R$ ${Number(task.meta).toLocaleString(\"pt-BR\")}`\r\n      : `${task.meta}`}\r\n  </p>\r\n) : (\r\n  <p>\r\n    <span className=\"font-medium\">Meta: </span>\r\n    <span className=\"italic\">N√£o definida</span>\r\n  </p>\r\n)}\r\n\r\n\r\n</p>\r\n\r\n\r\n\r\n          {/* Atingido */}\r\n          <p>\r\n          {task.atingido ? (\r\n  <p>\r\n    <span className=\"font-medium\">Atingido: </span>\r\n    {task.tipo === \"valor\"\r\n      ? `R$ ${Number(task.atingido).toLocaleString(\"pt-BR\")}`\r\n      : `${task.atingido}`}\r\n  </p>\r\n) : (\r\n  <p>\r\n    <span className=\"font-medium\">Atingido: </span>\r\n    <span className=\"italic\">N√£o definido</span>\r\n  </p>\r\n)}\r\n\r\n</p>\r\n\r\n\r\n\r\n          {/* Reembolso */}\r\n          <p>\r\n          {task.reembolso !== undefined ? (\r\n  <p>\r\n    <span className=\"font-medium\">Reembolso: </span>\r\n    <span className={task.reembolso > 0 ? 'text-red-600 font-medium' : 'text-green-600'}>\r\n      {`R$ ${Number(task.reembolso).toLocaleString('pt-BR')}`}\r\n    </span>\r\n  </p>\r\n) : (\r\n  <p>\r\n    <span className=\"font-medium\">Reembolso: </span>\r\n    <span className=\"italic\">N√£o definido</span>\r\n  </p>\r\n)}\r\n\r\n</p>\r\n\r\n\r\n\r\n          {/* Status meta */}\r\n          <div\r\n            className={cn(\r\n              \"inline-flex items-center gap-2 px-2 py-1 rounded-full text-xs font-medium border whitespace-nowrap transition\",\r\n              task.status_meta === \"indefinido\"\r\n                ? \"bg-muted text-muted-foreground\"\r\n                : task.status_meta === \"completo\"\r\n                ? \"bg-green-500 text-white\"\r\n                : \"bg-yellow-400 text-yellow-900\"\r\n            )}\r\n          >\r\n            {task.status_meta === \"indefinido\"\r\n              ? \"Meta indefinida\"\r\n              : task.status_meta === \"completo\"\r\n              ? \"Meta Batida\"\r\n              : \"Meta Pendente\"}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskCard;\r\n"
        }
    ]
}