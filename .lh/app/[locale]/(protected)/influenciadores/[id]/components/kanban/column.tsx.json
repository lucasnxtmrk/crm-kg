{
    "sourceFile": "app/[locale]/(protected)/influenciadores/[id]/components/kanban/column.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745866469659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745866484793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,59 +71,58 @@\n         open={deleteColumn}\r\n         onClose={() => setDeleteColumn(false)}\r\n       />\r\n \r\n-<Card\r\n-  ref={setNodeRef}\r\n-  style={style}\r\n-  className={cn(\r\n-    \"flex flex-col w-[280px] bg-default-200 shadow-none rounded-md h-[600px]\", // ðŸ‘ˆ Altura da coluna definida aqui\r\n-    {\r\n-      \"opacity-20\": isDragging,\r\n-    }\r\n-  )}\r\n->\r\n-  {/* Header fixo */}\r\n-  <CardHeader\r\n-    className=\"flex-none bg-card relative rounded-t-md py-4\"\r\n-    {...attributes}\r\n-    {...listeners}\r\n-  >\r\n-    <div className=\"flex items-center gap-2\">\r\n-      <div className=\"flex-1 text-lg capitalize text-default-900 font-medium\">\r\n-        {column.title}\r\n-      </div>\r\n+      <Card\r\n+        ref={setNodeRef}\r\n+        style={style}\r\n+        className={cn(\r\n+          \"flex-1 w-[280px] bg-default-200 shadow-none app-height flex flex-col relative\",\r\n+          {\r\n+            \"opacity-20\": isDragging,\r\n+          }\r\n+        )}\r\n+      >\r\n+        <CardHeader\r\n+          className=\"flex-none bg-card relative rounded-t-md py-4\"\r\n+          {...attributes}\r\n+          {...listeners}\r\n+        >\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <div className=\"flex-1 text-lg capitalize text-default-900 font-medium\">\r\n+              {column.title}\r\n+            </div>\r\n \r\n-      <TooltipProvider>\r\n-        <Tooltip>\r\n-          <TooltipTrigger asChild>\r\n-            <Button\r\n-              size=\"icon\"\r\n-              className=\"w-6 h-6 bg-transparent ring-offset-transparent hover:bg-transparent border border-default-200 text-default-600 hover:ring-0 hover:ring-transparent\"\r\n-              onClick={() => setIsModalOpen(true)}\r\n-            >\r\n-              <Plus className=\"w-4 h-4\" />\r\n-            </Button>\r\n-          </TooltipTrigger>\r\n-          <TooltipContent>\r\n-            <p>Adicionar Influenciador</p>\r\n-          </TooltipContent>\r\n-        </Tooltip>\r\n-      </TooltipProvider>\r\n-    </div>\r\n-  </CardHeader>\r\n+            <TooltipProvider>\r\n+              <Tooltip>\r\n+                <TooltipTrigger asChild>\r\n+                  <Button\r\n+                    size=\"icon\"\r\n+                    className=\"w-6 h-6 bg-transparent ring-offset-transparent hover:bg-transparent border border-default-200 text-default-600 hover:ring-0 hover:ring-transparent\"\r\n+                    onClick={() => setIsModalOpen(true)}\r\n+                  >\r\n+                    <Plus className=\"w-4 h-4\" />\r\n+                  </Button>\r\n+                </TooltipTrigger>\r\n+                <TooltipContent>\r\n+                  <p>Adicionar Influenciador</p>\r\n+                </TooltipContent>\r\n+              </Tooltip>\r\n+            </TooltipProvider>\r\n+          </div>\r\n+        </CardHeader>\r\n \r\n-  {/* Tasks que rolam */}\r\n-  <CardContent className=\"flex-1 overflow-y-auto px-3.5 pt-6 space-y-6 no-scrollbar\">\r\n-    {tasks.length === 0 && <EmptyTask />}\r\n-    <SortableContext items={tasksIds}>\r\n-      {tasks.map((task) => (\r\n-        <TaskCard key={task.id} task={task} onClick={() => onTaskClick(task)} />\r\n-      ))}\r\n-    </SortableContext>\r\n-  </CardContent>\r\n-</Card>\r\n-\r\n+        <CardContent className=\"flex-1 pt-6 px-3.5 h-full overflow-y-auto no-scrollbar\">\r\n+          <div className=\"space-y-6\">\r\n+            {tasks.length === 0 && <EmptyTask />}\r\n+            <SortableContext items={tasksIds}>\r\n+              {tasks.map((task) => (\r\n+                <TaskCard key={task.id} task={task} onClick={() => onTaskClick(task)} />\r\n+              ))}\r\n+            </SortableContext>\r\n+          </div>\r\n+        </CardContent>\r\n+      </Card>\r\n       <NewInfluenciadorModal\r\n   open={isModalOpen}\r\n   onClose={() => setIsModalOpen(false)}\r\n   plataformaId={'o-id-ou-slug-dessa-plataforma'}\r\n"
                },
                {
                    "date": 1745866492806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       <Card\r\n         ref={setNodeRef}\r\n         style={style}\r\n         className={cn(\r\n-          \"flex-1 w-[280px] bg-default-200 shadow-none app-height flex flex-col relative\",\r\n+          \"flex-1 w-[180px] bg-default-200 shadow-none app-height flex flex-col relative\",\r\n           {\r\n             \"opacity-20\": isDragging,\r\n           }\r\n         )}\r\n"
                },
                {
                    "date": 1745866499082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       <Card\r\n         ref={setNodeRef}\r\n         style={style}\r\n         className={cn(\r\n-          \"flex-1 w-[180px] bg-default-200 shadow-none app-height flex flex-col relative\",\r\n+          \"flex-1 w-[280px] bg-default-200 shadow-none app-height flex flex-col relative\",\r\n           {\r\n             \"opacity-20\": isDragging,\r\n           }\r\n         )}\r\n"
                }
            ],
            "date": 1745866469659,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState, useMemo } from \"react\";\r\nimport { SortableContext, useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport DeleteConfirmationDialog from \"@/components/delete-confirmation-dialog\";\r\nimport EmptyTask from \"./empty\";\r\nimport TaskCard from \"./task\";\r\nimport NewInfluenciadorModal from '@/components/NewInfluenciadorModal';\r\nimport { Plus } from \"lucide-react\";\r\n\r\ntype Column = {\r\n  id: string;\r\n  title: string;\r\n};\r\n\r\ntype InfluenciadorKanban = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  instagram: string;\r\n  cpf: string;\r\n  meta: number;\r\n  atingido: number;\r\n  status: string;\r\n};\r\n\r\ntype Props = {\r\n  column: Column;\r\n  tasks: InfluenciadorKanban[];\r\n  onTaskClick: (task: InfluenciadorKanban) => void;\r\n};\r\n\r\nfunction ColumnContainer({ column, tasks, onTaskClick }: Props) {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [deleteColumn, setDeleteColumn] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const tasksIds = useMemo(() => tasks.map((task) => task.id), [tasks]);\r\n\r\n  const {\r\n    setNodeRef,\r\n    attributes,\r\n    listeners,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({\r\n    id: column.id,\r\n    data: {\r\n      type: \"Column\",\r\n      column,\r\n    },\r\n    disabled: editMode,\r\n  });\r\n\r\n  const style = {\r\n    transition,\r\n    transform: CSS.Transform.toString(transform),\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DeleteConfirmationDialog\r\n        open={deleteColumn}\r\n        onClose={() => setDeleteColumn(false)}\r\n      />\r\n\r\n<Card\r\n  ref={setNodeRef}\r\n  style={style}\r\n  className={cn(\r\n    \"flex flex-col w-[280px] bg-default-200 shadow-none rounded-md h-[600px]\", // ðŸ‘ˆ Altura da coluna definida aqui\r\n    {\r\n      \"opacity-20\": isDragging,\r\n    }\r\n  )}\r\n>\r\n  {/* Header fixo */}\r\n  <CardHeader\r\n    className=\"flex-none bg-card relative rounded-t-md py-4\"\r\n    {...attributes}\r\n    {...listeners}\r\n  >\r\n    <div className=\"flex items-center gap-2\">\r\n      <div className=\"flex-1 text-lg capitalize text-default-900 font-medium\">\r\n        {column.title}\r\n      </div>\r\n\r\n      <TooltipProvider>\r\n        <Tooltip>\r\n          <TooltipTrigger asChild>\r\n            <Button\r\n              size=\"icon\"\r\n              className=\"w-6 h-6 bg-transparent ring-offset-transparent hover:bg-transparent border border-default-200 text-default-600 hover:ring-0 hover:ring-transparent\"\r\n              onClick={() => setIsModalOpen(true)}\r\n            >\r\n              <Plus className=\"w-4 h-4\" />\r\n            </Button>\r\n          </TooltipTrigger>\r\n          <TooltipContent>\r\n            <p>Adicionar Influenciador</p>\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n    </div>\r\n  </CardHeader>\r\n\r\n  {/* Tasks que rolam */}\r\n  <CardContent className=\"flex-1 overflow-y-auto px-3.5 pt-6 space-y-6 no-scrollbar\">\r\n    {tasks.length === 0 && <EmptyTask />}\r\n    <SortableContext items={tasksIds}>\r\n      {tasks.map((task) => (\r\n        <TaskCard key={task.id} task={task} onClick={() => onTaskClick(task)} />\r\n      ))}\r\n    </SortableContext>\r\n  </CardContent>\r\n</Card>\r\n\r\n      <NewInfluenciadorModal\r\n  open={isModalOpen}\r\n  onClose={() => setIsModalOpen(false)}\r\n  plataformaId={'o-id-ou-slug-dessa-plataforma'}\r\n/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ColumnContainer;\r\n"
        }
    ]
}