{
    "sourceFile": "app/[locale]/(protected)/influenciadores/plataformas/[plataformaId]/components/kanban/kanban-app.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746142570870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746142570870,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { useParams } from 'next/navigation';\r\nimport {\r\n  DndContext,\r\n  DragEndEvent,\r\n  DragOverEvent,\r\n  DragOverlay,\r\n  DragStartEvent,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from '@dnd-kit/core';\r\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\r\nimport ColumnContainer from './column';\r\nimport TaskCard from './task';\r\nimport { createPortal } from 'react-dom';\r\nimport { useTranslations } from 'next-intl';\r\nimport InfluenciadorModal from '@/components/InfluenciadorModal';\r\nimport { statusKanbanList, Recarga } from '@/lib/types';\r\nimport { Influenciador } from '@/lib/types';\r\nimport { useInfluenciadores } from '@/hooks/useInfluenciadores';\r\n\r\ntype Column = {\r\n  id: string;\r\n  title: string;\r\n};\r\n\r\ntype InfluenciadorKanban = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  instagram: string;\r\n  cpf: string;\r\n  meta: number;\r\n  atingido: number;\r\n  status: string;\r\n  reembolso: number;\r\n  tipo: \"valor\" | \"depositantes\";\r\n  status_meta: \"completo\" | \"incompleto\" | \"indefinido\";\r\n};\r\n\r\nconst KanBanApp = () => {\r\n  const t = useTranslations(\"KanbanApp\");\r\n  const params = useParams();\r\n  const { plataformaId } = useParams() as { plataformaId: string };\r\n\r\n  const { influenciadores, loading, refetch } = useInfluenciadores();\r\n\r\n  const [columns, setColumns] = useState(\r\n    statusKanbanList\r\n      .filter((status) => !status.ocultoNoKanban)\r\n      .map((status) => ({ id: status.id, title: status.title }))\r\n  );\r\n\r\n  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n\r\n  const influenciadoresKanban = useMemo(() => {\r\n    return influenciadores.filter((inf) =>\r\n      inf.cadastros_influenciadores?.some((cad) => cad.plataforma_id === plataformaId)\r\n    );\r\n  }, [influenciadores, plataformaId]);\r\n\r\n  const tasks = useMemo(() => {\r\n    return influenciadoresKanban.map((inf) => {\r\n      const hoje = new Date();\r\n      const recsDaPlataforma = inf.cadastros_influenciadores\r\n        ?.filter((c) => c.plataforma_id === plataformaId)\r\n        .flatMap((cad) => cad.recargas) || [];\r\n  \r\n      const ativas = recsDaPlataforma.filter((r) => new Date(r.termino) >= hoje);\r\n      const dados = ativas.length > 0 ? ativas : recsDaPlataforma.slice(-1);\r\n  \r\n      const ultimaRecarga = dados.length > 0 ? dados[dados.length - 1] : undefined;\r\n  \r\n      const metaTotal = dados.reduce((acc, r) => acc + (r.tipo === \"valor\" ? Number(r.meta) : r.depositantes_meta || 0), 0);\r\n      const atingidoTotal = dados.reduce((acc, r) => acc + (r.tipo === \"valor\" ? Number(r.atingido) : r.depositantes_atingido || 0), 0);\r\n  \r\n      const reembolsoTotal = recsDaPlataforma\r\n        .filter(r => \r\n          new Date(r.termino) >= hoje && \r\n          r.reembolso_status === \"pendente\"\r\n        )\r\n        .reduce((acc, r) => acc + Number(r.reembolso || 0), 0);\r\n  \r\n      return {\r\n        id: inf.id,\r\n        nome: inf.nome,\r\n        imagem: inf.imagem,\r\n        instagram: inf.instagram,\r\n        cpf: inf.cpf,\r\n        status: inf.status,\r\n        meta: metaTotal,\r\n        atingido: atingidoTotal,\r\n        reembolso: reembolsoTotal,\r\n        tipo: ultimaRecarga?.tipo || \"valor\",\r\n        status_meta: ultimaRecarga?.status_meta || \"indefinido\",\r\n      };\r\n    });\r\n  }, [influenciadoresKanban, plataformaId]);\r\n  \r\n  \r\n\r\n  const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n  const [activeTask, setActiveTask] = useState<InfluenciadorKanban | null>(null);\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [influenciadorSelecionado, setInfluenciadorSelecionado] = useState<Influenciador | null>(null);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor, {\r\n      activationConstraint: {\r\n        distance: 10,\r\n      },\r\n    })\r\n  );\r\n\r\n  function onDragStart(event: DragStartEvent) {\r\n    if (event.active.data.current?.type === 'Column') {\r\n      setActiveColumn(event.active.data.current.column);\r\n      return;\r\n    }\r\n\r\n    if (event.active.data.current?.type === 'Task') {\r\n      setActiveTask(event.active.data.current.task);\r\n      return;\r\n    }\r\n  }\r\n\r\n  function onDragEnd(event: DragEndEvent) {\r\n    setActiveColumn(null);\r\n    setActiveTask(null);\r\n\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    const activeId = active.id;\r\n    const overId = over.id;\r\n    if (activeId === overId) return;\r\n\r\n    const isActiveAColumn = active.data.current?.type === 'Column';\r\n    if (!isActiveAColumn) return;\r\n\r\n    setColumns((columns) => {\r\n      const activeColumnIndex = columns.findIndex((col) => col.id === activeId);\r\n      const overColumnIndex = columns.findIndex((col) => col.id === overId);\r\n      return arrayMove(columns, activeColumnIndex, overColumnIndex);\r\n    });\r\n  }\r\n\r\n  function onDragOver(event: DragOverEvent) {\r\n    // NÃ£o precisa fazer nada por enquanto\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"pb-4 pr-4 pl-4\">\r\n        <DndContext\r\n          sensors={sensors}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n          onDragOver={onDragOver}\r\n        >\r\n<div className=\"flex gap-4 overflow-x-auto no-scrollbar\">\r\n<SortableContext items={columnsId}>\r\n              {columns.map((col) => (\r\n                <ColumnContainer\r\n                  key={col.id}\r\n                  column={col}\r\n                  tasks={tasks.filter((task) => task.status === col.id)}\r\n                  onTaskClick={(inf) => {\r\n                    const completo = influenciadores.find((i) => i.id === inf.id);\r\n                    if (completo) {\r\n                      setInfluenciadorSelecionado(completo);\r\n                      setModalOpen(true);\r\n                    }\r\n                  }}\r\n                />\r\n              ))}\r\n            </SortableContext>\r\n          </div>\r\n\r\n          {createPortal(\r\n            <DragOverlay>\r\n              {activeColumn && (\r\n                <ColumnContainer\r\n                  column={activeColumn}\r\n                  tasks={tasks.filter((task) => task.status === activeColumn.id)}\r\n                  onTaskClick={() => {}}\r\n                />\r\n              )}\r\n              {activeTask && <TaskCard task={activeTask} />}\r\n            </DragOverlay>,\r\n            document.body\r\n          )}\r\n        </DndContext>\r\n      </div>\r\n\r\n      <InfluenciadorModal\r\n        open={modalOpen}\r\n        onClose={() => setModalOpen(false)}\r\n        influenciador={influenciadorSelecionado}\r\n        onUpdate={async (updated) => {\r\n          await refetch(); // ðŸ”¥ Atualiza os influenciadores\r\n          const atualizado = influenciadores.find((i) => i.id === updated.id);\r\n          if (atualizado) {\r\n            setInfluenciadorSelecionado(atualizado);\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KanBanApp;\r\n"
        }
    ]
}