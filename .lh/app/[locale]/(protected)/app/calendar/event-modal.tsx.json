{
    "sourceFile": "app/[locale]/(protected)/app/calendar/event-modal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744234273031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744234273031,
            "name": "Commit-0",
            "content": "\"use client\"\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { cn, } from \"@/lib/utils\";\nimport { format } from \"date-fns\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2, CalendarIcon } from \"lucide-react\";\nimport DeleteConfirmationDialog from \"@/components/delete-confirmation-dialog\";\nimport { CalendarCategory } from \"./data\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst schema = z.object({\n  title: z.string().min(3, { message: \"Required\" }),\n});\n\nconst EventModal = ({ open, onClose, categories, event, selectedDate }: {\n  open: boolean;\n  onClose: () => void;\n  categories: any;\n  event: any;\n  selectedDate: any\n}) => {\n  const [startDate, setStartDate] = useState<Date>(new Date());\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [isPending, startTransition] = React.useTransition();\n  const [calendarProps, setCalendarProps] = React.useState<any>(categories[0].value);\n  // delete modal state\n  const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\n  const [eventIdToDelete, setEventIdToDelete] = useState<string | null>(null);\n\n  const {\n    register,\n    control,\n    reset,\n    setValue,\n    formState: { errors },\n    handleSubmit,\n  } = useForm({\n    resolver: zodResolver(schema),\n    mode: \"all\",\n  });\n\n  const onSubmit = (data: any) => {\n    startTransition(async () => {\n      if (!event) {\n        data.start = startDate;\n        data.end = endDate;\n        data.allDay = false;\n        data.extendedProps = {\n          calendar: calendarProps,\n        };\n      }\n      if (event) {\n      }\n    });\n  };\n  useEffect(() => {\n    if (selectedDate) {\n      setStartDate(selectedDate.date);\n      setEndDate(selectedDate.date);\n    }\n    if (event) {\n      setStartDate(event?.event?.start);\n      setEndDate(event?.event?.end);\n      const eventCalendar = event?.event?.extendedProps?.calendar;\n      if (eventCalendar) {\n        setCalendarProps(eventCalendar);\n      } else {\n        setCalendarProps(categories[0].value);\n      }\n    }\n    setValue(\"title\", event?.event?.title || \"\");\n  }, [event, selectedDate, open, categories, setValue]);\n\n  const onDeleteEventAction = async () => {\n    try {\n\n    } catch (error) {\n\n    }\n  };\n\n  const handleOpenDeleteModal = (eventId: string) => {\n    setEventIdToDelete(eventId);\n    setDeleteModalOpen(true);\n    onClose();\n  };\n\n  return (\n    <>\n      <DeleteConfirmationDialog\n        open={deleteModalOpen}\n        onClose={() => setDeleteModalOpen(false)}\n        onConfirm={onDeleteEventAction}\n        defaultToast={false}\n      />\n      <Dialog open={open} onOpenChange={onClose}>\n        <DialogContent\n          onPointerDownOutside={onClose}\n        >\n          <DialogHeader>\n            <DialogTitle>\n              {event ? \"Edit Event\" : \"Create Event\"} {event?.title}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"mt-6 h-full\">\n            <form className=\"h-full\" onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"space-y-4 pb-5 \">\n                <div className=\"space-y-1.5\">\n                  <Label htmlFor=\"title\">Event Name</Label>\n                  <Input\n                    id=\"title\"\n                    type=\"text\"\n                    placeholder=\"Enter Event Name\"\n                    {...register(\"title\")}\n                  />\n                  {errors?.title?.message && (\n                    <div className=\"text-destructive text-sm\">\n                      {typeof errors?.title?.message === 'string'\n                        ? errors?.title?.message\n                        : JSON.stringify(errors?.title?.message)}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-1.5\">\n                  <Label htmlFor=\"startDate\">Start Date </Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"md\"\n                        className={cn(\n                          \"w-full justify-between text-left font-normal border-default-200 text-default-600 md:px-4\",\n                          !startDate && \"text-muted-foreground\"\n                        )}\n                      >\n                        {startDate ? (\n                          format(startDate, \"PP\")\n                        ) : (\n                          <span>Escolha uma data</span>\n                        )}\n                        <CalendarIcon className=\"h-4 w-4\" />\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Controller\n                        name=\"startDate\"\n                        control={control}\n                        render={({ field }) => (\n                          <Calendar\n                            mode=\"single\"\n                            selected={startDate}\n                            onSelect={(date) => setStartDate(date as Date)}\n                            initialFocus\n                          />\n                        )}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n                <div className=\"space-y-1.5\">\n                  <Label htmlFor=\"endDate\">End Date</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"md\"\n                        className={cn(\n                          \"w-full justify-between text-left font-normal border-default-200 text-default-600 md:px-4\",\n                          !endDate && \"text-muted-foreground\"\n                        )}\n                      >\n                        {endDate ? (\n                          format(endDate, \"PP\")\n                        ) : (\n                          <span>Escolha uma data</span>\n                        )}\n                        <CalendarIcon className=\"h-4 w-4\" />\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Controller\n                        name=\"endDate\"\n                        control={control}\n                        render={({ field }) => (\n                          <Calendar\n                            mode=\"single\"\n                            selected={endDate}\n                            onSelect={(date) => setEndDate(date as Date)}\n                            initialFocus\n                          />\n                        )}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n\n                <div className=\"space-y-1.5\">\n                  <Label htmlFor=\"calendarProps\">Label </Label>\n                  <Controller\n                    name=\"calendarProps\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select\n                        value={calendarProps}\n                        onValueChange={(data) => setCalendarProps(data)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Label\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categories.map((category: CalendarCategory) => (\n                            <SelectItem\n                              value={category.value}\n                              key={category.value}\n                            >\n                              {category.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap  gap-2 mt-10\">\n                <Button type=\"submit\" disabled={isPending} className=\"flex-1\">\n                  {isPending ? (\n                    <>\n                      <Loader2 className=\"me-2 h-4 w-4 animate-spin\" />\n                      {event ? \"Updating...\" : \"Adding...\"}\n                    </>\n                  ) : event ? (\n                    \"Update Event\"\n                  ) : (\n                    \"Add Event\"\n                  )}\n                </Button>\n                {event && (\n                  <Button\n                    type=\"button\"\n                    color=\"destructive\"\n                    onClick={() => handleOpenDeleteModal(event?.event?.id)}\n                    className=\"flex-1\"\n                  >\n                    Delete\n                  </Button>\n                )}\n              </div>\n            </form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default EventModal;\n"
        }
    ]
}