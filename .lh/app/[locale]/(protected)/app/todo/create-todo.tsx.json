{
    "sourceFile": "app/[locale]/(protected)/app/todo/create-todo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744234273194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744234273194,
            "name": "Commit-0",
            "content": "\"use client\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\nimport { CalendarIcon, Plus } from \"lucide-react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { z } from \"zod\"\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { toast } from \"@/components/ui/use-toast\"\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport Image from \"next/image\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { format } from \"date-fns\";\r\nimport { useState } from \"react\";\r\nimport { useTranslations } from \"next-intl\";\r\n\r\nconst assigneeOptions = [\r\n  { value: \"mahedi\", label: \"Mahedi Amin\", image: \"/images/avatar/av-1.svg\" },\r\n  { value: \"sovo\", label: \"Sovo Haldar\", image: \"/images/avatar/av-2.svg\" },\r\n  { value: \"rakibul\", label: \"Rakibul Islam\", image: \"/images/avatar/av-3.svg\" },\r\n  { value: \"pritom\", label: \"Pritom Miha\", image: \"/images/avatar/av-4.svg\" },\r\n];\r\n\r\n\r\nconst FormSchema = z.object({\r\n  title: z.string().min(2, {\r\n    message: \"Title must be at least 2 characters.\",\r\n  }),\r\n  assign: z.string().optional(),\r\n  tag: z.string().optional(),\r\n  dob: z.date().optional(),\r\n  description: z.string().optional()\r\n})\r\n\r\nconst CreateTodo = () => {\r\n  const t = useTranslations(\"TodoApp\")\r\n  const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false);\r\n  const form = useForm<z.infer<typeof FormSchema>>({\r\n    resolver: zodResolver(FormSchema),\r\n    defaultValues: {\r\n      title: \"\",\r\n    },\r\n  })\r\n\r\n  function onSubmit(data: z.infer<typeof FormSchema>) {\r\n    toast({\r\n      title: \"Task created successfully.\",\r\n    })\r\n    setIsDialogOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n      <DialogTrigger asChild>\r\n        <Button fullWidth size=\"lg\" className=\"dark:bg-background dark:text-foreground\">\r\n          <Plus className=\"w-6 h-6 me-1.5\" />\r\n          {t(\"addTask\")}\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent>\r\n        <DialogHeader className=\"mb-4\">\r\n          <DialogTitle> {t(\"addTask\")}</DialogTitle>\r\n        </DialogHeader>\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"title\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-default-700\">Title</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"Enter Title\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"assign\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-default-700\">Assign</FormLabel>\r\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Select...\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      {\r\n                        assigneeOptions.map((user, index) =>\r\n                          <SelectItem\r\n                            key={`user-${index}`}\r\n                            value={user.value}>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <Image\r\n                                src={user.image}\r\n                                alt={user.label}\r\n                                width={20}\r\n                                height={20}\r\n                                className=\"w-5 h-5 rounded-full\" />\r\n                              <span className=\"text-sm text-default-900\">{user.label}</span>\r\n                            </div>\r\n                          </SelectItem>)\r\n                      }\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"dob\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"flex flex-col\">\r\n                  <FormLabel className=\"text-default-700\">Due Date</FormLabel>\r\n                  <Popover>\r\n                    <PopoverTrigger asChild>\r\n                      <FormControl>\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"md\"\r\n                          fullWidth\r\n                          className={cn(\r\n                            \"border-default md:px-3\",\r\n                            !field.value && \"text-muted-foreground border-default-200 md:px-3\"\r\n                          )}\r\n                        >\r\n                          {field.value ? (\r\n                            format(field.value, \"PPP\")\r\n                          ) : (\r\n                            <span>Escolha uma data</span>\r\n                          )}\r\n                          <CalendarIcon className={cn(\"ms-auto h-4 w-4 text-default-300\",\r\n                            { \"text-default-900\": field.value }\r\n                          )} />\r\n                        </Button>\r\n                      </FormControl>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                      <Calendar\r\n                        mode=\"single\"\r\n                        selected={field.value}\r\n                        onSelect={field.onChange}\r\n                        disabled={(date) =>\r\n                          date > new Date() || date < new Date(\"1900-01-01\")\r\n                        }\r\n                        initialFocus\r\n                      />\r\n                    </PopoverContent>\r\n                  </Popover>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"tag\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-default-700\">Tag</FormLabel>\r\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Select...\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"team\">Team</SelectItem>\r\n                      <SelectItem value=\"low\">Low</SelectItem>\r\n                      <SelectItem value=\"medium\">Medium</SelectItem>\r\n                      <SelectItem value=\"high\">High</SelectItem>\r\n                      <SelectItem value=\"update\">Update</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"description\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"text-default-700\">Description</FormLabel>\r\n                  <FormControl>\r\n                    <Textarea\r\n                      placeholder=\"Tell us a little bit about yourself\"\r\n                      className=\"resize-none\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <div className=\"flex justify-end\">\r\n              <Button type=\"submit\">Submit</Button>\r\n            </div>\r\n          </form>\r\n        </Form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateTodo;"
        }
    ]
}