{
    "sourceFile": "app/[locale]/(protected)/eventos/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746909270578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746909270578,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport { Link } from '@/i18n/routing'\r\nimport { useLocale } from 'next-intl'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card } from '@/components/ui/card'\r\nimport { Plus, Pencil } from 'lucide-react'\r\nimport { EventoModal } from '@/components/EventosModal'\r\nimport { EventoFormData, Plataforma } from '@/lib/types'\r\nimport Image from 'next/image'\r\n\r\ninterface Evento {\r\n  id: string\r\n  nome: string\r\n  createdAt: string\r\n  data_evento?: string\r\n  plataformas: {\r\n    plataforma: {\r\n      id: string\r\n      nome: string\r\n      imagem: string | null\r\n    }\r\n  }[]\r\n}\r\n\r\nexport default function EventosPage() {\r\n  const [eventos, setEventos] = useState<Evento[]>([])\r\n  const locale = useLocale()\r\n  const [busca, setBusca] = useState('')\r\n  const [modalAberto, setModalAberto] = useState(false)\r\n  const [eventoEditando, setEventoEditando] = useState<EventoFormData | null>(null)\r\n  const [plataformasDisponiveis, setPlataformasDisponiveis] = useState<Plataforma[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const buscarEventos = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const res = await fetch('/api/eventos')\r\n      const data = await res.json()\r\n      setEventos(data)\r\n    } catch (error) {\r\n      console.error('Erro ao buscar eventos:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchPlataformas() {\r\n      const response = await fetch('/api/plataformas')\r\n      const data = await response.json()\r\n      setPlataformasDisponiveis(data || [])\r\n    }\r\n\r\n    fetchPlataformas()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    buscarEventos()\r\n  }, [])\r\n\r\n  const abrirNovo = () => {\r\n    setEventoEditando(null)\r\n    setModalAberto(true)\r\n  }\r\n\r\n  const abrirEdicao = (evento: Evento) => {\r\n    const plataformaIds = evento.plataformas.map((p) => p.plataforma.id)\r\n    setEventoEditando({\r\n      id: evento.id,\r\n      nome: evento.nome,\r\n      data: evento.data_evento?.split('T')[0] ?? '', // garantir formato yyyy-mm-dd\r\n      plataformaIds,\r\n    })\r\n    setModalAberto(true)\r\n  }\r\n\r\n  const handleSalvar = async (data: EventoFormData) => {\r\n    try {\r\n      setLoading(true)\r\n  \r\n      const isEdicao = !!data.id // Se existe ID, Ã© ediÃ§Ã£o\r\n      const url = isEdicao ? `/api/eventos/${data.id}` : '/api/eventos'\r\n      const method = isEdicao ? 'PATCH' : 'POST'\r\n  \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          nome: data.nome,\r\n          data: data.data,\r\n          plataformaIds: data.plataformaIds,\r\n        }),\r\n      })\r\n  \r\n      if (!response.ok) {\r\n        const msg = await response.text()\r\n        throw new Error(`Erro na API: ${msg}`)\r\n      }\r\n  \r\n      const eventoRetornado = await response.json()\r\n  \r\n      if (isEdicao) {\r\n        // Atualizar evento na lista local\r\n        setEventos((prevEventos) =>\r\n          prevEventos.map((ev) => (ev.id === data.id ? eventoRetornado : ev))\r\n        )\r\n      } else {\r\n        // Inserir novo evento na lista\r\n        setEventos((prevEventos) => [...prevEventos, eventoRetornado])\r\n      }\r\n  \r\n      setModalAberto(false)\r\n      setEventoEditando(null)\r\n    } catch (error) {\r\n      console.error('Erro ao salvar evento:', error)\r\n      alert('Falha ao salvar o evento. Verifique os dados e tente novamente.')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n  \r\n\r\n  const eventosFiltrados = eventos.filter((evento) =>\r\n    evento.nome.toLowerCase().includes(busca.toLowerCase())\r\n  )\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <Card className=\"flex flex-row items-center p-3 justify-between gap-4 mb-4\">\r\n        <h1 className=\"text-xl font-bold\">Eventos</h1>\r\n        <div className=\"flex gap-3\">\r\n          <Input\r\n            placeholder=\"Filtrar pelo nome do Evento...\"\r\n            value={busca}\r\n            onChange={(e) => setBusca(e.target.value)}\r\n            className=\"max-w-xs\"\r\n          />\r\n          <Button size=\"md\" onClick={abrirNovo} className=\"flex gap-2 items-center\">\r\n            <Plus className=\"w-4 h-4\" />\r\n            Novo Evento\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n\r\n      {loading ? (\r\n        <p className=\"text-gray-500\">Carregando eventos...</p>\r\n      ) : eventos.length === 0 ? (\r\n        <p className=\"text-gray-500\">Nenhum evento encontrado.</p>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {eventosFiltrados.map((evento) => (\r\n            <div key={evento.id} className=\"relative group\">\r\n              <Link href={`/eventos/${evento.id}`} className=\"block\">\r\n                <div className=\"bg-white rounded-lg shadow hover:shadow-md transition p-4 border border-gray-200 cursor-pointer\">\r\n                  <h2 className=\"text-lg font-semibold text-gray-800\">{evento.nome}</h2>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    {new Date(evento.createdAt).toLocaleDateString(locale)}\r\n                  </p>\r\n                  <div className=\"flex gap-2 mt-2 flex-wrap\">\r\n                    {evento.plataformas.map(({ plataforma }) => (\r\n                      <div\r\n                        key={plataforma.id}\r\n                        className=\"flex items-center gap-2 bg-gray-100 rounded px-2 py-1 text-sm text-gray-600\"\r\n                      >\r\n                        {plataforma.imagem && (\r\n                          <Image\r\n  src={plataforma.imagem}\r\n  alt={plataforma.nome}\r\n  width={16}\r\n  height={16}\r\n  className=\"rounded\"\r\n/>\r\n                        )}\r\n                        {plataforma.nome}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n              <Button\r\n                size=\"icon\"\r\n                variant=\"ghost\"\r\n                className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition bg-white/80 hover:bg-gray-600\"\r\n                onClick={() => abrirEdicao(evento)}\r\n              >\r\n                <Pencil className=\"w-4 h-4\" />\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <EventoModal\r\n        open={modalAberto}\r\n        onClose={() => {\r\n          setModalAberto(false)\r\n          setEventoEditando(null)\r\n        }}\r\n        onSave={handleSalvar}\r\n        plataformasDisponiveis={plataformasDisponiveis}\r\n        evento={eventoEditando} // ðŸ‘ˆ Passando os dados pro modal\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}