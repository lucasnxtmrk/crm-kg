{
    "sourceFile": "app/[locale]/(protected)/eventos/[eventoId]/components/ListaInfluencers.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 99,
            "patches": [
                {
                    "date": 1746573619147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746573627797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n \r\n   // --- Renderização ---\r\n   return (\r\n     <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n-      <div className='flex'>\r\n+      <div className=''>\r\n       <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n       {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n       <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n         <DialogTrigger asChild>\r\n"
                },
                {
                    "date": 1746573634222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n \r\n   // --- Renderização ---\r\n   return (\r\n     <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n-      <div className=''>\r\n+      <div className='flex justify-between items-center mb-4'>\r\n       <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n       {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n       <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n         <DialogTrigger asChild>\r\n"
                },
                {
                    "date": 1746573643561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n \r\n   // --- Renderização ---\r\n   return (\r\n     <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n-      <div className='flex justify-between items-center mb-4'>\r\n+      <div className='flex justify-between items-center mb-2'>\r\n       <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n       {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n       <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n         <DialogTrigger asChild>\r\n"
                },
                {
                    "date": 1746573677049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n       </AlertDialog>\r\n \r\n \r\n       {/* Tabela de Participantes (Mantida) */}\r\n-      <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n+      <table className=\"w-full text-left border-separate border-spacing-x-2 border-spacing-y-2\">\r\n         <thead>\r\n           <tr>\r\n             <th>Nome</th>\r\n             <th>Atingido</th>\r\n"
                },
                {
                    "date": 1746573694292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n       </AlertDialog>\r\n \r\n \r\n       {/* Tabela de Participantes (Mantida) */}\r\n-      <table className=\"w-full text-left border-separate border-spacing-x-2 border-spacing-y-2\">\r\n+      <table className=\"w-full text-left border-separate p-2 border-spacing-y-2\">\r\n         <thead>\r\n           <tr>\r\n             <th>Nome</th>\r\n             <th>Atingido</th>\r\n"
                },
                {
                    "date": 1746573699517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n       </AlertDialog>\r\n \r\n \r\n       {/* Tabela de Participantes (Mantida) */}\r\n-      <table className=\"w-full text-left border-separate p-2 border-spacing-y-2\">\r\n+      <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n         <thead>\r\n           <tr>\r\n             <th>Nome</th>\r\n             <th>Atingido</th>\r\n"
                },
                {
                    "date": 1746573713262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -410,9 +410,9 @@\n \r\n \r\n       {/* Tabela de Participantes (Mantida) */}\r\n       <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n-        <thead>\r\n+        <thead className='p-2'>\r\n           <tr>\r\n             <th>Nome</th>\r\n             <th>Atingido</th>\r\n             <th>Meta</th>\r\n"
                },
                {
                    "date": 1746573737399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -410,17 +410,17 @@\n \r\n \r\n       {/* Tabela de Participantes (Mantida) */}\r\n       <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n-        <thead className='p-2'>\r\n+        <thead className=''>\r\n           <tr>\r\n             <th>Nome</th>\r\n             <th>Atingido</th>\r\n             <th>Meta</th>\r\n             <th>Ações</th>\r\n           </tr>\r\n         </thead>\r\n-        <tbody>\r\n+        <tbody className='p-2'>\r\n           {participantes.map(p => (\r\n             <tr key={p.id} className=\"bg-gray-100 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n"
                },
                {
                    "date": 1746573745861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -418,11 +418,11 @@\n             <th>Meta</th>\r\n             <th>Ações</th>\r\n           </tr>\r\n         </thead>\r\n-        <tbody className='p-2'>\r\n+        <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573759316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n+            <tr key={p.id} className=\" p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573765803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\" p-2 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573775554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-50 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573781542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-50 p-2 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573788839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-100 space-x-2 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573797892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 space-x-2 p-2 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-100 ml-2 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573803967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody className=''>\r\n           {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 ml-2 p-2 rounded\">\r\n+            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n               <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n               <td>{p.atingido}</td>\r\n               <td>{p.meta}</td>\r\n               <td className=\"flex gap-2\">\r\n"
                },
                {
                    "date": 1746573826894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,9 +434,9 @@\n                   Editar\r\n                 </Button>\r\n                 <Button\r\n                   size=\"sm\"\r\n-                  variant=\"shadow\"\r\n+                  variant=\"outline\"\r\n                   onClick={() => handleStartDelete(p)}\r\n                 >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                  </Button>\r\n"
                },
                {
                    "date": 1746573839587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,9 +434,10 @@\n                   Editar\r\n                 </Button>\r\n                 <Button\r\n                   size=\"sm\"\r\n-                  variant=\"outline\"\r\n+                  style={{ backgroundColor: 'red' }}\r\n+                  variant=\"shadow\"\r\n                   onClick={() => handleStartDelete(p)}\r\n                 >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                  </Button>\r\n"
                },
                {
                    "date": 1746573873497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,9 +434,9 @@\n                   Editar\r\n                 </Button>\r\n                 <Button\r\n                   size=\"sm\"\r\n-                  style={{ backgroundColor: 'red' }}\r\n+                  style={{ backgroundColor: 'ce1c1c' }}\r\n                   variant=\"shadow\"\r\n                   onClick={() => handleStartDelete(p)}\r\n                 >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n"
                },
                {
                    "date": 1746574009411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { useState, useEffect } from 'react'\r\n import { Input } from '@/components/ui/input'\r\n import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2 } from 'lucide-react'\r\n+import { PlusCircle, Loader2, Trash2, Pencil } from 'lucide-react'\r\n import {\r\n   Dialog,\r\n   DialogContent,\r\n   DialogHeader,\r\n@@ -32,10 +32,9 @@\n   AlertDialogTitle,\r\n   AlertDialogTrigger,\r\n } from \"@/components/ui/alert-dialog\"\r\n \r\n-\r\n-// --- Interfaces (Mantidas) ---\r\n+// Interfaces\r\n interface Participante {\r\n   id: string\r\n   influencer_id: string\r\n   nome: string\r\n@@ -55,397 +54,61 @@\n   eventoId: string\r\n }\r\n \r\n export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n-  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n-  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n-  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n+  // ... lógica de estado omitida por brevidade\r\n \r\n-  // --- Estados do Modal Adicionar/Editar ---\r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [newInfluencerForm, setNewInfluencerForm] = useState({\r\n-    influencer_id: '',\r\n-    meta: 0,\r\n-    atingido: 0,\r\n-  })\r\n-  const [isSaving, setIsSaving] = useState(false); // <-- NOVO ESTADO: Para controlar o salvamento\r\n-\r\n-  // --- Estados para a lista de Influenciadores Disponíveis ---\r\n-  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n-  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n-  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n-\r\n-  // --- Estados para o Modal de Confirmação de Exclusão ---\r\n-  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false);\r\n-  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null);\r\n-\r\n-\r\n-  // --- Efeito para buscar a lista de influenciadores ---\r\n-  useEffect(() => {\r\n-    const fetchInfluencers = async () => {\r\n-      try {\r\n-        setLoadingInfluencers(true)\r\n-        const res = await fetch('/api/influenciadores')\r\n-        if (!res.ok) throw new Error(`Erro: ${res.statusText}`)\r\n-        const data = await res.json() as any[]\r\n-\r\n-        const options: InfluencerOption[] = data.map((inf: any) => ({\r\n-          id: inf.id,\r\n-          nome: inf.nome || null,\r\n-          imagem: inf.imagem || null,\r\n-        }))\r\n-        setAvailableInfluencers(options)\r\n-      } catch (err: any) {\r\n-        console.error(\"Erro ao buscar influenciadores:\", err)\r\n-        setErrorLoadingInfluencers(err.message)\r\n-      } finally {\r\n-        setLoadingInfluencers(false)\r\n-      }\r\n-    }\r\n-    fetchInfluencers()\r\n-  }, [])\r\n-\r\n-  // --- Lógica para abrir modal de adição ---\r\n-  const handleAddClick = () => {\r\n-    setModalMode('add');\r\n-    setEditingParticipant(null);\r\n-    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n-    setIsModalOpen(true);\r\n-  };\r\n-\r\n-  // --- Lógica para abrir modal de edição ---\r\n-  const handleEditar = (p: Participante) => {\r\n-    setModalMode('edit')\r\n-    setEditingParticipant(p)\r\n-    setNewInfluencerForm({\r\n-      influencer_id: p.influencer_id, // Manter o ID para referência, embora desabilitado no Select\r\n-      meta: p.meta,\r\n-      atingido: p.atingido,\r\n-    })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-   // --- Lógica para fechar modal de adição/edição e resetar estado ---\r\n-   const handleCloseModal = (open: boolean) => {\r\n-      setIsModalOpen(open);\r\n-      if (!open) { // Se estiver fechando o modal\r\n-         setEditingParticipant(null);\r\n-         setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n-         setModalMode('add');\r\n-      }\r\n-   };\r\n-\r\n-  // --- Lógica para fechar modal de confirmação de exclusão ---\r\n-  const handleCloseConfirmDeleteDialog = (open: boolean) => {\r\n-      setIsConfirmDeleteDialogOpen(open);\r\n-      if (!open) { // Se estiver fechando o modal de confirmação\r\n-          setParticipantToDelete(null); // Limpa o participante a ser excluído\r\n-      }\r\n-  };\r\n-\r\n-  // --- Lógica para selecionar influenciador no formulário de adição ---\r\n-  const handleSelectInfluencer = (value: string) => {\r\n-    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n-  }\r\n-\r\n-  // --- Lógica para atualizar campos Meta/Atingido no formulário ---\r\n-  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const { name, value, type } = e.target\r\n-    setNewInfluencerForm(prev => ({\r\n-      ...prev,\r\n-      [name]: type === 'number' ? +value : value,\r\n-    }))\r\n-  }\r\n-\r\n-  // --- Lógica para Salvar (Adicionar ou Editar) ---\r\n-  const handleSave = async () => {\r\n-    const { influencer_id, meta, atingido } = newInfluencerForm\r\n-\r\n-    // --- Validação e Verificação de Duplicidade (Modo Adicionar) ---\r\n-    if (modalMode === 'add') {\r\n-       if (!influencer_id) {\r\n-           alert('Selecione um influenciador.');\r\n-           return;\r\n-       }\r\n-       // <-- VERIFICAÇÃO DE DUPLICIDADE AQUI -->\r\n-       const isDuplicate = participantes.some(p => p.influencer_id === influencer_id);\r\n-       if (isDuplicate) {\r\n-           alert('Este influenciador já participa deste evento.');\r\n-           return; // Impede a continuação se for duplicado\r\n-       }\r\n-       // <------------------------------------>\r\n-    }\r\n-\r\n-     if (isNaN(meta) || meta < 0 || isNaN(atingido) || atingido < 0) {\r\n-       alert('Meta e Atingido devem ser números válidos e não negativos.');\r\n-       return;\r\n-     }\r\n-    // --- Fim da Validação ---\r\n-\r\n-    setIsSaving(true); // <-- NOVO: Habilita estado de salvamento\r\n-\r\n-    try {\r\n-      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n-      const url = `/api/eventos/${eventoId}/participantes`; // URL base para POST e PATCH\r\n-\r\n-      const body = modalMode === 'add'\r\n-        ? newInfluencerForm // POST body\r\n-        : {\r\n-            participante_id: editingParticipant?.id, // PATCH body\r\n-            meta,\r\n-            atingido,\r\n-          }\r\n-\r\n-      const res = await fetch(url, {\r\n-        method,\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body),\r\n-      })\r\n-\r\n-      if (!res.ok) {\r\n-        const errorBody = await res.text();\r\n-        throw new Error(`Erro ao salvar participante: ${res.status} - ${errorBody || res.statusText}`);\r\n-      }\r\n-\r\n-      const response = await res.json();\r\n-\r\n-      if (modalMode === 'add') {\r\n-        const selected = availableInfluencers.find(i => i.id === influencer_id);\r\n-        const novoParticipante: Participante = {\r\n-            id: response.id,\r\n-            influencer_id: influencer_id,\r\n-            nome: selected?.nome || `ID: ${influencer_id}`,\r\n-            imagem: selected?.imagem || '',\r\n-            meta: response.meta,\r\n-            atingido: response.atingido,\r\n-        };\r\n-        setParticipantes(prev => [...prev, novoParticipante]);\r\n-\r\n-      } else { // Modo 'edit'\r\n-        setParticipantes(prev => prev.map(p =>\r\n-          p.id === editingParticipant?.id ? { ...p, meta: response.meta, atingido: response.atingido } : p\r\n-        ));\r\n-      }\r\n-\r\n-      handleCloseModal(false); // Fechar e resetar modal de adição/edição\r\n-    } catch (err: any) {\r\n-      console.error(\"Erro no handleSave:\", err); // Log mais detalhado\r\n-      alert(err.message)\r\n-    } finally {\r\n-        setIsSaving(false); // <-- NOVO: Desabilita estado de salvamento (acontece sempre)\r\n-    }\r\n-  }\r\n-\r\n-    // --- Lógica para iniciar o processo de exclusão (mostrar confirmação) ---\r\n-    const handleStartDelete = (p: Participante) => {\r\n-        setParticipantToDelete(p);\r\n-        setIsConfirmDeleteDialogOpen(true);\r\n-    };\r\n-\r\n-    // --- Lógica para Excluir (após confirmação) ---\r\n-    const handleDeleteParticipant = async () => {\r\n-        if (!participantToDelete) return;\r\n-\r\n-        try {\r\n-            const url = `/api/eventos/${eventoId}/participantes/${participantToDelete.id}`;\r\n-\r\n-            const res = await fetch(url, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Content-Type': 'application/json' },\r\n-            });\r\n-\r\n-            if (!res.ok) {\r\n-                const errorBody = await res.text();\r\n-                throw new Error(`Erro ao excluir participante: ${res.status} - ${errorBody || res.statusText}`);\r\n-            }\r\n-\r\n-            setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id));\r\n-\r\n-            handleCloseConfirmDeleteDialog(false);\r\n-\r\n-        } catch (err: any) {\r\n-            console.error(\"Erro ao excluir participante:\", err);\r\n-            alert(`Erro ao excluir participante: ${err.message}`);\r\n-        }\r\n-    };\r\n-\r\n-    // --- Calcula se o influenciador selecionado já está na lista (para desabilitar botão) ---\r\n-    const isInfluencerAlreadyAdded = modalMode === 'add' &&\r\n-                                     newInfluencerForm.influencer_id !== '' &&\r\n-                                     participantes.some(p => p.influencer_id === newInfluencerForm.influencer_id);\r\n-    // <------------------------------------------------------------------------>\r\n-\r\n-\r\n-  // --- Renderização ---\r\n   return (\r\n-    <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n-      <div className='flex justify-between items-center mb-2'>\r\n-      <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n-      {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n-      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-        <DialogTrigger asChild>\r\n-          <Button size=\"sm\" className=\"mb-4\" onClick={handleAddClick}>\r\n-            <PlusCircle className=\"mr-2 h-4 w-4\" /> Adicionar Influenciador\r\n-          </Button>\r\n-        </DialogTrigger>\r\n+    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n+      <div className='flex justify-between items-center mb-4'>\r\n+        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n \r\n-        {/* Conteúdo do Modal Adicionar/Editar */}\r\n-        <DialogContent className=\"sm:max-w-[425px]\">\r\n-          <DialogHeader>\r\n-            <DialogTitle>\r\n-              {modalMode === 'add' ? 'Adicionar Novo Participante' : 'Editar Participante'}\r\n-            </DialogTitle>\r\n-            <DialogDescription>\r\n-              {modalMode === 'add'\r\n-                ? 'Selecione um influenciador e defina as métricas iniciais para este evento.'\r\n-                : `Editando métricas para: ${editingParticipant?.nome ?? 'Participante'}.`}\r\n-            </DialogDescription>\r\n-          </DialogHeader>\r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n+            </Button>\r\n+          </DialogTrigger>\r\n+          <DialogContent className=\"sm:max-w-[500px]\">\r\n+            {/* Conteúdo do modal mantido */}\r\n+          </DialogContent>\r\n+        </Dialog>\r\n+      </div>\r\n \r\n-          <div className=\"grid gap-4 py-4\">\r\n-            {/* Campo Influenciador (Select) */}\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label className=\"text-right\">Influenciador</Label>\r\n-              <div className=\"col-span-3\"> {/* Ajuste de layout, remova col-span-3 se não precisar */}\r\n-                {loadingInfluencers ? (\r\n-                  <div className=\"flex items-center gap-2 text-gray-500\">\r\n-                    <Loader2 className=\"h-4 w-4 animate-spin\" /> Carregando...\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full text-sm text-left\">\r\n+          <thead>\r\n+            <tr className=\"bg-gray-100 text-gray-700\">\r\n+              <th className=\"px-4 py-2\">Nome</th>\r\n+              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n+              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n+              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {participantes.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+                <td className=\"px-4 py-2 font-medium text-gray-800\">{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n+                <td className=\"px-4 py-2 text-center\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-2 text-center\">{p.meta}</td>\r\n+                <td className=\"px-4 py-2 text-right\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n                   </div>\r\n-                ) : errorLoadingInfluencers ? (\r\n-                  <p className=\"text-red-500 text-sm\">{errorLoadingInfluencers}</p>\r\n-                ) : (\r\n-                  <Select\r\n-                    onValueChange={handleSelectInfluencer}\r\n-                    value={newInfluencerForm.influencer_id}\r\n-                    disabled={modalMode === 'edit'} // Desabilita seleção em modo edição\r\n-                  >\r\n-                    <SelectTrigger>\r\n-                      {newInfluencerForm.influencer_id\r\n-                        ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome || `ID: ${newInfluencerForm.influencer_id}`\r\n-                        : 'Selecione um influenciador'}\r\n-                    </SelectTrigger>\r\n-                    <SelectContent>\r\n-                      {availableInfluencers.map((inf) => (\r\n-                        <SelectItem key={inf.id} value={inf.id}>\r\n-                           {inf.nome || `Sem nome - ID: ${inf.id}`}\r\n-                        </SelectItem>\r\n-                      ))}\r\n-                    </SelectContent>\r\n-                  </Select>\r\n-                )}\r\n-                {/* Mensagem de duplicidade opcional */}\r\n-                {modalMode === 'add' && isInfluencerAlreadyAdded && (\r\n-                    <p className=\"text-sm font-medium text-yellow-600 mt-1\">\r\n-                        Este influenciador já está neste evento.\r\n-                    </p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Campos Meta e Atingido */}\r\n-            <div className='grid grid-cols-2 items-center gap-4'>\r\n-                <div className=\"space-y-1.5\">\r\n-                  <Label className=\"text-right\">Meta</Label>\r\n-                  <Input\r\n-                    name=\"meta\"\r\n-                    type=\"number\"\r\n-                    value={newInfluencerForm.meta}\r\n-                    onChange={handleNewFormChange}\r\n-                    className=\"flex-grow\"\r\n-                  />\r\n-                </div>\r\n-\r\n-                <div className=\"space-y-1.5\">\r\n-                  <Label className=\"text-right\">Atingido</Label>\r\n-                  <Input\r\n-                    name=\"atingido\"\r\n-                    type=\"number\"\r\n-                    value={newInfluencerForm.atingido}\r\n-                    onChange={handleNewFormChange}\r\n-                    className=\"flex-grow\"\r\n-                  />\r\n-                </div>\r\n-            </div>\r\n-          </div>\r\n-\r\n-          <DialogFooter>\r\n-            <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n-            <Button\r\n-              type=\"button\"\r\n-              onClick={handleSave}\r\n-              // <-- DESABILITAÇÃO DO BOTÃO AQUI -->\r\n-              disabled={\r\n-                isSaving || // Desabilita se estiver salvando\r\n-                loadingInfluencers || // Opcional: desabilita se ainda carregando a lista de influenciadores\r\n-                (modalMode === 'add' && !newInfluencerForm.influencer_id) || // Em modo adicionar, desabilita se nenhum influencer selecionado\r\n-                isInfluencerAlreadyAdded // <-- NOVO: Desabilita se o influenciador selecionado já está na lista\r\n-              }\r\n-            >\r\n-              {/* Ícone de loading condicional */}\r\n-              {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n-              {modalMode === 'add' ? 'Salvar Influenciador' : 'Atualizar'}\r\n-            </Button>\r\n-          </DialogFooter>\r\n-        </DialogContent>\r\n-      </Dialog>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </table>\r\n       </div>\r\n \r\n-\r\n-      {/* Modal de Confirmação de Exclusão (Mantido) */}\r\n       <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={handleCloseConfirmDeleteDialog}>\r\n-        <AlertDialogContent>\r\n-          <AlertDialogHeader>\r\n-            <AlertDialogTitle>Tem certeza?</AlertDialogTitle>\r\n-            <AlertDialogDescription>\r\n-              Esta ação não pode ser desfeita. Isso removerá permanentemente o participante{' '}\r\n-              <strong>{participantToDelete?.nome ?? `ID: ${participantToDelete?.influencer_id ?? ''}`}</strong>{' '}\r\n-              deste evento.\r\n-            </AlertDialogDescription>\r\n-          </AlertDialogHeader>\r\n-          <AlertDialogFooter>\r\n-            <AlertDialogCancel onClick={() => handleCloseConfirmDeleteDialog(false)}>Cancelar</AlertDialogCancel>\r\n-            <AlertDialogAction onClick={handleDeleteParticipant}>Continuar</AlertDialogAction>\r\n-          </AlertDialogFooter>\r\n\\ No newline at end of file\n-        </AlertDialogContent>\r\n+        {/* Conteúdo do alerta de exclusão mantido */}\r\n       </AlertDialog>\r\n-\r\n-\r\n-      {/* Tabela de Participantes (Mantida) */}\r\n-      <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n-        <thead className=''>\r\n-          <tr>\r\n-            <th>Nome</th>\r\n-            <th>Atingido</th>\r\n-            <th>Meta</th>\r\n-            <th>Ações</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody className=''>\r\n-          {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n-              <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n-              <td>{p.atingido}</td>\r\n-              <td>{p.meta}</td>\r\n-              <td className=\"flex gap-2\">\r\n-                <Button\r\n-                  size=\"sm\"\r\n-                  variant=\"outline\"\r\n-                  onClick={() => handleEditar(p)}\r\n-                >\r\n-                  Editar\r\n-                </Button>\r\n-                <Button\r\n-                  size=\"sm\"\r\n-                  style={{ backgroundColor: 'ce1c1c' }}\r\n-                  variant=\"shadow\"\r\n-                  onClick={() => handleStartDelete(p)}\r\n-                >\r\n-                   <Trash2 className=\"h-4 w-4\" />\r\n-                 </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n     </div>\r\n   )\r\n-}\n+}\r\n"
                },
                {
                    "date": 1746574156989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { useState, useEffect } from 'react'\r\n import { Input } from '@/components/ui/input'\r\n import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2, Pencil } from 'lucide-react'\r\n+import { PlusCircle, Loader2, Trash2 } from 'lucide-react'\r\n import {\r\n   Dialog,\r\n   DialogContent,\r\n   DialogHeader,\r\n@@ -32,9 +32,10 @@\n   AlertDialogTitle,\r\n   AlertDialogTrigger,\r\n } from \"@/components/ui/alert-dialog\"\r\n \r\n-// Interfaces\r\n+\r\n+// --- Interfaces (Mantidas) ---\r\n interface Participante {\r\n   id: string\r\n   influencer_id: string\r\n   nome: string\r\n@@ -54,61 +55,397 @@\n   eventoId: string\r\n }\r\n \r\n export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n-  // ... lógica de estado omitida por brevidade\r\n+  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n+  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n+  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n \r\n+  // --- Estados do Modal Adicionar/Editar ---\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [newInfluencerForm, setNewInfluencerForm] = useState({\r\n+    influencer_id: '',\r\n+    meta: 0,\r\n+    atingido: 0,\r\n+  })\r\n+  const [isSaving, setIsSaving] = useState(false); // <-- NOVO ESTADO: Para controlar o salvamento\r\n+\r\n+  // --- Estados para a lista de Influenciadores Disponíveis ---\r\n+  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n+  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n+  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n+\r\n+  // --- Estados para o Modal de Confirmação de Exclusão ---\r\n+  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false);\r\n+  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null);\r\n+\r\n+\r\n+  // --- Efeito para buscar a lista de influenciadores ---\r\n+  useEffect(() => {\r\n+    const fetchInfluencers = async () => {\r\n+      try {\r\n+        setLoadingInfluencers(true)\r\n+        const res = await fetch('/api/influenciadores')\r\n+        if (!res.ok) throw new Error(`Erro: ${res.statusText}`)\r\n+        const data = await res.json() as any[]\r\n+\r\n+        const options: InfluencerOption[] = data.map((inf: any) => ({\r\n+          id: inf.id,\r\n+          nome: inf.nome || null,\r\n+          imagem: inf.imagem || null,\r\n+        }))\r\n+        setAvailableInfluencers(options)\r\n+      } catch (err: any) {\r\n+        console.error(\"Erro ao buscar influenciadores:\", err)\r\n+        setErrorLoadingInfluencers(err.message)\r\n+      } finally {\r\n+        setLoadingInfluencers(false)\r\n+      }\r\n+    }\r\n+    fetchInfluencers()\r\n+  }, [])\r\n+\r\n+  // --- Lógica para abrir modal de adição ---\r\n+  const handleAddClick = () => {\r\n+    setModalMode('add');\r\n+    setEditingParticipant(null);\r\n+    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n+    setIsModalOpen(true);\r\n+  };\r\n+\r\n+  // --- Lógica para abrir modal de edição ---\r\n+  const handleEditar = (p: Participante) => {\r\n+    setModalMode('edit')\r\n+    setEditingParticipant(p)\r\n+    setNewInfluencerForm({\r\n+      influencer_id: p.influencer_id, // Manter o ID para referência, embora desabilitado no Select\r\n+      meta: p.meta,\r\n+      atingido: p.atingido,\r\n+    })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+   // --- Lógica para fechar modal de adição/edição e resetar estado ---\r\n+   const handleCloseModal = (open: boolean) => {\r\n+      setIsModalOpen(open);\r\n+      if (!open) { // Se estiver fechando o modal\r\n+         setEditingParticipant(null);\r\n+         setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n+         setModalMode('add');\r\n+      }\r\n+   };\r\n+\r\n+  // --- Lógica para fechar modal de confirmação de exclusão ---\r\n+  const handleCloseConfirmDeleteDialog = (open: boolean) => {\r\n+      setIsConfirmDeleteDialogOpen(open);\r\n+      if (!open) { // Se estiver fechando o modal de confirmação\r\n+          setParticipantToDelete(null); // Limpa o participante a ser excluído\r\n+      }\r\n+  };\r\n+\r\n+  // --- Lógica para selecionar influenciador no formulário de adição ---\r\n+  const handleSelectInfluencer = (value: string) => {\r\n+    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n+  }\r\n+\r\n+  // --- Lógica para atualizar campos Meta/Atingido no formulário ---\r\n+  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const { name, value, type } = e.target\r\n+    setNewInfluencerForm(prev => ({\r\n+      ...prev,\r\n+      [name]: type === 'number' ? +value : value,\r\n+    }))\r\n+  }\r\n+\r\n+  // --- Lógica para Salvar (Adicionar ou Editar) ---\r\n+  const handleSave = async () => {\r\n+    const { influencer_id, meta, atingido } = newInfluencerForm\r\n+\r\n+    // --- Validação e Verificação de Duplicidade (Modo Adicionar) ---\r\n+    if (modalMode === 'add') {\r\n+       if (!influencer_id) {\r\n+           alert('Selecione um influenciador.');\r\n+           return;\r\n+       }\r\n+       // <-- VERIFICAÇÃO DE DUPLICIDADE AQUI -->\r\n+       const isDuplicate = participantes.some(p => p.influencer_id === influencer_id);\r\n+       if (isDuplicate) {\r\n+           alert('Este influenciador já participa deste evento.');\r\n+           return; // Impede a continuação se for duplicado\r\n+       }\r\n+       // <------------------------------------>\r\n+    }\r\n+\r\n+     if (isNaN(meta) || meta < 0 || isNaN(atingido) || atingido < 0) {\r\n+       alert('Meta e Atingido devem ser números válidos e não negativos.');\r\n+       return;\r\n+     }\r\n+    // --- Fim da Validação ---\r\n+\r\n+    setIsSaving(true); // <-- NOVO: Habilita estado de salvamento\r\n+\r\n+    try {\r\n+      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n+      const url = `/api/eventos/${eventoId}/participantes`; // URL base para POST e PATCH\r\n+\r\n+      const body = modalMode === 'add'\r\n+        ? newInfluencerForm // POST body\r\n+        : {\r\n+            participante_id: editingParticipant?.id, // PATCH body\r\n+            meta,\r\n+            atingido,\r\n+          }\r\n+\r\n+      const res = await fetch(url, {\r\n+        method,\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body),\r\n+      })\r\n+\r\n+      if (!res.ok) {\r\n+        const errorBody = await res.text();\r\n+        throw new Error(`Erro ao salvar participante: ${res.status} - ${errorBody || res.statusText}`);\r\n+      }\r\n+\r\n+      const response = await res.json();\r\n+\r\n+      if (modalMode === 'add') {\r\n+        const selected = availableInfluencers.find(i => i.id === influencer_id);\r\n+        const novoParticipante: Participante = {\r\n+            id: response.id,\r\n+            influencer_id: influencer_id,\r\n+            nome: selected?.nome || `ID: ${influencer_id}`,\r\n+            imagem: selected?.imagem || '',\r\n+            meta: response.meta,\r\n+            atingido: response.atingido,\r\n+        };\r\n+        setParticipantes(prev => [...prev, novoParticipante]);\r\n+\r\n+      } else { // Modo 'edit'\r\n+        setParticipantes(prev => prev.map(p =>\r\n+          p.id === editingParticipant?.id ? { ...p, meta: response.meta, atingido: response.atingido } : p\r\n+        ));\r\n+      }\r\n+\r\n+      handleCloseModal(false); // Fechar e resetar modal de adição/edição\r\n+    } catch (err: any) {\r\n+      console.error(\"Erro no handleSave:\", err); // Log mais detalhado\r\n+      alert(err.message)\r\n+    } finally {\r\n+        setIsSaving(false); // <-- NOVO: Desabilita estado de salvamento (acontece sempre)\r\n+    }\r\n+  }\r\n+\r\n+    // --- Lógica para iniciar o processo de exclusão (mostrar confirmação) ---\r\n+    const handleStartDelete = (p: Participante) => {\r\n+        setParticipantToDelete(p);\r\n+        setIsConfirmDeleteDialogOpen(true);\r\n+    };\r\n+\r\n+    // --- Lógica para Excluir (após confirmação) ---\r\n+    const handleDeleteParticipant = async () => {\r\n+        if (!participantToDelete) return;\r\n+\r\n+        try {\r\n+            const url = `/api/eventos/${eventoId}/participantes/${participantToDelete.id}`;\r\n+\r\n+            const res = await fetch(url, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Content-Type': 'application/json' },\r\n+            });\r\n+\r\n+            if (!res.ok) {\r\n+                const errorBody = await res.text();\r\n+                throw new Error(`Erro ao excluir participante: ${res.status} - ${errorBody || res.statusText}`);\r\n+            }\r\n+\r\n+            setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id));\r\n+\r\n+            handleCloseConfirmDeleteDialog(false);\r\n+\r\n+        } catch (err: any) {\r\n+            console.error(\"Erro ao excluir participante:\", err);\r\n+            alert(`Erro ao excluir participante: ${err.message}`);\r\n+        }\r\n+    };\r\n+\r\n+    // --- Calcula se o influenciador selecionado já está na lista (para desabilitar botão) ---\r\n+    const isInfluencerAlreadyAdded = modalMode === 'add' &&\r\n+                                     newInfluencerForm.influencer_id !== '' &&\r\n+                                     participantes.some(p => p.influencer_id === newInfluencerForm.influencer_id);\r\n+    // <------------------------------------------------------------------------>\r\n+\r\n+\r\n+  // --- Renderização ---\r\n   return (\r\n-    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n-      <div className='flex justify-between items-center mb-4'>\r\n-        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+    <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n+      <div className='flex justify-between items-center mb-2'>\r\n+      <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n+      {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n+      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+        <DialogTrigger asChild>\r\n+          <Button size=\"sm\" className=\"mb-4\" onClick={handleAddClick}>\r\n+            <PlusCircle className=\"mr-2 h-4 w-4\" /> Adicionar Influenciador\r\n+          </Button>\r\n+        </DialogTrigger>\r\n \r\n-        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-          <DialogTrigger asChild>\r\n-            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n-              <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n-            </Button>\r\n-          </DialogTrigger>\r\n-          <DialogContent className=\"sm:max-w-[500px]\">\r\n-            {/* Conteúdo do modal mantido */}\r\n-          </DialogContent>\r\n-        </Dialog>\r\n-      </div>\r\n+        {/* Conteúdo do Modal Adicionar/Editar */}\r\n+        <DialogContent className=\"sm:max-w-[425px]\">\r\n+          <DialogHeader>\r\n+            <DialogTitle>\r\n+              {modalMode === 'add' ? 'Adicionar Novo Participante' : 'Editar Participante'}\r\n+            </DialogTitle>\r\n+            <DialogDescription>\r\n+              {modalMode === 'add'\r\n+                ? 'Selecione um influenciador e defina as métricas iniciais para este evento.'\r\n+                : `Editando métricas para: ${editingParticipant?.nome ?? 'Participante'}.`}\r\n+            </DialogDescription>\r\n+          </DialogHeader>\r\n \r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full text-sm text-left\">\r\n-          <thead>\r\n-            <tr className=\"bg-gray-100 text-gray-700\">\r\n-              <th className=\"px-4 py-2\">Nome</th>\r\n-              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n-              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n-              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {participantes.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n-                <td className=\"px-4 py-2 font-medium text-gray-800\">{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n-                <td className=\"px-4 py-2 text-center\">{p.atingido}</td>\r\n-                <td className=\"px-4 py-2 text-center\">{p.meta}</td>\r\n-                <td className=\"px-4 py-2 text-right\">\r\n-                  <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-                      <Pencil className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-                      <Trash2 className=\"h-4 w-4\" />\r\n-                    </Button>\r\n+          <div className=\"grid gap-4 py-4\">\r\n+            {/* Campo Influenciador (Select) */}\r\n+            <div className=\"space-y-1.5\">\r\n+              <Label className=\"text-right\">Influenciador</Label>\r\n+              <div className=\"col-span-3\"> {/* Ajuste de layout, remova col-span-3 se não precisar */}\r\n+                {loadingInfluencers ? (\r\n+                  <div className=\"flex items-center gap-2 text-gray-500\">\r\n+                    <Loader2 className=\"h-4 w-4 animate-spin\" /> Carregando...\r\n                   </div>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </table>\r\n+                ) : errorLoadingInfluencers ? (\r\n+                  <p className=\"text-red-500 text-sm\">{errorLoadingInfluencers}</p>\r\n+                ) : (\r\n+                  <Select\r\n+                    onValueChange={handleSelectInfluencer}\r\n+                    value={newInfluencerForm.influencer_id}\r\n+                    disabled={modalMode === 'edit'} // Desabilita seleção em modo edição\r\n+                  >\r\n+                    <SelectTrigger>\r\n+                      {newInfluencerForm.influencer_id\r\n+                        ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome || `ID: ${newInfluencerForm.influencer_id}`\r\n+                        : 'Selecione um influenciador'}\r\n+                    </SelectTrigger>\r\n+                    <SelectContent>\r\n+                      {availableInfluencers.map((inf) => (\r\n+                        <SelectItem key={inf.id} value={inf.id}>\r\n+                           {inf.nome || `Sem nome - ID: ${inf.id}`}\r\n+                        </SelectItem>\r\n+                      ))}\r\n+                    </SelectContent>\r\n+                  </Select>\r\n+                )}\r\n+                {/* Mensagem de duplicidade opcional */}\r\n+                {modalMode === 'add' && isInfluencerAlreadyAdded && (\r\n+                    <p className=\"text-sm font-medium text-yellow-600 mt-1\">\r\n+                        Este influenciador já está neste evento.\r\n+                    </p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Campos Meta e Atingido */}\r\n+            <div className='grid grid-cols-2 items-center gap-4'>\r\n+                <div className=\"space-y-1.5\">\r\n+                  <Label className=\"text-right\">Meta</Label>\r\n+                  <Input\r\n+                    name=\"meta\"\r\n+                    type=\"number\"\r\n+                    value={newInfluencerForm.meta}\r\n+                    onChange={handleNewFormChange}\r\n+                    className=\"flex-grow\"\r\n+                  />\r\n+                </div>\r\n+\r\n+                <div className=\"space-y-1.5\">\r\n+                  <Label className=\"text-right\">Atingido</Label>\r\n+                  <Input\r\n+                    name=\"atingido\"\r\n+                    type=\"number\"\r\n+                    value={newInfluencerForm.atingido}\r\n+                    onChange={handleNewFormChange}\r\n+                    className=\"flex-grow\"\r\n+                  />\r\n+                </div>\r\n+            </div>\r\n+          </div>\r\n+\r\n+          <DialogFooter>\r\n+            <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n+            <Button\r\n+              type=\"button\"\r\n+              onClick={handleSave}\r\n+              // <-- DESABILITAÇÃO DO BOTÃO AQUI -->\r\n+              disabled={\r\n+                isSaving || // Desabilita se estiver salvando\r\n+                loadingInfluencers || // Opcional: desabilita se ainda carregando a lista de influenciadores\r\n+                (modalMode === 'add' && !newInfluencerForm.influencer_id) || // Em modo adicionar, desabilita se nenhum influencer selecionado\r\n+                isInfluencerAlreadyAdded // <-- NOVO: Desabilita se o influenciador selecionado já está na lista\r\n+              }\r\n+            >\r\n+              {/* Ícone de loading condicional */}\r\n+              {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n+              {modalMode === 'add' ? 'Salvar Influenciador' : 'Atualizar'}\r\n+            </Button>\r\n+          </DialogFooter>\r\n+        </DialogContent>\r\n+      </Dialog>\r\n       </div>\r\n \r\n+\r\n+      {/* Modal de Confirmação de Exclusão (Mantido) */}\r\n       <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={handleCloseConfirmDeleteDialog}>\r\n-        {/* Conteúdo do alerta de exclusão mantido */}\r\n+        <AlertDialogContent>\r\n+          <AlertDialogHeader>\r\n+            <AlertDialogTitle>Tem certeza?</AlertDialogTitle>\r\n+            <AlertDialogDescription>\r\n+              Esta ação não pode ser desfeita. Isso removerá permanentemente o participante{' '}\r\n+              <strong>{participantToDelete?.nome ?? `ID: ${participantToDelete?.influencer_id ?? ''}`}</strong>{' '}\r\n+              deste evento.\r\n+            </AlertDialogDescription>\r\n+          </AlertDialogHeader>\r\n+          <AlertDialogFooter>\r\n+            <AlertDialogCancel onClick={() => handleCloseConfirmDeleteDialog(false)}>Cancelar</AlertDialogCancel>\r\n+            <AlertDialogAction onClick={handleDeleteParticipant}>Continuar</AlertDialogAction>\r\n+          </AlertDialogFooter>\r\n+        </AlertDialogContent>\r\n       </AlertDialog>\r\n+\r\n+\r\n+      {/* Tabela de Participantes (Mantida) */}\r\n+      <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n+        <thead className=''>\r\n+          <tr>\r\n+            <th>Nome</th>\r\n+            <th>Atingido</th>\r\n+            <th>Meta</th>\r\n+            <th>Ações</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody className=''>\r\n+          {participantes.map(p => (\r\n+            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n+              <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n+              <td>{p.atingido}</td>\r\n+              <td>{p.meta}</td>\r\n+              <td className=\"flex gap-2\">\r\n+                <Button\r\n+                  size=\"sm\"\r\n+                  variant=\"outline\"\r\n+                  onClick={() => handleEditar(p)}\r\n+                >\r\n+                  Editar\r\n+                </Button>\r\n+                <Button\r\n+                  size=\"sm\"\r\n+                  style={{ backgroundColor: '#ce1c1c' }}\r\n+                  variant=\"shadow\"\r\n+                  onClick={() => handleStartDelete(p)}\r\n+                >\r\n+                   <Trash2 className=\"h-4 w-4\" />\r\n+                 </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n     </div>\r\n   )\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746574250635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,300 @@\n+'use client'\r\n+\r\n+import { useState, useEffect } from 'react'\r\n+import { Input } from '@/components/ui/input'\r\n+import { Button } from '@/components/ui/button'\r\n+import { PlusCircle, Loader2, Trash2, Pencil } from 'lucide-react'\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+  DialogDescription,\r\n+  DialogFooter,\r\n+  DialogTrigger,\r\n+} from '@/components/ui/dialog'\r\n+import {\r\n+  Select,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+} from '@/components/ui/select'\r\n+import { Label } from '@/components/ui/label'\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\"\r\n+import Image from 'next/image'\r\n+\r\n+interface Participante {\r\n+  id: string\r\n+  influencer_id: string\r\n+  nome: string\r\n+  imagem: string\r\n+  atingido: number\r\n+  meta: number\r\n+}\r\n+\r\n+interface InfluencerOption {\r\n+  id: string\r\n+  nome: string | null\r\n+  imagem: string | null\r\n+}\r\n+\r\n+interface Props {\r\n+  participantes: Participante[]\r\n+  eventoId: string\r\n+}\r\n+\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n+  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n+  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n+  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n+  const [isSaving, setIsSaving] = useState(false)\r\n+  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n+  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n+  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n+  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n+  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n+\r\n+  useEffect(() => {\r\n+    const fetchInfluencers = async () => {\r\n+      try {\r\n+        setLoadingInfluencers(true)\r\n+        const res = await fetch('/api/influenciadores')\r\n+        const data = await res.json()\r\n+        setAvailableInfluencers(data.map((i: any) => ({\r\n+          id: i.id,\r\n+          nome: i.nome,\r\n+          imagem: i.imagem,\r\n+        })))\r\n+      } catch (err: any) {\r\n+        setErrorLoadingInfluencers(err.message)\r\n+      } finally {\r\n+        setLoadingInfluencers(false)\r\n+      }\r\n+    }\r\n+    fetchInfluencers()\r\n+  }, [])\r\n+\r\n+  const handleAddClick = () => {\r\n+    setModalMode('add')\r\n+    setEditingParticipant(null)\r\n+    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleEditar = (p: Participante) => {\r\n+    setModalMode('edit')\r\n+    setEditingParticipant(p)\r\n+    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleCloseModal = (open: boolean) => {\r\n+    setIsModalOpen(open)\r\n+    if (!open) {\r\n+      setEditingParticipant(null)\r\n+      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+      setModalMode('add')\r\n+    }\r\n+  }\r\n+\r\n+  const handleSelectInfluencer = (value: string) => {\r\n+    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n+  }\r\n+\r\n+  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewInfluencerForm(prev => ({\r\n+      ...prev,\r\n+      [name]: +value,\r\n+    }))\r\n+  }\r\n+\r\n+  const handleSave = async () => {\r\n+    const { influencer_id, meta, atingido } = newInfluencerForm\r\n+    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n+\r\n+    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n+    if (modalMode === 'add' && isDuplicate) {\r\n+      alert('Este influenciador já participa deste evento.')\r\n+      return\r\n+    }\r\n+\r\n+    setIsSaving(true)\r\n+    try {\r\n+      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n+      const body = modalMode === 'add'\r\n+        ? newInfluencerForm\r\n+        : { participante_id: editingParticipant?.id, meta, atingido }\r\n+\r\n+      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n+        method,\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body),\r\n+      })\r\n+\r\n+      const data = await res.json()\r\n+      if (modalMode === 'add') {\r\n+        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n+        const novo: Participante = {\r\n+          id: data.id,\r\n+          influencer_id,\r\n+          nome: info?.nome || 'Sem nome',\r\n+          imagem: info?.imagem || '',\r\n+          meta: data.meta,\r\n+          atingido: data.atingido,\r\n+        }\r\n+        setParticipantes(prev => [...prev, novo])\r\n+      } else {\r\n+        setParticipantes(prev =>\r\n+          prev.map(p => p.id === editingParticipant?.id\r\n+            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n+            : p))\r\n+      }\r\n+      handleCloseModal(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    } finally {\r\n+      setIsSaving(false)\r\n+    }\r\n+  }\r\n+\r\n+  const handleStartDelete = (p: Participante) => {\r\n+    setParticipantToDelete(p)\r\n+    setIsConfirmDeleteDialogOpen(true)\r\n+  }\r\n+\r\n+  const handleDeleteParticipant = async () => {\r\n+    if (!participantToDelete) return\r\n+    try {\r\n+      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n+        method: 'DELETE',\r\n+      })\r\n+      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n+      setIsConfirmDeleteDialogOpen(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n+      <div className='flex justify-between items-center mb-4'>\r\n+        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n+            </Button>\r\n+          </DialogTrigger>\r\n+          <DialogContent className=\"sm:max-w-[500px]\">\r\n+            <DialogHeader>\r\n+              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n+              <DialogDescription>\r\n+                Preencha os dados de meta e atingido para o influenciador\r\n+              </DialogDescription>\r\n+            </DialogHeader>\r\n+\r\n+            <div className=\"grid gap-4 py-4\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                onValueChange={handleSelectInfluencer}\r\n+                value={newInfluencerForm.influencer_id}\r\n+                disabled={modalMode === 'edit'}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  {newInfluencerForm.influencer_id\r\n+                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n+                    : 'Selecione'}\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {availableInfluencers.map((inf) => (\r\n+                    <SelectItem key={inf.id} value={inf.id}>\r\n+                      {inf.nome}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n+\r\n+              <Label>Meta</Label>\r\n+              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n+              <Label>Atingido</Label>\r\n+              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n+            </div>\r\n+\r\n+            <DialogFooter>\r\n+              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n+              <Button onClick={handleSave} disabled={isSaving}>\r\n+                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n+                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n+              </Button>\r\n+            </DialogFooter>\r\n+          </DialogContent>\r\n+        </Dialog>\r\n+      </div>\r\n+\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full text-sm text-left\">\r\n+          <thead>\r\n+            <tr className=\"bg-gray-100 text-gray-700\">\r\n+              <th className=\"px-4 py-2\">Nome</th>\r\n+              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n+              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n+              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {participantes.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+                <td className=\"px-4 py-2 flex items-center gap-2\">\r\n+                  {p.imagem && (\r\n+                    <Image src={p.imagem} alt={p.nome} width={28} height={28} className=\"rounded-full\" />\r\n+                  )}\r\n+                  {p.nome}\r\n+                </td>\r\n+                <td className=\"px-4 py-2 text-center\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-2 text-center\">{p.meta}</td>\r\n+                <td className=\"px-4 py-2 text-right\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </table>\r\n+      </div>\r\n+\r\n+      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n+        <AlertDialogContent>\r\n+          <AlertDialogHeader>\r\n+            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n+            <AlertDialogDescription>\r\n+              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n+            </AlertDialogDescription>\r\n+          </AlertDialogHeader>\r\n+          <AlertDialogFooter>\r\n+            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n+            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n+          </AlertDialogFooter>\r\n+        </AlertDialogContent>\r\n+      </AlertDialog>\r\n+    </div>\r\n+  )\r\n+}\r\n"
                },
                {
                    "date": 1746574394071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,11 +257,8 @@\n           <tbody>\r\n             {participantes.map(p => (\r\n               <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n                 <td className=\"px-4 py-2 flex items-center gap-2\">\r\n-                  {p.imagem && (\r\n-                    <Image src={p.imagem} alt={p.nome} width={28} height={28} className=\"rounded-full\" />\r\n-                  )}\r\n                   {p.nome}\r\n                 </td>\r\n                 <td className=\"px-4 py-2 text-center\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-2 text-center\">{p.meta}</td>\r\n@@ -297,455 +294,4 @@\n       </AlertDialog>\r\n     </div>\r\n   )\r\n }\r\n-'use client'\r\n-\r\n-import { useState, useEffect } from 'react'\r\n-import { Input } from '@/components/ui/input'\r\n-import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2 } from 'lucide-react'\r\n-import {\r\n-  Dialog,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-  DialogDescription,\r\n-  DialogFooter,\r\n-  DialogTrigger,\r\n-} from '@/components/ui/dialog'\r\n-import {\r\n-  Select,\r\n-  SelectContent,\r\n-  SelectItem,\r\n-  SelectTrigger,\r\n-  SelectValue,\r\n-} from '@/components/ui/select'\r\n-import { Label } from '@/components/ui/label'\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\"\r\n-\r\n-\r\n-// --- Interfaces (Mantidas) ---\r\n-interface Participante {\r\n-  id: string\r\n-  influencer_id: string\r\n-  nome: string\r\n-  imagem: string\r\n-  atingido: number\r\n-  meta: number\r\n-}\r\n-\r\n-interface InfluencerOption {\r\n-  id: string\r\n-  nome: string | null\r\n-  imagem: string | null\r\n-}\r\n-\r\n-interface Props {\r\n-  participantes: Participante[]\r\n-  eventoId: string\r\n-}\r\n-\r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n-  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n-  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n-  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n-\r\n-  // --- Estados do Modal Adicionar/Editar ---\r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [newInfluencerForm, setNewInfluencerForm] = useState({\r\n-    influencer_id: '',\r\n-    meta: 0,\r\n-    atingido: 0,\r\n-  })\r\n-  const [isSaving, setIsSaving] = useState(false); // <-- NOVO ESTADO: Para controlar o salvamento\r\n-\r\n-  // --- Estados para a lista de Influenciadores Disponíveis ---\r\n-  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n-  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n-  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n-\r\n-  // --- Estados para o Modal de Confirmação de Exclusão ---\r\n-  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false);\r\n-  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null);\r\n-\r\n-\r\n-  // --- Efeito para buscar a lista de influenciadores ---\r\n-  useEffect(() => {\r\n-    const fetchInfluencers = async () => {\r\n-      try {\r\n-        setLoadingInfluencers(true)\r\n-        const res = await fetch('/api/influenciadores')\r\n-        if (!res.ok) throw new Error(`Erro: ${res.statusText}`)\r\n-        const data = await res.json() as any[]\r\n-\r\n-        const options: InfluencerOption[] = data.map((inf: any) => ({\r\n-          id: inf.id,\r\n-          nome: inf.nome || null,\r\n-          imagem: inf.imagem || null,\r\n-        }))\r\n-        setAvailableInfluencers(options)\r\n-      } catch (err: any) {\r\n-        console.error(\"Erro ao buscar influenciadores:\", err)\r\n-        setErrorLoadingInfluencers(err.message)\r\n-      } finally {\r\n-        setLoadingInfluencers(false)\r\n-      }\r\n-    }\r\n-    fetchInfluencers()\r\n-  }, [])\r\n-\r\n-  // --- Lógica para abrir modal de adição ---\r\n-  const handleAddClick = () => {\r\n-    setModalMode('add');\r\n-    setEditingParticipant(null);\r\n-    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n-    setIsModalOpen(true);\r\n-  };\r\n-\r\n-  // --- Lógica para abrir modal de edição ---\r\n-  const handleEditar = (p: Participante) => {\r\n-    setModalMode('edit')\r\n-    setEditingParticipant(p)\r\n-    setNewInfluencerForm({\r\n-      influencer_id: p.influencer_id, // Manter o ID para referência, embora desabilitado no Select\r\n-      meta: p.meta,\r\n-      atingido: p.atingido,\r\n-    })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-   // --- Lógica para fechar modal de adição/edição e resetar estado ---\r\n-   const handleCloseModal = (open: boolean) => {\r\n-      setIsModalOpen(open);\r\n-      if (!open) { // Se estiver fechando o modal\r\n-         setEditingParticipant(null);\r\n-         setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n-         setModalMode('add');\r\n-      }\r\n-   };\r\n-\r\n-  // --- Lógica para fechar modal de confirmação de exclusão ---\r\n-  const handleCloseConfirmDeleteDialog = (open: boolean) => {\r\n-      setIsConfirmDeleteDialogOpen(open);\r\n-      if (!open) { // Se estiver fechando o modal de confirmação\r\n-          setParticipantToDelete(null); // Limpa o participante a ser excluído\r\n-      }\r\n-  };\r\n-\r\n-  // --- Lógica para selecionar influenciador no formulário de adição ---\r\n-  const handleSelectInfluencer = (value: string) => {\r\n-    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n-  }\r\n-\r\n-  // --- Lógica para atualizar campos Meta/Atingido no formulário ---\r\n-  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const { name, value, type } = e.target\r\n-    setNewInfluencerForm(prev => ({\r\n-      ...prev,\r\n-      [name]: type === 'number' ? +value : value,\r\n-    }))\r\n-  }\r\n-\r\n-  // --- Lógica para Salvar (Adicionar ou Editar) ---\r\n-  const handleSave = async () => {\r\n-    const { influencer_id, meta, atingido } = newInfluencerForm\r\n-\r\n-    // --- Validação e Verificação de Duplicidade (Modo Adicionar) ---\r\n-    if (modalMode === 'add') {\r\n-       if (!influencer_id) {\r\n-           alert('Selecione um influenciador.');\r\n-           return;\r\n-       }\r\n-       // <-- VERIFICAÇÃO DE DUPLICIDADE AQUI -->\r\n-       const isDuplicate = participantes.some(p => p.influencer_id === influencer_id);\r\n-       if (isDuplicate) {\r\n-           alert('Este influenciador já participa deste evento.');\r\n-           return; // Impede a continuação se for duplicado\r\n-       }\r\n-       // <------------------------------------>\r\n-    }\r\n-\r\n-     if (isNaN(meta) || meta < 0 || isNaN(atingido) || atingido < 0) {\r\n-       alert('Meta e Atingido devem ser números válidos e não negativos.');\r\n-       return;\r\n-     }\r\n-    // --- Fim da Validação ---\r\n-\r\n-    setIsSaving(true); // <-- NOVO: Habilita estado de salvamento\r\n-\r\n-    try {\r\n-      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n-      const url = `/api/eventos/${eventoId}/participantes`; // URL base para POST e PATCH\r\n-\r\n-      const body = modalMode === 'add'\r\n-        ? newInfluencerForm // POST body\r\n-        : {\r\n-            participante_id: editingParticipant?.id, // PATCH body\r\n-            meta,\r\n-            atingido,\r\n-          }\r\n-\r\n-      const res = await fetch(url, {\r\n-        method,\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body),\r\n-      })\r\n-\r\n-      if (!res.ok) {\r\n-        const errorBody = await res.text();\r\n-        throw new Error(`Erro ao salvar participante: ${res.status} - ${errorBody || res.statusText}`);\r\n-      }\r\n-\r\n-      const response = await res.json();\r\n-\r\n-      if (modalMode === 'add') {\r\n-        const selected = availableInfluencers.find(i => i.id === influencer_id);\r\n-        const novoParticipante: Participante = {\r\n-            id: response.id,\r\n-            influencer_id: influencer_id,\r\n-            nome: selected?.nome || `ID: ${influencer_id}`,\r\n-            imagem: selected?.imagem || '',\r\n-            meta: response.meta,\r\n-            atingido: response.atingido,\r\n-        };\r\n-        setParticipantes(prev => [...prev, novoParticipante]);\r\n-\r\n-      } else { // Modo 'edit'\r\n-        setParticipantes(prev => prev.map(p =>\r\n-          p.id === editingParticipant?.id ? { ...p, meta: response.meta, atingido: response.atingido } : p\r\n-        ));\r\n-      }\r\n-\r\n-      handleCloseModal(false); // Fechar e resetar modal de adição/edição\r\n-    } catch (err: any) {\r\n-      console.error(\"Erro no handleSave:\", err); // Log mais detalhado\r\n-      alert(err.message)\r\n-    } finally {\r\n-        setIsSaving(false); // <-- NOVO: Desabilita estado de salvamento (acontece sempre)\r\n-    }\r\n-  }\r\n-\r\n-    // --- Lógica para iniciar o processo de exclusão (mostrar confirmação) ---\r\n-    const handleStartDelete = (p: Participante) => {\r\n-        setParticipantToDelete(p);\r\n-        setIsConfirmDeleteDialogOpen(true);\r\n-    };\r\n-\r\n-    // --- Lógica para Excluir (após confirmação) ---\r\n-    const handleDeleteParticipant = async () => {\r\n-        if (!participantToDelete) return;\r\n-\r\n-        try {\r\n-            const url = `/api/eventos/${eventoId}/participantes/${participantToDelete.id}`;\r\n-\r\n-            const res = await fetch(url, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Content-Type': 'application/json' },\r\n-            });\r\n-\r\n-            if (!res.ok) {\r\n-                const errorBody = await res.text();\r\n-                throw new Error(`Erro ao excluir participante: ${res.status} - ${errorBody || res.statusText}`);\r\n-            }\r\n-\r\n-            setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id));\r\n-\r\n-            handleCloseConfirmDeleteDialog(false);\r\n-\r\n-        } catch (err: any) {\r\n-            console.error(\"Erro ao excluir participante:\", err);\r\n-            alert(`Erro ao excluir participante: ${err.message}`);\r\n-        }\r\n-    };\r\n-\r\n-    // --- Calcula se o influenciador selecionado já está na lista (para desabilitar botão) ---\r\n-    const isInfluencerAlreadyAdded = modalMode === 'add' &&\r\n-                                     newInfluencerForm.influencer_id !== '' &&\r\n-                                     participantes.some(p => p.influencer_id === newInfluencerForm.influencer_id);\r\n-    // <------------------------------------------------------------------------>\r\n-\r\n-\r\n-  // --- Renderização ---\r\n-  return (\r\n-    <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n-      <div className='flex justify-between items-center mb-2'>\r\n-      <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n-      {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n-      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-        <DialogTrigger asChild>\r\n-          <Button size=\"sm\" className=\"mb-4\" onClick={handleAddClick}>\r\n-            <PlusCircle className=\"mr-2 h-4 w-4\" /> Adicionar Influenciador\r\n-          </Button>\r\n-        </DialogTrigger>\r\n-\r\n-        {/* Conteúdo do Modal Adicionar/Editar */}\r\n-        <DialogContent className=\"sm:max-w-[425px]\">\r\n-          <DialogHeader>\r\n-            <DialogTitle>\r\n-              {modalMode === 'add' ? 'Adicionar Novo Participante' : 'Editar Participante'}\r\n-            </DialogTitle>\r\n-            <DialogDescription>\r\n-              {modalMode === 'add'\r\n-                ? 'Selecione um influenciador e defina as métricas iniciais para este evento.'\r\n-                : `Editando métricas para: ${editingParticipant?.nome ?? 'Participante'}.`}\r\n-            </DialogDescription>\r\n-          </DialogHeader>\r\n-\r\n-          <div className=\"grid gap-4 py-4\">\r\n-            {/* Campo Influenciador (Select) */}\r\n-            <div className=\"space-y-1.5\">\r\n-              <Label className=\"text-right\">Influenciador</Label>\r\n-              <div className=\"col-span-3\"> {/* Ajuste de layout, remova col-span-3 se não precisar */}\r\n-                {loadingInfluencers ? (\r\n-                  <div className=\"flex items-center gap-2 text-gray-500\">\r\n-                    <Loader2 className=\"h-4 w-4 animate-spin\" /> Carregando...\r\n-                  </div>\r\n-                ) : errorLoadingInfluencers ? (\r\n-                  <p className=\"text-red-500 text-sm\">{errorLoadingInfluencers}</p>\r\n-                ) : (\r\n-                  <Select\r\n-                    onValueChange={handleSelectInfluencer}\r\n-                    value={newInfluencerForm.influencer_id}\r\n-                    disabled={modalMode === 'edit'} // Desabilita seleção em modo edição\r\n-                  >\r\n-                    <SelectTrigger>\r\n-                      {newInfluencerForm.influencer_id\r\n-                        ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome || `ID: ${newInfluencerForm.influencer_id}`\r\n-                        : 'Selecione um influenciador'}\r\n-                    </SelectTrigger>\r\n-                    <SelectContent>\r\n-                      {availableInfluencers.map((inf) => (\r\n-                        <SelectItem key={inf.id} value={inf.id}>\r\n-                           {inf.nome || `Sem nome - ID: ${inf.id}`}\r\n-                        </SelectItem>\r\n-                      ))}\r\n-                    </SelectContent>\r\n-                  </Select>\r\n-                )}\r\n-                {/* Mensagem de duplicidade opcional */}\r\n-                {modalMode === 'add' && isInfluencerAlreadyAdded && (\r\n-                    <p className=\"text-sm font-medium text-yellow-600 mt-1\">\r\n-                        Este influenciador já está neste evento.\r\n-                    </p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-\r\n-            {/* Campos Meta e Atingido */}\r\n-            <div className='grid grid-cols-2 items-center gap-4'>\r\n-                <div className=\"space-y-1.5\">\r\n-                  <Label className=\"text-right\">Meta</Label>\r\n-                  <Input\r\n-                    name=\"meta\"\r\n-                    type=\"number\"\r\n-                    value={newInfluencerForm.meta}\r\n-                    onChange={handleNewFormChange}\r\n-                    className=\"flex-grow\"\r\n-                  />\r\n-                </div>\r\n-\r\n-                <div className=\"space-y-1.5\">\r\n-                  <Label className=\"text-right\">Atingido</Label>\r\n-                  <Input\r\n-                    name=\"atingido\"\r\n-                    type=\"number\"\r\n-                    value={newInfluencerForm.atingido}\r\n-                    onChange={handleNewFormChange}\r\n-                    className=\"flex-grow\"\r\n-                  />\r\n-                </div>\r\n-            </div>\r\n-          </div>\r\n-\r\n-          <DialogFooter>\r\n-            <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n-            <Button\r\n-              type=\"button\"\r\n-              onClick={handleSave}\r\n-              // <-- DESABILITAÇÃO DO BOTÃO AQUI -->\r\n-              disabled={\r\n-                isSaving || // Desabilita se estiver salvando\r\n-                loadingInfluencers || // Opcional: desabilita se ainda carregando a lista de influenciadores\r\n-                (modalMode === 'add' && !newInfluencerForm.influencer_id) || // Em modo adicionar, desabilita se nenhum influencer selecionado\r\n-                isInfluencerAlreadyAdded // <-- NOVO: Desabilita se o influenciador selecionado já está na lista\r\n-              }\r\n-            >\r\n-              {/* Ícone de loading condicional */}\r\n-              {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n-              {modalMode === 'add' ? 'Salvar Influenciador' : 'Atualizar'}\r\n-            </Button>\r\n-          </DialogFooter>\r\n-        </DialogContent>\r\n-      </Dialog>\r\n-      </div>\r\n-\r\n-\r\n-      {/* Modal de Confirmação de Exclusão (Mantido) */}\r\n-      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={handleCloseConfirmDeleteDialog}>\r\n-        <AlertDialogContent>\r\n-          <AlertDialogHeader>\r\n-            <AlertDialogTitle>Tem certeza?</AlertDialogTitle>\r\n-            <AlertDialogDescription>\r\n-              Esta ação não pode ser desfeita. Isso removerá permanentemente o participante{' '}\r\n-              <strong>{participantToDelete?.nome ?? `ID: ${participantToDelete?.influencer_id ?? ''}`}</strong>{' '}\r\n-              deste evento.\r\n-            </AlertDialogDescription>\r\n-          </AlertDialogHeader>\r\n-          <AlertDialogFooter>\r\n-            <AlertDialogCancel onClick={() => handleCloseConfirmDeleteDialog(false)}>Cancelar</AlertDialogCancel>\r\n-            <AlertDialogAction onClick={handleDeleteParticipant}>Continuar</AlertDialogAction>\r\n-          </AlertDialogFooter>\r\n-        </AlertDialogContent>\r\n-      </AlertDialog>\r\n-\r\n-\r\n-      {/* Tabela de Participantes (Mantida) */}\r\n-      <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n-        <thead className=''>\r\n-          <tr>\r\n-            <th>Nome</th>\r\n-            <th>Atingido</th>\r\n-            <th>Meta</th>\r\n-            <th>Ações</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody className=''>\r\n-          {participantes.map(p => (\r\n-            <tr key={p.id} className=\"bg-gray-100 p-2 rounded\">\r\n-              <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n-              <td>{p.atingido}</td>\r\n-              <td>{p.meta}</td>\r\n-              <td className=\"flex gap-2\">\r\n-                <Button\r\n-                  size=\"sm\"\r\n-                  variant=\"outline\"\r\n-                  onClick={() => handleEditar(p)}\r\n-                >\r\n-                  Editar\r\n-                </Button>\r\n-                <Button\r\n-                  size=\"sm\"\r\n-                  style={{ backgroundColor: '#ce1c1c' }}\r\n-                  variant=\"shadow\"\r\n-                  onClick={() => handleStartDelete(p)}\r\n-                >\r\n-                   <Trash2 className=\"h-4 w-4\" />\r\n-                 </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  )\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746574487154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,28 +254,29 @@\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {participantes.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n-                <td className=\"px-4 py-2 flex items-center gap-2\">\r\n-                  {p.nome}\r\n-                </td>\r\n-                <td className=\"px-4 py-2 text-center\">{p.atingido}</td>\r\n-                <td className=\"px-4 py-2 text-center\">{p.meta}</td>\r\n-                <td className=\"px-4 py-2 text-right\">\r\n-                  <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-                      <Pencil className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-                      <Trash2 className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                  </div>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n+  {paginated.map(p => (\r\n+    <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+      <td className=\"px-4 py-1.5 align-middle flex items-center gap-2\">\r\n+        {p.nome}\r\n+      </td>\r\n+      <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n+      <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n+      <td className=\"px-4 py-1.5 text-right align-middle\">\r\n+        <div className=\"flex justify-end gap-2\">\r\n+          <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+            <Pencil className=\"h-4 w-4\" />\r\n+          </Button>\r\n+          <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+            <Trash2 className=\"h-4 w-4\" />\r\n+          </Button>\r\n+        </div>\r\n+      </td>\r\n+    </tr>\r\n+  ))}\r\n+</tbody>\r\n+\r\n         </table>\r\n       </div>\r\n \r\n       <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n"
                },
                {
                    "date": 1746574537687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,13 @@\n     } catch (err: any) {\r\n       alert(err.message)\r\n     }\r\n   }\r\n-\r\n+  const itemsPerPage = 5\r\n+  const [currentPage, setCurrentPage] = useState(1)\r\n+  \r\n+  const totalPages = Math.ceil(participantes.length / itemsPerPage)\r\n+  const paginated = participantes.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\r\n   return (\r\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n       <div className='flex justify-between items-center mb-4'>\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n@@ -245,8 +249,9 @@\n       </div>\r\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n+          \r\n           <thead>\r\n             <tr className=\"bg-gray-100 text-gray-700\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n@@ -276,8 +281,27 @@\n   ))}\r\n </tbody>\r\n \r\n         </table>\r\n+        <div className=\"flex justify-end items-center gap-2 mt-4 text-sm\">\r\n+  <Button\r\n+    size=\"sm\"\r\n+    variant=\"outline\"\r\n+    disabled={currentPage === 1}\r\n+    onClick={() => setCurrentPage((p) => p - 1)}\r\n+  >\r\n+    Anterior\r\n+  </Button>\r\n+  <span>Página {currentPage} de {totalPages}</span>\r\n+  <Button\r\n+    size=\"sm\"\r\n+    variant=\"outline\"\r\n+    disabled={currentPage === totalPages}\r\n+    onClick={() => setCurrentPage((p) => p + 1)}\r\n+  >\r\n+    Próxima\r\n+  </Button>\r\n+</div>\r\n       </div>\r\n \r\n       <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n         <AlertDialogContent>\r\n"
                },
                {
                    "date": 1746574717990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { useState, useEffect } from 'react'\r\n import { Input } from '@/components/ui/input'\r\n import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2, Pencil } from 'lucide-react'\r\n+import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n import {\r\n   Dialog,\r\n   DialogContent,\r\n   DialogHeader,\r\n@@ -65,8 +65,26 @@\n   const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n   const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n   const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n \r\n+  const itemsPerPage = 5\r\n+  const [pageIndex, setPageIndex] = useState(0)\r\n+  const pageCount = Math.ceil(participantes.length / itemsPerPage)\r\n+  const paginated = participantes.slice(\r\n+    pageIndex * itemsPerPage,\r\n+    pageIndex * itemsPerPage + itemsPerPage\r\n+  )\r\n+\r\n+  const table = {\r\n+    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n+    getState: () => ({ pagination: { pageIndex } }),\r\n+    setPageIndex: (index: number) => setPageIndex(index),\r\n+    getCanPreviousPage: () => pageIndex > 0,\r\n+    getCanNextPage: () => pageIndex < pageCount - 1,\r\n+    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n+    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n+  }\r\n+\r\n   useEffect(() => {\r\n     const fetchInfluencers = async () => {\r\n       try {\r\n         setLoadingInfluencers(true)\r\n@@ -186,13 +204,9 @@\n     } catch (err: any) {\r\n       alert(err.message)\r\n     }\r\n   }\r\n-  const itemsPerPage = 5\r\n-  const [currentPage, setCurrentPage] = useState(1)\r\n-  \r\n-  const totalPages = Math.ceil(participantes.length / itemsPerPage)\r\n-  const paginated = participantes.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\r\n+\r\n   return (\r\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n       <div className='flex justify-between items-center mb-4'>\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n@@ -249,9 +263,8 @@\n       </div>\r\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n-          \r\n           <thead>\r\n             <tr className=\"bg-gray-100 text-gray-700\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n@@ -259,49 +272,69 @@\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-  {paginated.map(p => (\r\n-    <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n-      <td className=\"px-4 py-1.5 align-middle flex items-center gap-2\">\r\n-        {p.nome}\r\n-      </td>\r\n-      <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n-      <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n-      <td className=\"px-4 py-1.5 text-right align-middle\">\r\n-        <div className=\"flex justify-end gap-2\">\r\n-          <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-            <Pencil className=\"h-4 w-4\" />\r\n-          </Button>\r\n-          <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-            <Trash2 className=\"h-4 w-4\" />\r\n-          </Button>\r\n+            {paginated.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n+                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+            {paginated.length === 0 && (\r\n+              <tr>\r\n+                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n+                  Nenhum participante encontrado nesta página.\r\n+                </td>\r\n+              </tr>\r\n+            )}\r\n+          </tbody>\r\n+        </table>\r\n+\r\n+        {/* Paginação com botões numerados */}\r\n+        <div className=\"flex items-center justify-end py-4 px-4\">\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.previousPage()}\r\n+              disabled={!table.getCanPreviousPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronLeft className=\"w-4 h-4\" />\r\n+            </Button>\r\n+            {table.getPageOptions().map((page, pageIndex) => (\r\n+              <Button\r\n+                key={`page-${pageIndex}`}\r\n+                onClick={() => table.setPageIndex(pageIndex)}\r\n+                size=\"icon\"\r\n+                className=\"w-8 h-8\"\r\n+                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n+              >\r\n+                {page + 1}\r\n+              </Button>\r\n+            ))}\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.nextPage()}\r\n+              disabled={!table.getCanNextPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronRight className=\"w-4 h-4\" />\r\n+            </Button>\r\n+          </div>\r\n         </div>\r\n-      </td>\r\n-    </tr>\r\n-  ))}\r\n-</tbody>\r\n-\r\n-        </table>\r\n-        <div className=\"flex justify-end items-center gap-2 mt-4 text-sm\">\r\n-  <Button\r\n-    size=\"sm\"\r\n-    variant=\"outline\"\r\n-    disabled={currentPage === 1}\r\n-    onClick={() => setCurrentPage((p) => p - 1)}\r\n-  >\r\n-    Anterior\r\n-  </Button>\r\n-  <span>Página {currentPage} de {totalPages}</span>\r\n-  <Button\r\n-    size=\"sm\"\r\n-    variant=\"outline\"\r\n-    disabled={currentPage === totalPages}\r\n-    onClick={() => setCurrentPage((p) => p + 1)}\r\n-  >\r\n-    Próxima\r\n-  </Button>\r\n-</div>\r\n       </div>\r\n \r\n       <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n         <AlertDialogContent>\r\n"
                },
                {
                    "date": 1746574732171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n   const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n   const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n   const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n \r\n-  const itemsPerPage = 5\r\n+  const itemsPerPage = 10\r\n   const [pageIndex, setPageIndex] = useState(0)\r\n   const pageCount = Math.ceil(participantes.length / itemsPerPage)\r\n   const paginated = participantes.slice(\r\n     pageIndex * itemsPerPage,\r\n"
                },
                {
                    "date": 1746574909754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,14 +67,20 @@\n   const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n \r\n   const itemsPerPage = 10\r\n   const [pageIndex, setPageIndex] = useState(0)\r\n-  const pageCount = Math.ceil(participantes.length / itemsPerPage)\r\n-  const paginated = participantes.slice(\r\n-    pageIndex * itemsPerPage,\r\n-    pageIndex * itemsPerPage + itemsPerPage\r\n-  )\r\n+  const participantesFiltrados = participantes.filter(p =>\r\n+  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n+)\r\n \r\n+const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n+\r\n+const paginated = participantesFiltrados.slice(\r\n+  pageIndex * itemsPerPage,\r\n+  pageIndex * itemsPerPage + itemsPerPage\r\n+)\r\n+  const [busca, setBusca] = useState('')\r\n+\r\n   const table = {\r\n     getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n     getState: () => ({ pagination: { pageIndex } }),\r\n     setPageIndex: (index: number) => setPageIndex(index),\r\n@@ -207,12 +213,19 @@\n   }\r\n \r\n   return (\r\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n-      <div className='flex justify-between items-center mb-4'>\r\n-        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+<div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n+<h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n+          <Input\r\n+  placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+  value={busca}\r\n+  onChange={(e) => setBusca(e.target.value)}\r\n+  className=\"max-w-xs\"\r\n+  type=\"text\"\r\n+/>\r\n             <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n             </Button>\r\n           </DialogTrigger>\r\n"
                },
                {
                    "date": 1746574941898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,15 +217,8 @@\n <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n-          <Input\r\n-  placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-  value={busca}\r\n-  onChange={(e) => setBusca(e.target.value)}\r\n-  className=\"max-w-xs\"\r\n-  type=\"text\"\r\n-/>\r\n             <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n             </Button>\r\n           </DialogTrigger>\r\n"
                },
                {
                    "date": 1746574965279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,14 @@\n   const [pageIndex, setPageIndex] = useState(0)\r\n   const participantesFiltrados = participantes.filter(p =>\r\n   p.nome.toLowerCase().includes(busca.toLowerCase())\r\n )\r\n-\r\n+const [busca, setBusca] = useState('')\r\n const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n-\r\n const paginated = participantesFiltrados.slice(\r\n   pageIndex * itemsPerPage,\r\n   pageIndex * itemsPerPage + itemsPerPage\r\n )\r\n-  const [busca, setBusca] = useState('')\r\n \r\n   const table = {\r\n     getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n     getState: () => ({ pagination: { pageIndex } }),\r\n"
                },
                {
                    "date": 1746574985714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+'use client'\r\n+\r\n+import { useState, useEffect } from 'react'\r\n+import { Input } from '@/components/ui/input'\r\n+import { Button } from '@/components/ui/button'\r\n+import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+  DialogDescription,\r\n+  DialogFooter,\r\n+  DialogTrigger,\r\n+} from '@/components/ui/dialog'\r\n+import {\r\n+  Select,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+} from '@/components/ui/select'\r\n+import { Label } from '@/components/ui/label'\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\"\r\n+import Image from 'next/image'\r\n+\r\n+interface Participante {\r\n+  id: string\r\n+  influencer_id: string\r\n+  nome: string\r\n+  imagem: string\r\n+  atingido: number\r\n+  meta: number\r\n+}\r\n+\r\n+interface InfluencerOption {\r\n+  id: string\r\n+  nome: string | null\r\n+  imagem: string | null\r\n+}\r\n+\r\n+interface Props {\r\n+  participantes: Participante[]\r\n+  eventoId: string\r\n+}\r\n+\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n+  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n+  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n+  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n+  const [isSaving, setIsSaving] = useState(false)\r\n+  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n+  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n+  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n+  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n+  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n+  const [busca, setBusca] = useState('')\r\n+\r\n+  const itemsPerPage = 10\r\n+  const [pageIndex, setPageIndex] = useState(0)\r\n+  const participantesFiltrados = participantes.filter(p =>\r\n+  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n+)\r\n+const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n+const paginated = participantesFiltrados.slice(\r\n+  pageIndex * itemsPerPage,\r\n+  pageIndex * itemsPerPage + itemsPerPage\r\n+)\r\n+\r\n+  const table = {\r\n+    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n+    getState: () => ({ pagination: { pageIndex } }),\r\n+    setPageIndex: (index: number) => setPageIndex(index),\r\n+    getCanPreviousPage: () => pageIndex > 0,\r\n+    getCanNextPage: () => pageIndex < pageCount - 1,\r\n+    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n+    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const fetchInfluencers = async () => {\r\n+      try {\r\n+        setLoadingInfluencers(true)\r\n+        const res = await fetch('/api/influenciadores')\r\n+        const data = await res.json()\r\n+        setAvailableInfluencers(data.map((i: any) => ({\r\n+          id: i.id,\r\n+          nome: i.nome,\r\n+          imagem: i.imagem,\r\n+        })))\r\n+      } catch (err: any) {\r\n+        setErrorLoadingInfluencers(err.message)\r\n+      } finally {\r\n+        setLoadingInfluencers(false)\r\n+      }\r\n+    }\r\n+    fetchInfluencers()\r\n+  }, [])\r\n+\r\n+  const handleAddClick = () => {\r\n+    setModalMode('add')\r\n+    setEditingParticipant(null)\r\n+    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleEditar = (p: Participante) => {\r\n+    setModalMode('edit')\r\n+    setEditingParticipant(p)\r\n+    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleCloseModal = (open: boolean) => {\r\n+    setIsModalOpen(open)\r\n+    if (!open) {\r\n+      setEditingParticipant(null)\r\n+      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+      setModalMode('add')\r\n+    }\r\n+  }\r\n+\r\n+  const handleSelectInfluencer = (value: string) => {\r\n+    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n+  }\r\n+\r\n+  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewInfluencerForm(prev => ({\r\n+      ...prev,\r\n+      [name]: +value,\r\n+    }))\r\n+  }\r\n+\r\n+  const handleSave = async () => {\r\n+    const { influencer_id, meta, atingido } = newInfluencerForm\r\n+    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n+\r\n+    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n+    if (modalMode === 'add' && isDuplicate) {\r\n+      alert('Este influenciador já participa deste evento.')\r\n+      return\r\n+    }\r\n+\r\n+    setIsSaving(true)\r\n+    try {\r\n+      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n+      const body = modalMode === 'add'\r\n+        ? newInfluencerForm\r\n+        : { participante_id: editingParticipant?.id, meta, atingido }\r\n+\r\n+      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n+        method,\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body),\r\n+      })\r\n+\r\n+      const data = await res.json()\r\n+      if (modalMode === 'add') {\r\n+        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n+        const novo: Participante = {\r\n+          id: data.id,\r\n+          influencer_id,\r\n+          nome: info?.nome || 'Sem nome',\r\n+          imagem: info?.imagem || '',\r\n+          meta: data.meta,\r\n+          atingido: data.atingido,\r\n+        }\r\n+        setParticipantes(prev => [...prev, novo])\r\n+      } else {\r\n+        setParticipantes(prev =>\r\n+          prev.map(p => p.id === editingParticipant?.id\r\n+            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n+            : p))\r\n+      }\r\n+      handleCloseModal(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    } finally {\r\n+      setIsSaving(false)\r\n+    }\r\n+  }\r\n+\r\n+  const handleStartDelete = (p: Participante) => {\r\n+    setParticipantToDelete(p)\r\n+    setIsConfirmDeleteDialogOpen(true)\r\n+  }\r\n+\r\n+  const handleDeleteParticipant = async () => {\r\n+    if (!participantToDelete) return\r\n+    try {\r\n+      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n+        method: 'DELETE',\r\n+      })\r\n+      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n+      setIsConfirmDeleteDialogOpen(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n+<div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n+<h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n+            </Button>\r\n+          </DialogTrigger>\r\n+          <DialogContent className=\"sm:max-w-[500px]\">\r\n+            <DialogHeader>\r\n+              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n+              <DialogDescription>\r\n+                Preencha os dados de meta e atingido para o influenciador\r\n+              </DialogDescription>\r\n+            </DialogHeader>\r\n+\r\n+            <div className=\"grid gap-4 py-4\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                onValueChange={handleSelectInfluencer}\r\n+                value={newInfluencerForm.influencer_id}\r\n+                disabled={modalMode === 'edit'}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  {newInfluencerForm.influencer_id\r\n+                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n+                    : 'Selecione'}\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {availableInfluencers.map((inf) => (\r\n+                    <SelectItem key={inf.id} value={inf.id}>\r\n+                      {inf.nome}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n+\r\n+              <Label>Meta</Label>\r\n+              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n+              <Label>Atingido</Label>\r\n+              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n+            </div>\r\n+\r\n+            <DialogFooter>\r\n+              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n+              <Button onClick={handleSave} disabled={isSaving}>\r\n+                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n+                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n+              </Button>\r\n+            </DialogFooter>\r\n+          </DialogContent>\r\n+        </Dialog>\r\n+      </div>\r\n+\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full text-sm text-left\">\r\n+          <thead>\r\n+            <tr className=\"bg-gray-100 text-gray-700\">\r\n+              <th className=\"px-4 py-2\">Nome</th>\r\n+              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n+              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n+              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {paginated.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n+                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+            {paginated.length === 0 && (\r\n+              <tr>\r\n+                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n+                  Nenhum participante encontrado nesta página.\r\n+                </td>\r\n+              </tr>\r\n+            )}\r\n+          </tbody>\r\n+        </table>\r\n+\r\n+        {/* Paginação com botões numerados */}\r\n+        <div className=\"flex items-center justify-end py-4 px-4\">\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.previousPage()}\r\n+              disabled={!table.getCanPreviousPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronLeft className=\"w-4 h-4\" />\r\n+            </Button>\r\n+            {table.getPageOptions().map((page, pageIndex) => (\r\n+              <Button\r\n+                key={`page-${pageIndex}`}\r\n+                onClick={() => table.setPageIndex(pageIndex)}\r\n+                size=\"icon\"\r\n+                className=\"w-8 h-8\"\r\n+                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n+              >\r\n+                {page + 1}\r\n+              </Button>\r\n+            ))}\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.nextPage()}\r\n+              disabled={!table.getCanNextPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronRight className=\"w-4 h-4\" />\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n+        <AlertDialogContent>\r\n+          <AlertDialogHeader>\r\n+            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n+            <AlertDialogDescription>\r\n+              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n+            </AlertDialogDescription>\r\n+          </AlertDialogHeader>\r\n+          <AlertDialogFooter>\r\n+            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n+            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n+          </AlertDialogFooter>\r\n+        </AlertDialogContent>\r\n+      </AlertDialog>\r\n+    </div>\r\n+  )\r\n+}\r\n"
                },
                {
                    "date": 1746575005114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,8 @@\n   const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n   const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n   const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n   const [busca, setBusca] = useState('')\r\n-\r\n   const itemsPerPage = 10\r\n   const [pageIndex, setPageIndex] = useState(0)\r\n   const participantesFiltrados = participantes.filter(p =>\r\n   p.nome.toLowerCase().includes(busca.toLowerCase())\r\n@@ -215,367 +214,16 @@\n <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n-            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n-              <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n-            </Button>\r\n-          </DialogTrigger>\r\n-          <DialogContent className=\"sm:max-w-[500px]\">\r\n-            <DialogHeader>\r\n-              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n-              <DialogDescription>\r\n-                Preencha os dados de meta e atingido para o influenciador\r\n-              </DialogDescription>\r\n-            </DialogHeader>\r\n+          <Input\r\n+  placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+  value={busca}\r\n+  onChange={(e) => setBusca(e.target.value)}\r\n+  className=\"max-w-xs\"\r\n+  type=\"text\"\r\n+/>\r\n \r\n-            <div className=\"grid gap-4 py-4\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                onValueChange={handleSelectInfluencer}\r\n-                value={newInfluencerForm.influencer_id}\r\n-                disabled={modalMode === 'edit'}\r\n-              >\r\n-                <SelectTrigger>\r\n-                  {newInfluencerForm.influencer_id\r\n-                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n-                    : 'Selecione'}\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {availableInfluencers.map((inf) => (\r\n-                    <SelectItem key={inf.id} value={inf.id}>\r\n-                      {inf.nome}\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-\r\n-              <Label>Meta</Label>\r\n-              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n-              <Label>Atingido</Label>\r\n-              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n-            </div>\r\n-\r\n-            <DialogFooter>\r\n-              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n-              <Button onClick={handleSave} disabled={isSaving}>\r\n-                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n-                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n-              </Button>\r\n-            </DialogFooter>\r\n-          </DialogContent>\r\n-        </Dialog>\r\n-      </div>\r\n-\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full text-sm text-left\">\r\n-          <thead>\r\n-            <tr className=\"bg-gray-100 text-gray-700\">\r\n-              <th className=\"px-4 py-2\">Nome</th>\r\n-              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n-              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n-              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n-                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n-                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n-                  <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-                      <Pencil className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-                      <Trash2 className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                  </div>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-            {paginated.length === 0 && (\r\n-              <tr>\r\n-                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n-                  Nenhum participante encontrado nesta página.\r\n-                </td>\r\n-              </tr>\r\n-            )}\r\n-          </tbody>\r\n-        </table>\r\n-\r\n-        {/* Paginação com botões numerados */}\r\n-        <div className=\"flex items-center justify-end py-4 px-4\">\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.previousPage()}\r\n-              disabled={!table.getCanPreviousPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronLeft className=\"w-4 h-4\" />\r\n-            </Button>\r\n-            {table.getPageOptions().map((page, pageIndex) => (\r\n-              <Button\r\n-                key={`page-${pageIndex}`}\r\n-                onClick={() => table.setPageIndex(pageIndex)}\r\n-                size=\"icon\"\r\n-                className=\"w-8 h-8\"\r\n-                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n-              >\r\n-                {page + 1}\r\n-              </Button>\r\n-            ))}\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.nextPage()}\r\n-              disabled={!table.getCanNextPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronRight className=\"w-4 h-4\" />\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n-        <AlertDialogContent>\r\n-          <AlertDialogHeader>\r\n-            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n-            <AlertDialogDescription>\r\n-              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n-            </AlertDialogDescription>\r\n-          </AlertDialogHeader>\r\n-          <AlertDialogFooter>\r\n-            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n-            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n-          </AlertDialogFooter>\r\n-        </AlertDialogContent>\r\n-      </AlertDialog>\r\n-    </div>\r\n-  )\r\n-}\r\n-'use client'\r\n-\r\n-import { useState, useEffect } from 'react'\r\n-import { Input } from '@/components/ui/input'\r\n-import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n-import {\r\n-  Dialog,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-  DialogDescription,\r\n-  DialogFooter,\r\n-  DialogTrigger,\r\n-} from '@/components/ui/dialog'\r\n-import {\r\n-  Select,\r\n-  SelectContent,\r\n-  SelectItem,\r\n-  SelectTrigger,\r\n-  SelectValue,\r\n-} from '@/components/ui/select'\r\n-import { Label } from '@/components/ui/label'\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-} from \"@/components/ui/alert-dialog\"\r\n-import Image from 'next/image'\r\n-\r\n-interface Participante {\r\n-  id: string\r\n-  influencer_id: string\r\n-  nome: string\r\n-  imagem: string\r\n-  atingido: number\r\n-  meta: number\r\n-}\r\n-\r\n-interface InfluencerOption {\r\n-  id: string\r\n-  nome: string | null\r\n-  imagem: string | null\r\n-}\r\n-\r\n-interface Props {\r\n-  participantes: Participante[]\r\n-  eventoId: string\r\n-}\r\n-\r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n-  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n-  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n-  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n-  const [isSaving, setIsSaving] = useState(false)\r\n-  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n-  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n-  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n-  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n-  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n-\r\n-  const itemsPerPage = 10\r\n-  const [pageIndex, setPageIndex] = useState(0)\r\n-  const participantesFiltrados = participantes.filter(p =>\r\n-  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n-)\r\n-const [busca, setBusca] = useState('')\r\n-const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n-const paginated = participantesFiltrados.slice(\r\n-  pageIndex * itemsPerPage,\r\n-  pageIndex * itemsPerPage + itemsPerPage\r\n-)\r\n-\r\n-  const table = {\r\n-    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n-    getState: () => ({ pagination: { pageIndex } }),\r\n-    setPageIndex: (index: number) => setPageIndex(index),\r\n-    getCanPreviousPage: () => pageIndex > 0,\r\n-    getCanNextPage: () => pageIndex < pageCount - 1,\r\n-    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n-    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n-  }\r\n-\r\n-  useEffect(() => {\r\n-    const fetchInfluencers = async () => {\r\n-      try {\r\n-        setLoadingInfluencers(true)\r\n-        const res = await fetch('/api/influenciadores')\r\n-        const data = await res.json()\r\n-        setAvailableInfluencers(data.map((i: any) => ({\r\n-          id: i.id,\r\n-          nome: i.nome,\r\n-          imagem: i.imagem,\r\n-        })))\r\n-      } catch (err: any) {\r\n-        setErrorLoadingInfluencers(err.message)\r\n-      } finally {\r\n-        setLoadingInfluencers(false)\r\n-      }\r\n-    }\r\n-    fetchInfluencers()\r\n-  }, [])\r\n-\r\n-  const handleAddClick = () => {\r\n-    setModalMode('add')\r\n-    setEditingParticipant(null)\r\n-    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleEditar = (p: Participante) => {\r\n-    setModalMode('edit')\r\n-    setEditingParticipant(p)\r\n-    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleCloseModal = (open: boolean) => {\r\n-    setIsModalOpen(open)\r\n-    if (!open) {\r\n-      setEditingParticipant(null)\r\n-      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-      setModalMode('add')\r\n-    }\r\n-  }\r\n-\r\n-  const handleSelectInfluencer = (value: string) => {\r\n-    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n-  }\r\n-\r\n-  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const { name, value } = e.target\r\n-    setNewInfluencerForm(prev => ({\r\n-      ...prev,\r\n-      [name]: +value,\r\n-    }))\r\n-  }\r\n-\r\n-  const handleSave = async () => {\r\n-    const { influencer_id, meta, atingido } = newInfluencerForm\r\n-    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n-\r\n-    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n-    if (modalMode === 'add' && isDuplicate) {\r\n-      alert('Este influenciador já participa deste evento.')\r\n-      return\r\n-    }\r\n-\r\n-    setIsSaving(true)\r\n-    try {\r\n-      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n-      const body = modalMode === 'add'\r\n-        ? newInfluencerForm\r\n-        : { participante_id: editingParticipant?.id, meta, atingido }\r\n-\r\n-      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n-        method,\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body),\r\n-      })\r\n-\r\n-      const data = await res.json()\r\n-      if (modalMode === 'add') {\r\n-        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n-        const novo: Participante = {\r\n-          id: data.id,\r\n-          influencer_id,\r\n-          nome: info?.nome || 'Sem nome',\r\n-          imagem: info?.imagem || '',\r\n-          meta: data.meta,\r\n-          atingido: data.atingido,\r\n-        }\r\n-        setParticipantes(prev => [...prev, novo])\r\n-      } else {\r\n-        setParticipantes(prev =>\r\n-          prev.map(p => p.id === editingParticipant?.id\r\n-            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n-            : p))\r\n-      }\r\n-      handleCloseModal(false)\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    } finally {\r\n-      setIsSaving(false)\r\n-    }\r\n-  }\r\n-\r\n-  const handleStartDelete = (p: Participante) => {\r\n-    setParticipantToDelete(p)\r\n-    setIsConfirmDeleteDialogOpen(true)\r\n-  }\r\n-\r\n-  const handleDeleteParticipant = async () => {\r\n-    if (!participantToDelete) return\r\n-    try {\r\n-      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n-        method: 'DELETE',\r\n-      })\r\n-      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n-      setIsConfirmDeleteDialogOpen(false)\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n-<div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n-<h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-          <DialogTrigger asChild>\r\n             <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n             </Button>\r\n           </DialogTrigger>\r\n"
                },
                {
                    "date": 1746575016729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,18 +212,19 @@\n   return (\r\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-          <DialogTrigger asChild>\r\n-          <Input\r\n+<Input\r\n   placeholder=\"Filtrar pelo nome do influenciador...\"\r\n   value={busca}\r\n   onChange={(e) => setBusca(e.target.value)}\r\n   className=\"max-w-xs\"\r\n   type=\"text\"\r\n />\r\n \r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            \r\n             <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n             </Button>\r\n           </DialogTrigger>\r\n"
                },
                {
                    "date": 1746575038018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,16 +212,8 @@\n   return (\r\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-<Input\r\n-  placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-  value={busca}\r\n-  onChange={(e) => setBusca(e.target.value)}\r\n-  className=\"max-w-xs\"\r\n-  type=\"text\"\r\n-/>\r\n-\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n             <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n@@ -271,8 +263,16 @@\n               </Button>\r\n             </DialogFooter>\r\n           </DialogContent>\r\n         </Dialog>\r\n+        <Input\r\n+  placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+  value={busca}\r\n+  onChange={(e) => setBusca(e.target.value)}\r\n+  className=\"max-w-xs\"\r\n+  type=\"text\"\r\n+/>\r\n+\r\n       </div>\r\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n"
                },
                {
                    "date": 1746575065375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n             <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n-              <PlusCircle className=\"h-4 w-4\" /> Adicionar\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n             <DialogHeader>\r\n@@ -263,16 +263,9 @@\n               </Button>\r\n             </DialogFooter>\r\n           </DialogContent>\r\n         </Dialog>\r\n-        <Input\r\n-  placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-  value={busca}\r\n-  onChange={(e) => setBusca(e.target.value)}\r\n-  className=\"max-w-xs\"\r\n-  type=\"text\"\r\n-/>\r\n-\r\n+        \r\n       </div>\r\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n"
                },
                {
                    "date": 1746575075098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n+            <Button size=\"default\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746575083832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"default\" className=\"flex items-center gap-2\">\r\n+            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746575090464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"sm\" className=\"flex items-center gap-2\">\r\n+            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746575137376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,8 +263,14 @@\n               </Button>\r\n             </DialogFooter>\r\n           </DialogContent>\r\n         </Dialog>\r\n+        <Input\r\n+    placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+    value={busca}\r\n+    onChange={(e) => setBusca(e.target.value)}\r\n+    className=\"max-w-xs\"\r\n+  />\r\n         \r\n       </div>\r\n \r\n       <div className=\"overflow-x-auto\">\r\n"
                },
                {
                    "date": 1746575228016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,367 @@\n+'use client'\r\n+\r\n+import { useState, useEffect } from 'react'\r\n+import { Input } from '@/components/ui/input'\r\n+import { Button } from '@/components/ui/button'\r\n+import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+  DialogDescription,\r\n+  DialogFooter,\r\n+  DialogTrigger,\r\n+} from '@/components/ui/dialog'\r\n+import {\r\n+  Select,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+} from '@/components/ui/select'\r\n+import { Label } from '@/components/ui/label'\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\"\r\n+import Image from 'next/image'\r\n+\r\n+interface Participante {\r\n+  id: string\r\n+  influencer_id: string\r\n+  nome: string\r\n+  imagem: string\r\n+  atingido: number\r\n+  meta: number\r\n+}\r\n+\r\n+interface InfluencerOption {\r\n+  id: string\r\n+  nome: string | null\r\n+  imagem: string | null\r\n+}\r\n+\r\n+interface Props {\r\n+  participantes: Participante[]\r\n+  eventoId: string\r\n+}\r\n+\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n+  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n+  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n+  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n+  const [isSaving, setIsSaving] = useState(false)\r\n+  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n+  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n+  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n+  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n+  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n+  const [busca, setBusca] = useState('')\r\n+  const itemsPerPage = 10\r\n+  const [pageIndex, setPageIndex] = useState(0)\r\n+  const participantesFiltrados = participantes.filter(p =>\r\n+  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n+)\r\n+const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n+const paginated = participantesFiltrados.slice(\r\n+  pageIndex * itemsPerPage,\r\n+  pageIndex * itemsPerPage + itemsPerPage\r\n+)\r\n+\r\n+  const table = {\r\n+    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n+    getState: () => ({ pagination: { pageIndex } }),\r\n+    setPageIndex: (index: number) => setPageIndex(index),\r\n+    getCanPreviousPage: () => pageIndex > 0,\r\n+    getCanNextPage: () => pageIndex < pageCount - 1,\r\n+    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n+    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const fetchInfluencers = async () => {\r\n+      try {\r\n+        setLoadingInfluencers(true)\r\n+        const res = await fetch('/api/influenciadores')\r\n+        const data = await res.json()\r\n+        setAvailableInfluencers(data.map((i: any) => ({\r\n+          id: i.id,\r\n+          nome: i.nome,\r\n+          imagem: i.imagem,\r\n+        })))\r\n+      } catch (err: any) {\r\n+        setErrorLoadingInfluencers(err.message)\r\n+      } finally {\r\n+        setLoadingInfluencers(false)\r\n+      }\r\n+    }\r\n+    fetchInfluencers()\r\n+  }, [])\r\n+\r\n+  const handleAddClick = () => {\r\n+    setModalMode('add')\r\n+    setEditingParticipant(null)\r\n+    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleEditar = (p: Participante) => {\r\n+    setModalMode('edit')\r\n+    setEditingParticipant(p)\r\n+    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleCloseModal = (open: boolean) => {\r\n+    setIsModalOpen(open)\r\n+    if (!open) {\r\n+      setEditingParticipant(null)\r\n+      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+      setModalMode('add')\r\n+    }\r\n+  }\r\n+\r\n+  const handleSelectInfluencer = (value: string) => {\r\n+    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n+  }\r\n+\r\n+  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewInfluencerForm(prev => ({\r\n+      ...prev,\r\n+      [name]: +value,\r\n+    }))\r\n+  }\r\n+\r\n+  const handleSave = async () => {\r\n+    const { influencer_id, meta, atingido } = newInfluencerForm\r\n+    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n+\r\n+    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n+    if (modalMode === 'add' && isDuplicate) {\r\n+      alert('Este influenciador já participa deste evento.')\r\n+      return\r\n+    }\r\n+\r\n+    setIsSaving(true)\r\n+    try {\r\n+      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n+      const body = modalMode === 'add'\r\n+        ? newInfluencerForm\r\n+        : { participante_id: editingParticipant?.id, meta, atingido }\r\n+\r\n+      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n+        method,\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body),\r\n+      })\r\n+\r\n+      const data = await res.json()\r\n+      if (modalMode === 'add') {\r\n+        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n+        const novo: Participante = {\r\n+          id: data.id,\r\n+          influencer_id,\r\n+          nome: info?.nome || 'Sem nome',\r\n+          imagem: info?.imagem || '',\r\n+          meta: data.meta,\r\n+          atingido: data.atingido,\r\n+        }\r\n+        setParticipantes(prev => [...prev, novo])\r\n+      } else {\r\n+        setParticipantes(prev =>\r\n+          prev.map(p => p.id === editingParticipant?.id\r\n+            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n+            : p))\r\n+      }\r\n+      handleCloseModal(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    } finally {\r\n+      setIsSaving(false)\r\n+    }\r\n+  }\r\n+\r\n+  const handleStartDelete = (p: Participante) => {\r\n+    setParticipantToDelete(p)\r\n+    setIsConfirmDeleteDialogOpen(true)\r\n+  }\r\n+\r\n+  const handleDeleteParticipant = async () => {\r\n+    if (!participantToDelete) return\r\n+    try {\r\n+      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n+        method: 'DELETE',\r\n+      })\r\n+      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n+      setIsConfirmDeleteDialogOpen(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n+      <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n+        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+        <div className='flex justify-between items-center'>\r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            \r\n+            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n+            </Button>\r\n+          </DialogTrigger>\r\n+          <DialogContent className=\"sm:max-w-[500px]\">\r\n+            <DialogHeader>\r\n+              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n+              <DialogDescription>\r\n+                Preencha os dados de meta e atingido para o influenciador\r\n+              </DialogDescription>\r\n+            </DialogHeader>\r\n+\r\n+            <div className=\"grid gap-4 py-4\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                onValueChange={handleSelectInfluencer}\r\n+                value={newInfluencerForm.influencer_id}\r\n+                disabled={modalMode === 'edit'}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  {newInfluencerForm.influencer_id\r\n+                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n+                    : 'Selecione'}\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {availableInfluencers.map((inf) => (\r\n+                    <SelectItem key={inf.id} value={inf.id}>\r\n+                      {inf.nome}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n+\r\n+              <Label>Meta</Label>\r\n+              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n+              <Label>Atingido</Label>\r\n+              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n+            </div>\r\n+\r\n+            <DialogFooter>\r\n+              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n+              <Button onClick={handleSave} disabled={isSaving}>\r\n+                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n+                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n+              </Button>\r\n+            </DialogFooter>\r\n+          </DialogContent>\r\n+        </Dialog>\r\n+        <Input\r\n+          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+          value={busca}\r\n+          onChange={(e) => setBusca(e.target.value)}\r\n+          className=\"max-w-xs\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full text-sm text-left\">\r\n+          <thead>\r\n+            <tr className=\"bg-gray-100 text-gray-700\">\r\n+              <th className=\"px-4 py-2\">Nome</th>\r\n+              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n+              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n+              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {paginated.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n+                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+            {paginated.length === 0 && (\r\n+              <tr>\r\n+                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n+                  Nenhum participante encontrado nesta página.\r\n+                </td>\r\n+              </tr>\r\n+            )}\r\n+          </tbody>\r\n+        </table>\r\n+\r\n+        {/* Paginação com botões numerados */}\r\n+        <div className=\"flex items-center justify-end py-4 px-4\">\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.previousPage()}\r\n+              disabled={!table.getCanPreviousPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronLeft className=\"w-4 h-4\" />\r\n+            </Button>\r\n+            {table.getPageOptions().map((page, pageIndex) => (\r\n+              <Button\r\n+                key={`page-${pageIndex}`}\r\n+                onClick={() => table.setPageIndex(pageIndex)}\r\n+                size=\"icon\"\r\n+                className=\"w-8 h-8\"\r\n+                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n+              >\r\n+                {page + 1}\r\n+              </Button>\r\n+            ))}\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.nextPage()}\r\n+              disabled={!table.getCanNextPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronRight className=\"w-4 h-4\" />\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n+        <AlertDialogContent>\r\n+          <AlertDialogHeader>\r\n+            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n+            <AlertDialogDescription>\r\n+              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n+            </AlertDialogDescription>\r\n+          </AlertDialogHeader>\r\n+          <AlertDialogFooter>\r\n+            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n+            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n+          </AlertDialogFooter>\r\n+        </AlertDialogContent>\r\n+      </AlertDialog>\r\n+    </div>\r\n+  )\r\n+}\r\n"
                },
                {
                    "date": 1746575236290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   return (\r\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-        <div className='flex justify-between items-center'>\r\n+        <div className='flex justify-between items-center gap-4'>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n             <Button size=\"md\" className=\"flex items-center gap-2\">\r\n@@ -364,370 +364,4 @@\n       </AlertDialog>\r\n     </div>\r\n   )\r\n }\r\n-'use client'\r\n-\r\n-import { useState, useEffect } from 'react'\r\n-import { Input } from '@/components/ui/input'\r\n-import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n-import {\r\n-  Dialog,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-  DialogDescription,\r\n-  DialogFooter,\r\n-  DialogTrigger,\r\n-} from '@/components/ui/dialog'\r\n-import {\r\n-  Select,\r\n-  SelectContent,\r\n-  SelectItem,\r\n-  SelectTrigger,\r\n-  SelectValue,\r\n-} from '@/components/ui/select'\r\n-import { Label } from '@/components/ui/label'\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-} from \"@/components/ui/alert-dialog\"\r\n-import Image from 'next/image'\r\n-\r\n-interface Participante {\r\n-  id: string\r\n-  influencer_id: string\r\n-  nome: string\r\n-  imagem: string\r\n-  atingido: number\r\n-  meta: number\r\n-}\r\n-\r\n-interface InfluencerOption {\r\n-  id: string\r\n-  nome: string | null\r\n-  imagem: string | null\r\n-}\r\n-\r\n-interface Props {\r\n-  participantes: Participante[]\r\n-  eventoId: string\r\n-}\r\n-\r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n-  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n-  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n-  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n-  const [isSaving, setIsSaving] = useState(false)\r\n-  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n-  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n-  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n-  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n-  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n-  const [busca, setBusca] = useState('')\r\n-  const itemsPerPage = 10\r\n-  const [pageIndex, setPageIndex] = useState(0)\r\n-  const participantesFiltrados = participantes.filter(p =>\r\n-  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n-)\r\n-const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n-const paginated = participantesFiltrados.slice(\r\n-  pageIndex * itemsPerPage,\r\n-  pageIndex * itemsPerPage + itemsPerPage\r\n-)\r\n-\r\n-  const table = {\r\n-    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n-    getState: () => ({ pagination: { pageIndex } }),\r\n-    setPageIndex: (index: number) => setPageIndex(index),\r\n-    getCanPreviousPage: () => pageIndex > 0,\r\n-    getCanNextPage: () => pageIndex < pageCount - 1,\r\n-    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n-    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n-  }\r\n-\r\n-  useEffect(() => {\r\n-    const fetchInfluencers = async () => {\r\n-      try {\r\n-        setLoadingInfluencers(true)\r\n-        const res = await fetch('/api/influenciadores')\r\n-        const data = await res.json()\r\n-        setAvailableInfluencers(data.map((i: any) => ({\r\n-          id: i.id,\r\n-          nome: i.nome,\r\n-          imagem: i.imagem,\r\n-        })))\r\n-      } catch (err: any) {\r\n-        setErrorLoadingInfluencers(err.message)\r\n-      } finally {\r\n-        setLoadingInfluencers(false)\r\n-      }\r\n-    }\r\n-    fetchInfluencers()\r\n-  }, [])\r\n-\r\n-  const handleAddClick = () => {\r\n-    setModalMode('add')\r\n-    setEditingParticipant(null)\r\n-    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleEditar = (p: Participante) => {\r\n-    setModalMode('edit')\r\n-    setEditingParticipant(p)\r\n-    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleCloseModal = (open: boolean) => {\r\n-    setIsModalOpen(open)\r\n-    if (!open) {\r\n-      setEditingParticipant(null)\r\n-      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-      setModalMode('add')\r\n-    }\r\n-  }\r\n-\r\n-  const handleSelectInfluencer = (value: string) => {\r\n-    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n-  }\r\n-\r\n-  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const { name, value } = e.target\r\n-    setNewInfluencerForm(prev => ({\r\n-      ...prev,\r\n-      [name]: +value,\r\n-    }))\r\n-  }\r\n-\r\n-  const handleSave = async () => {\r\n-    const { influencer_id, meta, atingido } = newInfluencerForm\r\n-    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n-\r\n-    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n-    if (modalMode === 'add' && isDuplicate) {\r\n-      alert('Este influenciador já participa deste evento.')\r\n-      return\r\n-    }\r\n-\r\n-    setIsSaving(true)\r\n-    try {\r\n-      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n-      const body = modalMode === 'add'\r\n-        ? newInfluencerForm\r\n-        : { participante_id: editingParticipant?.id, meta, atingido }\r\n-\r\n-      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n-        method,\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body),\r\n-      })\r\n-\r\n-      const data = await res.json()\r\n-      if (modalMode === 'add') {\r\n-        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n-        const novo: Participante = {\r\n-          id: data.id,\r\n-          influencer_id,\r\n-          nome: info?.nome || 'Sem nome',\r\n-          imagem: info?.imagem || '',\r\n-          meta: data.meta,\r\n-          atingido: data.atingido,\r\n-        }\r\n-        setParticipantes(prev => [...prev, novo])\r\n-      } else {\r\n-        setParticipantes(prev =>\r\n-          prev.map(p => p.id === editingParticipant?.id\r\n-            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n-            : p))\r\n-      }\r\n-      handleCloseModal(false)\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    } finally {\r\n-      setIsSaving(false)\r\n-    }\r\n-  }\r\n-\r\n-  const handleStartDelete = (p: Participante) => {\r\n-    setParticipantToDelete(p)\r\n-    setIsConfirmDeleteDialogOpen(true)\r\n-  }\r\n-\r\n-  const handleDeleteParticipant = async () => {\r\n-    if (!participantToDelete) return\r\n-    try {\r\n-      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n-        method: 'DELETE',\r\n-      })\r\n-      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n-      setIsConfirmDeleteDialogOpen(false)\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n-<div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n-<h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-          <DialogTrigger asChild>\r\n-            \r\n-            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n-              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n-            </Button>\r\n-          </DialogTrigger>\r\n-          <DialogContent className=\"sm:max-w-[500px]\">\r\n-            <DialogHeader>\r\n-              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n-              <DialogDescription>\r\n-                Preencha os dados de meta e atingido para o influenciador\r\n-              </DialogDescription>\r\n-            </DialogHeader>\r\n-\r\n-            <div className=\"grid gap-4 py-4\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                onValueChange={handleSelectInfluencer}\r\n-                value={newInfluencerForm.influencer_id}\r\n-                disabled={modalMode === 'edit'}\r\n-              >\r\n-                <SelectTrigger>\r\n-                  {newInfluencerForm.influencer_id\r\n-                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n-                    : 'Selecione'}\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {availableInfluencers.map((inf) => (\r\n-                    <SelectItem key={inf.id} value={inf.id}>\r\n-                      {inf.nome}\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-\r\n-              <Label>Meta</Label>\r\n-              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n-              <Label>Atingido</Label>\r\n-              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n-            </div>\r\n-\r\n-            <DialogFooter>\r\n-              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n-              <Button onClick={handleSave} disabled={isSaving}>\r\n-                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n-                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n-              </Button>\r\n-            </DialogFooter>\r\n-          </DialogContent>\r\n-        </Dialog>\r\n-        <Input\r\n-    placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-    value={busca}\r\n-    onChange={(e) => setBusca(e.target.value)}\r\n-    className=\"max-w-xs\"\r\n-  />\r\n-        \r\n-      </div>\r\n-\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full text-sm text-left\">\r\n-          <thead>\r\n-            <tr className=\"bg-gray-100 text-gray-700\">\r\n-              <th className=\"px-4 py-2\">Nome</th>\r\n-              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n-              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n-              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n-                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n-                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n-                  <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-                      <Pencil className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-                      <Trash2 className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                  </div>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-            {paginated.length === 0 && (\r\n-              <tr>\r\n-                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n-                  Nenhum participante encontrado nesta página.\r\n-                </td>\r\n-              </tr>\r\n-            )}\r\n-          </tbody>\r\n-        </table>\r\n-\r\n-        {/* Paginação com botões numerados */}\r\n-        <div className=\"flex items-center justify-end py-4 px-4\">\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.previousPage()}\r\n-              disabled={!table.getCanPreviousPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronLeft className=\"w-4 h-4\" />\r\n-            </Button>\r\n-            {table.getPageOptions().map((page, pageIndex) => (\r\n-              <Button\r\n-                key={`page-${pageIndex}`}\r\n-                onClick={() => table.setPageIndex(pageIndex)}\r\n-                size=\"icon\"\r\n-                className=\"w-8 h-8\"\r\n-                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n-              >\r\n-                {page + 1}\r\n-              </Button>\r\n-            ))}\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.nextPage()}\r\n-              disabled={!table.getCanNextPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronRight className=\"w-4 h-4\" />\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n-        <AlertDialogContent>\r\n-          <AlertDialogHeader>\r\n-            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n-            <AlertDialogDescription>\r\n-              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n-            </AlertDialogDescription>\r\n-          </AlertDialogHeader>\r\n-          <AlertDialogFooter>\r\n-            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n-            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n-          </AlertDialogFooter>\r\n-        </AlertDialogContent>\r\n-      </AlertDialog>\r\n-    </div>\r\n-  )\r\n-}\r\n"
                },
                {
                    "date": 1746575249577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,8 +213,14 @@\n     <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n+        <Input\r\n+          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+          value={busca}\r\n+          onChange={(e) => setBusca(e.target.value)}\r\n+          className=\"max-w-xs\"\r\n+          />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n             <Button size=\"md\" className=\"flex items-center gap-2\">\r\n@@ -264,14 +270,9 @@\n               </Button>\r\n             </DialogFooter>\r\n           </DialogContent>\r\n         </Dialog>\r\n-        <Input\r\n-          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-          value={busca}\r\n-          onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"max-w-xs\"\r\n-          />\r\n+        \r\n         </div>\r\n       </div>\r\n \r\n       <div className=\"overflow-x-auto\">\r\n"
                },
                {
                    "date": 1746575756025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n \r\n interface Props {\r\n   participantes: Participante[]\r\n   eventoId: string\r\n+  onUpdateParticipantes: () => void\r\n }\r\n \r\n export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n   const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n"
                },
                {
                    "date": 1746575974980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n   eventoId: string\r\n   onUpdateParticipantes: () => void\r\n }\r\n \r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipante }: Props) {\r\n   const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n   const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n   const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n   const [isModalOpen, setIsModalOpen] = useState(false)\r\n@@ -184,8 +184,9 @@\n             ? { ...p, meta: data.meta, atingido: data.atingido }\r\n             : p))\r\n       }\r\n       handleCloseModal(false)\r\n+      onUpdateParticipantes()\r\n     } catch (err: any) {\r\n       alert(err.message)\r\n     } finally {\r\n       setIsSaving(false)\r\n@@ -203,8 +204,9 @@\n       await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n         method: 'DELETE',\r\n       })\r\n       setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n+      onUpdateParticipantes()\r\n       setIsConfirmDeleteDialogOpen(false)\r\n     } catch (err: any) {\r\n       alert(err.message)\r\n     }\r\n@@ -366,4 +368,5 @@\n       </AlertDialog>\r\n     </div>\r\n   )\r\n }\r\n+\r\n"
                },
                {
                    "date": 1746576033355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n   eventoId: string\r\n   onUpdateParticipantes: () => void\r\n }\r\n \r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipante }: Props) {\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipantes }: Props) {\r\n   const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n   const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n   const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n   const [isModalOpen, setIsModalOpen] = useState(false)\r\n"
                },
                {
                    "date": 1746576516532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,381 @@\n+'use client'\r\n+\r\n+import { useState, useEffect } from 'react'\r\n+import { Input } from '@/components/ui/input'\r\n+import { Button } from '@/components/ui/button'\r\n+import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+  DialogDescription,\r\n+  DialogFooter,\r\n+  DialogTrigger,\r\n+} from '@/components/ui/dialog'\r\n+import {\r\n+  Select,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+} from '@/components/ui/select'\r\n+import { Label } from '@/components/ui/label'\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\"\r\n+import Image from 'next/image'\r\n+\r\n+interface Participante {\r\n+  id: string\r\n+  influencer_id: string\r\n+  nome: string\r\n+  imagem: string\r\n+  atingido: number\r\n+  meta: number\r\n+}\r\n+\r\n+interface InfluencerOption {\r\n+  id: string\r\n+  nome: string | null\r\n+  imagem: string | null\r\n+}\r\n+\r\n+interface Props {\r\n+  participantes: Participante[]\r\n+  eventoId: string\r\n+  onUpdateParticipantes: () => void\r\n+}\r\n+\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipantes }: Props) {\r\n+  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n+  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n+  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n+  const [isSaving, setIsSaving] = useState(false)\r\n+  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n+  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n+  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n+  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n+  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n+  const [busca, setBusca] = useState('')\r\n+  const itemsPerPage = 10\r\n+  const [pageIndex, setPageIndex] = useState(0)\r\n+  const participantesFiltrados = participantes.filter(p =>\r\n+  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n+)\r\n+const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n+const paginated = participantesFiltrados.slice(\r\n+  pageIndex * itemsPerPage,\r\n+  pageIndex * itemsPerPage + itemsPerPage\r\n+)\r\n+\r\n+  const table = {\r\n+    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n+    getState: () => ({ pagination: { pageIndex } }),\r\n+    setPageIndex: (index: number) => setPageIndex(index),\r\n+    getCanPreviousPage: () => pageIndex > 0,\r\n+    getCanNextPage: () => pageIndex < pageCount - 1,\r\n+    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n+    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const fetchInfluencers = async () => {\r\n+      try {\r\n+        setLoadingInfluencers(true)\r\n+        const res = await fetch('/api/influenciadores')\r\n+        const data = await res.json()\r\n+        setAvailableInfluencers(data.map((i: any) => ({\r\n+          id: i.id,\r\n+          nome: i.nome,\r\n+          imagem: i.imagem,\r\n+        })))\r\n+      } catch (err: any) {\r\n+        setErrorLoadingInfluencers(err.message)\r\n+      } finally {\r\n+        setLoadingInfluencers(false)\r\n+      }\r\n+    }\r\n+    fetchInfluencers()\r\n+  }, [])\r\n+\r\n+  const handleAddClick = () => {\r\n+    setModalMode('add')\r\n+    setEditingParticipant(null)\r\n+    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleEditar = (p: Participante) => {\r\n+    setModalMode('edit')\r\n+    setEditingParticipant(p)\r\n+    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleCloseModal = (open: boolean) => {\r\n+    setIsModalOpen(open)\r\n+    if (!open) {\r\n+      setEditingParticipant(null)\r\n+      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+      setModalMode('add')\r\n+    }\r\n+  }\r\n+\r\n+  const handleSelectInfluencer = (value: string) => {\r\n+    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n+  }\r\n+\r\n+  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewInfluencerForm(prev => ({\r\n+      ...prev,\r\n+      [name]: +value,\r\n+    }))\r\n+  }\r\n+\r\n+  const handleSave = async () => {\r\n+    if (modalMode === 'edit' && !editingParticipant?.id) {\r\n+      alert(\"Erro: Participante em edição não possui ID válido.\")\r\n+      return\r\n+    }\r\n+    console.log(\"Enviando PATCH:\", {\r\n+      participante_id: editingParticipant?.id,\r\n+      meta,\r\n+      atingido,\r\n+    })\r\n+    const { influencer_id, meta, atingido } = newInfluencerForm\r\n+    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n+\r\n+    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n+    if (modalMode === 'add' && isDuplicate) {\r\n+      alert('Este influenciador já participa deste evento.')\r\n+      return\r\n+    }\r\n+\r\n+    setIsSaving(true)\r\n+    try {\r\n+      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n+      const body = modalMode === 'add'\r\n+        ? newInfluencerForm\r\n+        : { participante_id: editingParticipant?.id, meta, atingido }\r\n+\r\n+      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n+        method,\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body),\r\n+      })\r\n+\r\n+      const data = await res.json()\r\n+      if (modalMode === 'add') {\r\n+        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n+        const novo: Participante = {\r\n+          id: data.id,\r\n+          influencer_id,\r\n+          nome: info?.nome || 'Sem nome',\r\n+          imagem: info?.imagem || '',\r\n+          meta: data.meta,\r\n+          atingido: data.atingido,\r\n+        }\r\n+        setParticipantes(prev => [...prev, novo])\r\n+      } else {\r\n+        setParticipantes(prev =>\r\n+          prev.map(p => p.id === editingParticipant?.id\r\n+            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n+            : p))\r\n+      }\r\n+      handleCloseModal(false)\r\n+      onUpdateParticipantes()\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    } finally {\r\n+      setIsSaving(false)\r\n+    }\r\n+  }\r\n+\r\n+  const handleStartDelete = (p: Participante) => {\r\n+    setParticipantToDelete(p)\r\n+    setIsConfirmDeleteDialogOpen(true)\r\n+  }\r\n+\r\n+  const handleDeleteParticipant = async () => {\r\n+    if (!participantToDelete) return\r\n+    try {\r\n+      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n+        method: 'DELETE',\r\n+      })\r\n+      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n+      onUpdateParticipantes()\r\n+      setIsConfirmDeleteDialogOpen(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n+      <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n+        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+        <div className='flex justify-between items-center gap-4'>\r\n+        <Input\r\n+          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+          value={busca}\r\n+          onChange={(e) => setBusca(e.target.value)}\r\n+          className=\"max-w-xs\"\r\n+          />\r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            \r\n+            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n+            </Button>\r\n+          </DialogTrigger>\r\n+          <DialogContent className=\"sm:max-w-[500px]\">\r\n+            <DialogHeader>\r\n+              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n+              <DialogDescription>\r\n+                Preencha os dados de meta e atingido para o influenciador\r\n+              </DialogDescription>\r\n+            </DialogHeader>\r\n+\r\n+            <div className=\"grid gap-4 py-4\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                onValueChange={handleSelectInfluencer}\r\n+                value={newInfluencerForm.influencer_id}\r\n+                disabled={modalMode === 'edit'}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  {newInfluencerForm.influencer_id\r\n+                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n+                    : 'Selecione'}\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {availableInfluencers.map((inf) => (\r\n+                    <SelectItem key={inf.id} value={inf.id}>\r\n+                      {inf.nome}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n+\r\n+              <Label>Meta</Label>\r\n+              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n+              <Label>Atingido</Label>\r\n+              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n+            </div>\r\n+\r\n+            <DialogFooter>\r\n+              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n+              <Button onClick={handleSave} disabled={isSaving}>\r\n+                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n+                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n+              </Button>\r\n+            </DialogFooter>\r\n+          </DialogContent>\r\n+        </Dialog>\r\n+        \r\n+        </div>\r\n+      </div>\r\n+\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full text-sm text-left\">\r\n+          <thead>\r\n+            <tr className=\"bg-gray-100 text-gray-700\">\r\n+              <th className=\"px-4 py-2\">Nome</th>\r\n+              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n+              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n+              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {paginated.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n+                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+            {paginated.length === 0 && (\r\n+              <tr>\r\n+                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n+                  Nenhum participante encontrado nesta página.\r\n+                </td>\r\n+              </tr>\r\n+            )}\r\n+          </tbody>\r\n+        </table>\r\n+\r\n+        {/* Paginação com botões numerados */}\r\n+        <div className=\"flex items-center justify-end py-4 px-4\">\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.previousPage()}\r\n+              disabled={!table.getCanPreviousPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronLeft className=\"w-4 h-4\" />\r\n+            </Button>\r\n+            {table.getPageOptions().map((page, pageIndex) => (\r\n+              <Button\r\n+                key={`page-${pageIndex}`}\r\n+                onClick={() => table.setPageIndex(pageIndex)}\r\n+                size=\"icon\"\r\n+                className=\"w-8 h-8\"\r\n+                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n+              >\r\n+                {page + 1}\r\n+              </Button>\r\n+            ))}\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.nextPage()}\r\n+              disabled={!table.getCanNextPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronRight className=\"w-4 h-4\" />\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n+        <AlertDialogContent>\r\n+          <AlertDialogHeader>\r\n+            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n+            <AlertDialogDescription>\r\n+              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n+            </AlertDialogDescription>\r\n+          </AlertDialogHeader>\r\n+          <AlertDialogFooter>\r\n+            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n+            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n+          </AlertDialogFooter>\r\n+        </AlertDialogContent>\r\n+      </AlertDialog>\r\n+    </div>\r\n+  )\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1746576553560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,13 +147,8 @@\n     if (modalMode === 'edit' && !editingParticipant?.id) {\r\n       alert(\"Erro: Participante em edição não possui ID válido.\")\r\n       return\r\n     }\r\n-    console.log(\"Enviando PATCH:\", {\r\n-      participante_id: editingParticipant?.id,\r\n-      meta,\r\n-      atingido,\r\n-    })\r\n     const { influencer_id, meta, atingido } = newInfluencerForm\r\n     if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n \r\n     const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n@@ -192,380 +187,13 @@\n           prev.map(p => p.id === editingParticipant?.id\r\n             ? { ...p, meta: data.meta, atingido: data.atingido }\r\n             : p))\r\n       }\r\n-      handleCloseModal(false)\r\n-      onUpdateParticipantes()\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    } finally {\r\n-      setIsSaving(false)\r\n-    }\r\n-  }\r\n-\r\n-  const handleStartDelete = (p: Participante) => {\r\n-    setParticipantToDelete(p)\r\n-    setIsConfirmDeleteDialogOpen(true)\r\n-  }\r\n-\r\n-  const handleDeleteParticipant = async () => {\r\n-    if (!participantToDelete) return\r\n-    try {\r\n-      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n-        method: 'DELETE',\r\n+      console.log(\"Enviando PATCH:\", {\r\n+        participante_id: editingParticipant?.id,\r\n+        meta,\r\n+        atingido,\r\n       })\r\n-      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n-      onUpdateParticipantes()\r\n-      setIsConfirmDeleteDialogOpen(false)\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n-      <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n-        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-        <div className='flex justify-between items-center gap-4'>\r\n-        <Input\r\n-          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-          value={busca}\r\n-          onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"max-w-xs\"\r\n-          />\r\n-        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-          <DialogTrigger asChild>\r\n-            \r\n-            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n-              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n-            </Button>\r\n-          </DialogTrigger>\r\n-          <DialogContent className=\"sm:max-w-[500px]\">\r\n-            <DialogHeader>\r\n-              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n-              <DialogDescription>\r\n-                Preencha os dados de meta e atingido para o influenciador\r\n-              </DialogDescription>\r\n-            </DialogHeader>\r\n-\r\n-            <div className=\"grid gap-4 py-4\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                onValueChange={handleSelectInfluencer}\r\n-                value={newInfluencerForm.influencer_id}\r\n-                disabled={modalMode === 'edit'}\r\n-              >\r\n-                <SelectTrigger>\r\n-                  {newInfluencerForm.influencer_id\r\n-                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n-                    : 'Selecione'}\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {availableInfluencers.map((inf) => (\r\n-                    <SelectItem key={inf.id} value={inf.id}>\r\n-                      {inf.nome}\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-\r\n-              <Label>Meta</Label>\r\n-              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n-              <Label>Atingido</Label>\r\n-              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n-            </div>\r\n-\r\n-            <DialogFooter>\r\n-              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n-              <Button onClick={handleSave} disabled={isSaving}>\r\n-                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n-                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n-              </Button>\r\n-            </DialogFooter>\r\n-          </DialogContent>\r\n-        </Dialog>\r\n-        \r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full text-sm text-left\">\r\n-          <thead>\r\n-            <tr className=\"bg-gray-100 text-gray-700\">\r\n-              <th className=\"px-4 py-2\">Nome</th>\r\n-              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n-              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n-              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n-                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n-                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n-                  <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-                      <Pencil className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-                      <Trash2 className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                  </div>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-            {paginated.length === 0 && (\r\n-              <tr>\r\n-                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n-                  Nenhum participante encontrado nesta página.\r\n-                </td>\r\n-              </tr>\r\n-            )}\r\n-          </tbody>\r\n-        </table>\r\n-\r\n-        {/* Paginação com botões numerados */}\r\n-        <div className=\"flex items-center justify-end py-4 px-4\">\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.previousPage()}\r\n-              disabled={!table.getCanPreviousPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronLeft className=\"w-4 h-4\" />\r\n-            </Button>\r\n-            {table.getPageOptions().map((page, pageIndex) => (\r\n-              <Button\r\n-                key={`page-${pageIndex}`}\r\n-                onClick={() => table.setPageIndex(pageIndex)}\r\n-                size=\"icon\"\r\n-                className=\"w-8 h-8\"\r\n-                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n-              >\r\n-                {page + 1}\r\n-              </Button>\r\n-            ))}\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.nextPage()}\r\n-              disabled={!table.getCanNextPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronRight className=\"w-4 h-4\" />\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n-        <AlertDialogContent>\r\n-          <AlertDialogHeader>\r\n-            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n-            <AlertDialogDescription>\r\n-              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n-            </AlertDialogDescription>\r\n-          </AlertDialogHeader>\r\n-          <AlertDialogFooter>\r\n-            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n-            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n-          </AlertDialogFooter>\r\n-        </AlertDialogContent>\r\n-      </AlertDialog>\r\n-    </div>\r\n-  )\r\n-}\r\n-\r\n-'use client'\r\n-\r\n-import { useState, useEffect } from 'react'\r\n-import { Input } from '@/components/ui/input'\r\n-import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n-import {\r\n-  Dialog,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-  DialogDescription,\r\n-  DialogFooter,\r\n-  DialogTrigger,\r\n-} from '@/components/ui/dialog'\r\n-import {\r\n-  Select,\r\n-  SelectContent,\r\n-  SelectItem,\r\n-  SelectTrigger,\r\n-  SelectValue,\r\n-} from '@/components/ui/select'\r\n-import { Label } from '@/components/ui/label'\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-} from \"@/components/ui/alert-dialog\"\r\n-import Image from 'next/image'\r\n-\r\n-interface Participante {\r\n-  id: string\r\n-  influencer_id: string\r\n-  nome: string\r\n-  imagem: string\r\n-  atingido: number\r\n-  meta: number\r\n-}\r\n-\r\n-interface InfluencerOption {\r\n-  id: string\r\n-  nome: string | null\r\n-  imagem: string | null\r\n-}\r\n-\r\n-interface Props {\r\n-  participantes: Participante[]\r\n-  eventoId: string\r\n-  onUpdateParticipantes: () => void\r\n-}\r\n-\r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipantes }: Props) {\r\n-  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n-  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n-  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n-  const [isSaving, setIsSaving] = useState(false)\r\n-  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n-  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n-  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n-  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n-  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n-  const [busca, setBusca] = useState('')\r\n-  const itemsPerPage = 10\r\n-  const [pageIndex, setPageIndex] = useState(0)\r\n-  const participantesFiltrados = participantes.filter(p =>\r\n-  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n-)\r\n-const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n-const paginated = participantesFiltrados.slice(\r\n-  pageIndex * itemsPerPage,\r\n-  pageIndex * itemsPerPage + itemsPerPage\r\n-)\r\n-\r\n-  const table = {\r\n-    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n-    getState: () => ({ pagination: { pageIndex } }),\r\n-    setPageIndex: (index: number) => setPageIndex(index),\r\n-    getCanPreviousPage: () => pageIndex > 0,\r\n-    getCanNextPage: () => pageIndex < pageCount - 1,\r\n-    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n-    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n-  }\r\n-\r\n-  useEffect(() => {\r\n-    const fetchInfluencers = async () => {\r\n-      try {\r\n-        setLoadingInfluencers(true)\r\n-        const res = await fetch('/api/influenciadores')\r\n-        const data = await res.json()\r\n-        setAvailableInfluencers(data.map((i: any) => ({\r\n-          id: i.id,\r\n-          nome: i.nome,\r\n-          imagem: i.imagem,\r\n-        })))\r\n-      } catch (err: any) {\r\n-        setErrorLoadingInfluencers(err.message)\r\n-      } finally {\r\n-        setLoadingInfluencers(false)\r\n-      }\r\n-    }\r\n-    fetchInfluencers()\r\n-  }, [])\r\n-\r\n-  const handleAddClick = () => {\r\n-    setModalMode('add')\r\n-    setEditingParticipant(null)\r\n-    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleEditar = (p: Participante) => {\r\n-    setModalMode('edit')\r\n-    setEditingParticipant(p)\r\n-    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleCloseModal = (open: boolean) => {\r\n-    setIsModalOpen(open)\r\n-    if (!open) {\r\n-      setEditingParticipant(null)\r\n-      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-      setModalMode('add')\r\n-    }\r\n-  }\r\n-\r\n-  const handleSelectInfluencer = (value: string) => {\r\n-    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n-  }\r\n-\r\n-  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const { name, value } = e.target\r\n-    setNewInfluencerForm(prev => ({\r\n-      ...prev,\r\n-      [name]: +value,\r\n-    }))\r\n-  }\r\n-\r\n-  const handleSave = async () => {\r\n-    const { influencer_id, meta, atingido } = newInfluencerForm\r\n-    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n-\r\n-    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n-    if (modalMode === 'add' && isDuplicate) {\r\n-      alert('Este influenciador já participa deste evento.')\r\n-      return\r\n-    }\r\n-\r\n-    setIsSaving(true)\r\n-    try {\r\n-      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n-      const body = modalMode === 'add'\r\n-        ? newInfluencerForm\r\n-        : { participante_id: editingParticipant?.id, meta, atingido }\r\n-\r\n-      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n-        method,\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body),\r\n-      })\r\n-\r\n-      const data = await res.json()\r\n-      if (modalMode === 'add') {\r\n-        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n-        const novo: Participante = {\r\n-          id: data.id,\r\n-          influencer_id,\r\n-          nome: info?.nome || 'Sem nome',\r\n-          imagem: info?.imagem || '',\r\n-          meta: data.meta,\r\n-          atingido: data.atingido,\r\n-        }\r\n-        setParticipantes(prev => [...prev, novo])\r\n-      } else {\r\n-        setParticipantes(prev =>\r\n-          prev.map(p => p.id === editingParticipant?.id\r\n-            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n-            : p))\r\n-      }\r\n       handleCloseModal(false)\r\n       onUpdateParticipantes()\r\n     } catch (err: any) {\r\n       alert(err.message)\r\n"
                },
                {
                    "date": 1746576744977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,9 @@\n     setIsModalOpen(true)\r\n   }\r\n \r\n   const handleEditar = (p: Participante) => {\r\n+    console.log('Editando participante:', p)\r\n     setModalMode('edit')\r\n     setEditingParticipant(p)\r\n     setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n     setIsModalOpen(true)\r\n"
                },
                {
                    "date": 1746578522749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,17 @@\n       try {\r\n         setLoadingInfluencers(true)\r\n         const res = await fetch('/api/influenciadores')\r\n         const data = await res.json()\r\n-        setAvailableInfluencers(data.map((i: any) => ({\r\n-          id: i.id,\r\n-          nome: i.nome,\r\n-          imagem: i.imagem,\r\n-        })))\r\n+        const participantesIds = new Set(participantes.map(p => p.influencer_id))\r\n+\r\n+const filtrados = data.filter((i: any) => !participantesIds.has(i.id))\r\n+\r\n+setAvailableInfluencers(filtrados.map((i: any) => ({\r\n+  id: i.id,\r\n+  nome: i.nome,\r\n+  imagem: i.imagem,\r\n+})))\r\n       } catch (err: any) {\r\n         setErrorLoadingInfluencers(err.message)\r\n       } finally {\r\n         setLoadingInfluencers(false)\r\n"
                },
                {
                    "date": 1746578806883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n         setLoadingInfluencers(false)\r\n       }\r\n     }\r\n     fetchInfluencers()\r\n-  }, [])\r\n+  }, [participantes])\r\n \r\n   const handleAddClick = () => {\r\n     setModalMode('add')\r\n     setEditingParticipant(null)\r\n"
                },
                {
                    "date": 1746640711418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n     }\r\n   }\r\n \r\n   return (\r\n-    <div className=\"bg-white rounded-xl shadow-md p-6 w-full overflow-auto\">\r\n+    <div className=\"bg-[#230621] rounded-xlrounded-xl  text-white  p-6 w-full overflow-auto\">\r\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n         <Input\r\n"
                },
                {
                    "date": 1746640758802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n     }\r\n   }\r\n \r\n   return (\r\n-    <div className=\"bg-[#230621] rounded-xlrounded-xl  text-white  p-6 w-full overflow-auto\">\r\n+    <div className=\"bg-[#230621] rounded-xlrounded-xl text-white p-6 w-full overflow-auto\">\r\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n         <Input\r\n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-gray-50\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746640931129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[441240]\">\r\n+              <tr key={p.id} className=\"border hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746640961977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,18 +294,18 @@\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n           <thead>\r\n-            <tr className=\"bg-gray-100 text-gray-700\">\r\n+            <tr className=\"bg-[#441240] text-gray-700\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n               <th className=\"px-4 py-2 text-center\">Meta</th>\r\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746640979399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#260a23]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746640991124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+'use client'\r\n+\r\n+import { useState, useEffect } from 'react'\r\n+import { Input } from '@/components/ui/input'\r\n+import { Button } from '@/components/ui/button'\r\n+import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+  DialogDescription,\r\n+  DialogFooter,\r\n+  DialogTrigger,\r\n+} from '@/components/ui/dialog'\r\n+import {\r\n+  Select,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+} from '@/components/ui/select'\r\n+import { Label } from '@/components/ui/label'\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\"\r\n+import Image from 'next/image'\r\n+\r\n+interface Participante {\r\n+  id: string\r\n+  influencer_id: string\r\n+  nome: string\r\n+  imagem: string\r\n+  atingido: number\r\n+  meta: number\r\n+}\r\n+\r\n+interface InfluencerOption {\r\n+  id: string\r\n+  nome: string | null\r\n+  imagem: string | null\r\n+}\r\n+\r\n+interface Props {\r\n+  participantes: Participante[]\r\n+  eventoId: string\r\n+  onUpdateParticipantes: () => void\r\n+}\r\n+\r\n+export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipantes }: Props) {\r\n+  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n+  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n+  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n+  const [isSaving, setIsSaving] = useState(false)\r\n+  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n+  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n+  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n+  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n+  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n+  const [busca, setBusca] = useState('')\r\n+  const itemsPerPage = 10\r\n+  const [pageIndex, setPageIndex] = useState(0)\r\n+  const participantesFiltrados = participantes.filter(p =>\r\n+  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n+)\r\n+const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n+const paginated = participantesFiltrados.slice(\r\n+  pageIndex * itemsPerPage,\r\n+  pageIndex * itemsPerPage + itemsPerPage\r\n+)\r\n+\r\n+  const table = {\r\n+    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n+    getState: () => ({ pagination: { pageIndex } }),\r\n+    setPageIndex: (index: number) => setPageIndex(index),\r\n+    getCanPreviousPage: () => pageIndex > 0,\r\n+    getCanNextPage: () => pageIndex < pageCount - 1,\r\n+    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n+    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const fetchInfluencers = async () => {\r\n+      try {\r\n+        setLoadingInfluencers(true)\r\n+        const res = await fetch('/api/influenciadores')\r\n+        const data = await res.json()\r\n+        const participantesIds = new Set(participantes.map(p => p.influencer_id))\r\n+\r\n+const filtrados = data.filter((i: any) => !participantesIds.has(i.id))\r\n+\r\n+setAvailableInfluencers(filtrados.map((i: any) => ({\r\n+  id: i.id,\r\n+  nome: i.nome,\r\n+  imagem: i.imagem,\r\n+})))\r\n+      } catch (err: any) {\r\n+        setErrorLoadingInfluencers(err.message)\r\n+      } finally {\r\n+        setLoadingInfluencers(false)\r\n+      }\r\n+    }\r\n+    fetchInfluencers()\r\n+  }, [participantes])\r\n+\r\n+  const handleAddClick = () => {\r\n+    setModalMode('add')\r\n+    setEditingParticipant(null)\r\n+    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleEditar = (p: Participante) => {\r\n+    console.log('Editando participante:', p)\r\n+    setModalMode('edit')\r\n+    setEditingParticipant(p)\r\n+    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n+    setIsModalOpen(true)\r\n+  }\r\n+\r\n+  const handleCloseModal = (open: boolean) => {\r\n+    setIsModalOpen(open)\r\n+    if (!open) {\r\n+      setEditingParticipant(null)\r\n+      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n+      setModalMode('add')\r\n+    }\r\n+  }\r\n+\r\n+  const handleSelectInfluencer = (value: string) => {\r\n+    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n+  }\r\n+\r\n+  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewInfluencerForm(prev => ({\r\n+      ...prev,\r\n+      [name]: +value,\r\n+    }))\r\n+  }\r\n+\r\n+  const handleSave = async () => {\r\n+    if (modalMode === 'edit' && !editingParticipant?.id) {\r\n+      alert(\"Erro: Participante em edição não possui ID válido.\")\r\n+      return\r\n+    }\r\n+    const { influencer_id, meta, atingido } = newInfluencerForm\r\n+    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n+\r\n+    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n+    if (modalMode === 'add' && isDuplicate) {\r\n+      alert('Este influenciador já participa deste evento.')\r\n+      return\r\n+    }\r\n+\r\n+    setIsSaving(true)\r\n+    try {\r\n+      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n+      const body = modalMode === 'add'\r\n+        ? newInfluencerForm\r\n+        : { participante_id: editingParticipant?.id, meta, atingido }\r\n+\r\n+      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n+        method,\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body),\r\n+      })\r\n+\r\n+      const data = await res.json()\r\n+      if (modalMode === 'add') {\r\n+        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n+        const novo: Participante = {\r\n+          id: data.id,\r\n+          influencer_id,\r\n+          nome: info?.nome || 'Sem nome',\r\n+          imagem: info?.imagem || '',\r\n+          meta: data.meta,\r\n+          atingido: data.atingido,\r\n+        }\r\n+        setParticipantes(prev => [...prev, novo])\r\n+      } else {\r\n+        setParticipantes(prev =>\r\n+          prev.map(p => p.id === editingParticipant?.id\r\n+            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n+            : p))\r\n+      }\r\n+      console.log(\"Enviando PATCH:\", {\r\n+        participante_id: editingParticipant?.id,\r\n+        meta,\r\n+        atingido,\r\n+      })\r\n+      handleCloseModal(false)\r\n+      onUpdateParticipantes()\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    } finally {\r\n+      setIsSaving(false)\r\n+    }\r\n+  }\r\n+\r\n+  const handleStartDelete = (p: Participante) => {\r\n+    setParticipantToDelete(p)\r\n+    setIsConfirmDeleteDialogOpen(true)\r\n+  }\r\n+\r\n+  const handleDeleteParticipant = async () => {\r\n+    if (!participantToDelete) return\r\n+    try {\r\n+      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n+        method: 'DELETE',\r\n+      })\r\n+      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n+      onUpdateParticipantes()\r\n+      setIsConfirmDeleteDialogOpen(false)\r\n+    } catch (err: any) {\r\n+      alert(err.message)\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"bg-[#230621] rounded-xlrounded-xl text-white p-6 w-full overflow-auto\">\r\n+      <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n+        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n+        <div className='flex justify-between items-center gap-4'>\r\n+        <Input\r\n+          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+          value={busca}\r\n+          onChange={(e) => setBusca(e.target.value)}\r\n+          className=\"max-w-xs\"\r\n+          />\r\n+        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n+          <DialogTrigger asChild>\r\n+            \r\n+            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n+              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n+            </Button>\r\n+          </DialogTrigger>\r\n+          <DialogContent className=\"sm:max-w-[500px]\">\r\n+            <DialogHeader>\r\n+              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n+              <DialogDescription>\r\n+                Preencha os dados de meta e atingido para o influenciador\r\n+              </DialogDescription>\r\n+            </DialogHeader>\r\n+\r\n+            <div className=\"grid gap-4 py-4\">\r\n+              <Label>Influenciador</Label>\r\n+              <Select\r\n+                onValueChange={handleSelectInfluencer}\r\n+                value={newInfluencerForm.influencer_id}\r\n+                disabled={modalMode === 'edit'}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  {newInfluencerForm.influencer_id\r\n+                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n+                    : 'Selecione'}\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {availableInfluencers.map((inf) => (\r\n+                    <SelectItem key={inf.id} value={inf.id}>\r\n+                      {inf.nome}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n+\r\n+              <Label>Meta</Label>\r\n+              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n+              <Label>Atingido</Label>\r\n+              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n+            </div>\r\n+\r\n+            <DialogFooter>\r\n+              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n+              <Button onClick={handleSave} disabled={isSaving}>\r\n+                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n+                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n+              </Button>\r\n+            </DialogFooter>\r\n+          </DialogContent>\r\n+        </Dialog>\r\n+        \r\n+        </div>\r\n+      </div>\r\n+\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full text-sm text-left\">\r\n+          <thead>\r\n+            <tr className=\"bg-[#441240] text-gray-700\">\r\n+              <th className=\"px-4 py-2\">Nome</th>\r\n+              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n+              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n+              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {paginated.map(p => (\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#260a23]\">\r\n+                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n+                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n+                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n+                  <div className=\"flex justify-end gap-2\">\r\n+                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                      <Pencil className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                      <Trash2 className=\"h-4 w-4\" />\r\n+                    </Button>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+            {paginated.length === 0 && (\r\n+              <tr>\r\n+                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n+                  Nenhum participante encontrado nesta página.\r\n+                </td>\r\n+              </tr>\r\n+            )}\r\n+          </tbody>\r\n+        </table>\r\n+\r\n+        {/* Paginação com botões numerados */}\r\n+        <div className=\"flex items-center justify-end py-4 px-4\">\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.previousPage()}\r\n+              disabled={!table.getCanPreviousPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronLeft className=\"w-4 h-4\" />\r\n+            </Button>\r\n+            {table.getPageOptions().map((page, pageIndex) => (\r\n+              <Button\r\n+                key={`page-${pageIndex}`}\r\n+                onClick={() => table.setPageIndex(pageIndex)}\r\n+                size=\"icon\"\r\n+                className=\"w-8 h-8\"\r\n+                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n+              >\r\n+                {page + 1}\r\n+              </Button>\r\n+            ))}\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"icon\"\r\n+              onClick={() => table.nextPage()}\r\n+              disabled={!table.getCanNextPage()}\r\n+              className=\"w-8 h-8\"\r\n+            >\r\n+              <ChevronRight className=\"w-4 h-4\" />\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n+        <AlertDialogContent>\r\n+          <AlertDialogHeader>\r\n+            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n+            <AlertDialogDescription>\r\n+              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n+            </AlertDialogDescription>\r\n+          </AlertDialogHeader>\r\n+          <AlertDialogFooter>\r\n+            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n+            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n+          </AlertDialogFooter>\r\n+        </AlertDialogContent>\r\n+      </AlertDialog>\r\n+    </div>\r\n+  )\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1746641050396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -383,390 +383,4 @@\n     </div>\r\n   )\r\n }\r\n \r\n-'use client'\r\n-\r\n-import { useState, useEffect } from 'react'\r\n-import { Input } from '@/components/ui/input'\r\n-import { Button } from '@/components/ui/button'\r\n-import { PlusCircle, Loader2, Trash2, Pencil, ChevronLeft, ChevronRight } from 'lucide-react'\r\n-import {\r\n-  Dialog,\r\n-  DialogContent,\r\n-  DialogHeader,\r\n-  DialogTitle,\r\n-  DialogDescription,\r\n-  DialogFooter,\r\n-  DialogTrigger,\r\n-} from '@/components/ui/dialog'\r\n-import {\r\n-  Select,\r\n-  SelectContent,\r\n-  SelectItem,\r\n-  SelectTrigger,\r\n-  SelectValue,\r\n-} from '@/components/ui/select'\r\n-import { Label } from '@/components/ui/label'\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-} from \"@/components/ui/alert-dialog\"\r\n-import Image from 'next/image'\r\n-\r\n-interface Participante {\r\n-  id: string\r\n-  influencer_id: string\r\n-  nome: string\r\n-  imagem: string\r\n-  atingido: number\r\n-  meta: number\r\n-}\r\n-\r\n-interface InfluencerOption {\r\n-  id: string\r\n-  nome: string | null\r\n-  imagem: string | null\r\n-}\r\n-\r\n-interface Props {\r\n-  participantes: Participante[]\r\n-  eventoId: string\r\n-  onUpdateParticipantes: () => void\r\n-}\r\n-\r\n-export default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId, onUpdateParticipantes }: Props) {\r\n-  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n-  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n-  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [newInfluencerForm, setNewInfluencerForm] = useState({ influencer_id: '', meta: 0, atingido: 0 })\r\n-  const [isSaving, setIsSaving] = useState(false)\r\n-  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n-  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n-  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n-  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false)\r\n-  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null)\r\n-  const [busca, setBusca] = useState('')\r\n-  const itemsPerPage = 10\r\n-  const [pageIndex, setPageIndex] = useState(0)\r\n-  const participantesFiltrados = participantes.filter(p =>\r\n-  p.nome.toLowerCase().includes(busca.toLowerCase())\r\n-)\r\n-const pageCount = Math.ceil(participantesFiltrados.length / itemsPerPage)\r\n-const paginated = participantesFiltrados.slice(\r\n-  pageIndex * itemsPerPage,\r\n-  pageIndex * itemsPerPage + itemsPerPage\r\n-)\r\n-\r\n-  const table = {\r\n-    getPageOptions: () => Array.from({ length: pageCount }, (_, i) => i),\r\n-    getState: () => ({ pagination: { pageIndex } }),\r\n-    setPageIndex: (index: number) => setPageIndex(index),\r\n-    getCanPreviousPage: () => pageIndex > 0,\r\n-    getCanNextPage: () => pageIndex < pageCount - 1,\r\n-    previousPage: () => setPageIndex(p => Math.max(p - 1, 0)),\r\n-    nextPage: () => setPageIndex(p => Math.min(p + 1, pageCount - 1)),\r\n-  }\r\n-\r\n-  useEffect(() => {\r\n-    const fetchInfluencers = async () => {\r\n-      try {\r\n-        setLoadingInfluencers(true)\r\n-        const res = await fetch('/api/influenciadores')\r\n-        const data = await res.json()\r\n-        const participantesIds = new Set(participantes.map(p => p.influencer_id))\r\n-\r\n-const filtrados = data.filter((i: any) => !participantesIds.has(i.id))\r\n-\r\n-setAvailableInfluencers(filtrados.map((i: any) => ({\r\n-  id: i.id,\r\n-  nome: i.nome,\r\n-  imagem: i.imagem,\r\n-})))\r\n-      } catch (err: any) {\r\n-        setErrorLoadingInfluencers(err.message)\r\n-      } finally {\r\n-        setLoadingInfluencers(false)\r\n-      }\r\n-    }\r\n-    fetchInfluencers()\r\n-  }, [participantes])\r\n-\r\n-  const handleAddClick = () => {\r\n-    setModalMode('add')\r\n-    setEditingParticipant(null)\r\n-    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleEditar = (p: Participante) => {\r\n-    console.log('Editando participante:', p)\r\n-    setModalMode('edit')\r\n-    setEditingParticipant(p)\r\n-    setNewInfluencerForm({ influencer_id: p.influencer_id, meta: p.meta, atingido: p.atingido })\r\n-    setIsModalOpen(true)\r\n-  }\r\n-\r\n-  const handleCloseModal = (open: boolean) => {\r\n-    setIsModalOpen(open)\r\n-    if (!open) {\r\n-      setEditingParticipant(null)\r\n-      setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 })\r\n-      setModalMode('add')\r\n-    }\r\n-  }\r\n-\r\n-  const handleSelectInfluencer = (value: string) => {\r\n-    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n-  }\r\n-\r\n-  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const { name, value } = e.target\r\n-    setNewInfluencerForm(prev => ({\r\n-      ...prev,\r\n-      [name]: +value,\r\n-    }))\r\n-  }\r\n-\r\n-  const handleSave = async () => {\r\n-    if (modalMode === 'edit' && !editingParticipant?.id) {\r\n-      alert(\"Erro: Participante em edição não possui ID válido.\")\r\n-      return\r\n-    }\r\n-    const { influencer_id, meta, atingido } = newInfluencerForm\r\n-    if (!influencer_id || isNaN(meta) || isNaN(atingido)) return\r\n-\r\n-    const isDuplicate = participantes.some(p => p.influencer_id === influencer_id)\r\n-    if (modalMode === 'add' && isDuplicate) {\r\n-      alert('Este influenciador já participa deste evento.')\r\n-      return\r\n-    }\r\n-\r\n-    setIsSaving(true)\r\n-    try {\r\n-      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n-      const body = modalMode === 'add'\r\n-        ? newInfluencerForm\r\n-        : { participante_id: editingParticipant?.id, meta, atingido }\r\n-\r\n-      const res = await fetch(`/api/eventos/${eventoId}/participantes`, {\r\n-        method,\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body),\r\n-      })\r\n-\r\n-      const data = await res.json()\r\n-      if (modalMode === 'add') {\r\n-        const info = availableInfluencers.find(i => i.id === influencer_id)\r\n-        const novo: Participante = {\r\n-          id: data.id,\r\n-          influencer_id,\r\n-          nome: info?.nome || 'Sem nome',\r\n-          imagem: info?.imagem || '',\r\n-          meta: data.meta,\r\n-          atingido: data.atingido,\r\n-        }\r\n-        setParticipantes(prev => [...prev, novo])\r\n-      } else {\r\n-        setParticipantes(prev =>\r\n-          prev.map(p => p.id === editingParticipant?.id\r\n-            ? { ...p, meta: data.meta, atingido: data.atingido }\r\n-            : p))\r\n-      }\r\n-      console.log(\"Enviando PATCH:\", {\r\n-        participante_id: editingParticipant?.id,\r\n-        meta,\r\n-        atingido,\r\n-      })\r\n-      handleCloseModal(false)\r\n-      onUpdateParticipantes()\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    } finally {\r\n-      setIsSaving(false)\r\n-    }\r\n-  }\r\n-\r\n-  const handleStartDelete = (p: Participante) => {\r\n-    setParticipantToDelete(p)\r\n-    setIsConfirmDeleteDialogOpen(true)\r\n-  }\r\n-\r\n-  const handleDeleteParticipant = async () => {\r\n-    if (!participantToDelete) return\r\n-    try {\r\n-      await fetch(`/api/eventos/${eventoId}/participantes/${participantToDelete.id}`, {\r\n-        method: 'DELETE',\r\n-      })\r\n-      setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id))\r\n-      onUpdateParticipantes()\r\n-      setIsConfirmDeleteDialogOpen(false)\r\n-    } catch (err: any) {\r\n-      alert(err.message)\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"bg-[#230621] rounded-xlrounded-xl text-white p-6 w-full overflow-auto\">\r\n-      <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n-        <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n-        <div className='flex justify-between items-center gap-4'>\r\n-        <Input\r\n-          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n-          value={busca}\r\n-          onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"max-w-xs\"\r\n-          />\r\n-        <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n-          <DialogTrigger asChild>\r\n-            \r\n-            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n-              <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n-            </Button>\r\n-          </DialogTrigger>\r\n-          <DialogContent className=\"sm:max-w-[500px]\">\r\n-            <DialogHeader>\r\n-              <DialogTitle>{modalMode === 'add' ? 'Novo Participante' : 'Editar Participante'}</DialogTitle>\r\n-              <DialogDescription>\r\n-                Preencha os dados de meta e atingido para o influenciador\r\n-              </DialogDescription>\r\n-            </DialogHeader>\r\n-\r\n-            <div className=\"grid gap-4 py-4\">\r\n-              <Label>Influenciador</Label>\r\n-              <Select\r\n-                onValueChange={handleSelectInfluencer}\r\n-                value={newInfluencerForm.influencer_id}\r\n-                disabled={modalMode === 'edit'}\r\n-              >\r\n-                <SelectTrigger>\r\n-                  {newInfluencerForm.influencer_id\r\n-                    ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome\r\n-                    : 'Selecione'}\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {availableInfluencers.map((inf) => (\r\n-                    <SelectItem key={inf.id} value={inf.id}>\r\n-                      {inf.nome}\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-\r\n-              <Label>Meta</Label>\r\n-              <Input name=\"meta\" type=\"number\" value={newInfluencerForm.meta} onChange={handleNewFormChange} />\r\n-              <Label>Atingido</Label>\r\n-              <Input name=\"atingido\" type=\"number\" value={newInfluencerForm.atingido} onChange={handleNewFormChange} />\r\n-            </div>\r\n-\r\n-            <DialogFooter>\r\n-              <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n-              <Button onClick={handleSave} disabled={isSaving}>\r\n-                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n-                {modalMode === 'add' ? 'Adicionar' : 'Atualizar'}\r\n-              </Button>\r\n-            </DialogFooter>\r\n-          </DialogContent>\r\n-        </Dialog>\r\n-        \r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full text-sm text-left\">\r\n-          <thead>\r\n-            <tr className=\"bg-[#441240] text-gray-700\">\r\n-              <th className=\"px-4 py-2\">Nome</th>\r\n-              <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n-              <th className=\"px-4 py-2 text-center\">Meta</th>\r\n-              <th className=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#260a23]\">\r\n-                <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n-                <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n-                <td className=\"px-4 py-1.5 text-right align-middle\">\r\n-                  <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n-                      <Pencil className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n-                      <Trash2 className=\"h-4 w-4\" />\r\n-                    </Button>\r\n-                  </div>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-            {paginated.length === 0 && (\r\n-              <tr>\r\n-                <td colSpan={4} className=\"text-center py-4 text-gray-500\">\r\n-                  Nenhum participante encontrado nesta página.\r\n-                </td>\r\n-              </tr>\r\n-            )}\r\n-          </tbody>\r\n-        </table>\r\n-\r\n-        {/* Paginação com botões numerados */}\r\n-        <div className=\"flex items-center justify-end py-4 px-4\">\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.previousPage()}\r\n-              disabled={!table.getCanPreviousPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronLeft className=\"w-4 h-4\" />\r\n-            </Button>\r\n-            {table.getPageOptions().map((page, pageIndex) => (\r\n-              <Button\r\n-                key={`page-${pageIndex}`}\r\n-                onClick={() => table.setPageIndex(pageIndex)}\r\n-                size=\"icon\"\r\n-                className=\"w-8 h-8\"\r\n-                variant={table.getState().pagination.pageIndex === pageIndex ? 'default' : 'outline'}\r\n-              >\r\n-                {page + 1}\r\n-              </Button>\r\n-            ))}\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"icon\"\r\n-              onClick={() => table.nextPage()}\r\n-              disabled={!table.getCanNextPage()}\r\n-              className=\"w-8 h-8\"\r\n-            >\r\n-              <ChevronRight className=\"w-4 h-4\" />\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={setIsConfirmDeleteDialogOpen}>\r\n-        <AlertDialogContent>\r\n-          <AlertDialogHeader>\r\n-            <AlertDialogTitle>Excluir Participante</AlertDialogTitle>\r\n-            <AlertDialogDescription>\r\n-              Deseja realmente excluir <strong>{participantToDelete?.nome}</strong> deste evento?\r\n-            </AlertDialogDescription>\r\n-          </AlertDialogHeader>\r\n-          <AlertDialogFooter>\r\n-            <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n-            <AlertDialogAction onClick={handleDeleteParticipant}>Excluir</AlertDialogAction>\r\n-          </AlertDialogFooter>\r\n-        </AlertDialogContent>\r\n-      </AlertDialog>\r\n-    </div>\r\n-  )\r\n-}\r\n-\r\n"
                },
                {
                    "date": 1746641065798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#260a23]\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641071137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#260a23]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641077596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#260a23]\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641086713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n           <thead>\r\n-            <tr className=\"bg-[#441240] text-gray-700\">\r\n+            <tr className=\"bg-[#260a23] text-gray-700\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n               <th className=\"px-4 py-2 text-center\">Meta</th>\r\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n"
                },
                {
                    "date": 1746641100739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n           <thead>\r\n-            <tr className=\"bg-[#260a23] text-gray-700\">\r\n+            <tr className=\"bg-[#140512] text-gray-700\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n               <th className=\"px-4 py-2 text-center\">Meta</th>\r\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n"
                },
                {
                    "date": 1746641109656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n           <thead>\r\n-            <tr className=\"bg-[#140512] text-gray-700\">\r\n+            <tr className=\"bg-[#140512] text-gray-50\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n               <th className=\"px-4 py-2 text-center\">Meta</th>\r\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n"
                },
                {
                    "date": 1746641115877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n           <thead>\r\n-            <tr className=\"bg-[#140512] text-gray-50\">\r\n+            <tr className=\"bg-[#140512] text-gray-100\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n               <th className=\"px-4 py-2 text-center\">Meta</th>\r\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n"
                },
                {
                    "date": 1746641125529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n \r\n       <div className=\"overflow-x-auto\">\r\n         <table className=\"min-w-full text-sm text-left\">\r\n           <thead>\r\n-            <tr className=\"bg-[#140512] text-gray-100\">\r\n+            <tr className=\"bg-[#140512] text-white\">\r\n               <th className=\"px-4 py-2\">Nome</th>\r\n               <th className=\"px-4 py-2 text-center\">Atingido</th>\r\n               <th className=\"px-4 py-2 text-center\">Meta</th>\r\n               <th className=\"px-4 py-2 text-right\">Ações</th>\r\n"
                },
                {
                    "date": 1746641153957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-0hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641161907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-0hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b-1 hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641223316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b-1 hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b--2 hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641230526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b--2 hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b-2 hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641236359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b-2 hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641254513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b border-[#140512] hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641277335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b border-[#140512] hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b border-[#702a6a] hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641285676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n             {paginated.map(p => (\r\n-              <tr key={p.id} className=\"border-b border-[#702a6a] hover:bg-[#441240]\">\r\n+              <tr key={p.id} className=\"border-b border-[#3f193c] hover:bg-[#441240]\">\r\n                 <td className=\"px-4 py-1.5 align-middle\">{p.nome}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n"
                },
                {
                    "date": 1746641332652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"md\" className=\"flex items-center gap-2\">\r\n+            <Button size=\"md\" variant={\"default\"} className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746641343933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"md\" variant={\"default\"} className=\"flex items-center gap-2\">\r\n+            <Button size=\"md\" variant={\"soft\"} className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746641354295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"md\" variant={\"soft\"} className=\"flex items-center gap-2\">\r\n+            <Button size=\"md\" variant={\"outline\"} className=\"flex items-center gap-2\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746641366600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n-            <Button size=\"md\" variant={\"outline\"} className=\"flex items-center gap-2\">\r\n+            <Button size=\"md\" variant={\"outline\"} className=\"flex items-center gap-2 bg-white text-black\">\r\n               <PlusCircle className=\"h-4 w-4\" /> Adicionar Influencer\r\n             </Button>\r\n           </DialogTrigger>\r\n           <DialogContent className=\"sm:max-w-[500px]\">\r\n"
                },
                {
                    "date": 1746641404978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n           placeholder=\"Filtrar pelo nome do influenciador...\"\r\n           value={busca}\r\n           onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"max-w-xs\"\r\n+          className=\"bg-[#140512] max-w-xs\"\r\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641413898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n           placeholder=\"Filtrar pelo nome do influenciador...\"\r\n           value={busca}\r\n           onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"bg-[#140512] max-w-xs\"\r\n+          className=\"bg-[#140512] text-gray-300 max-w-xs\"\r\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641453937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n           placeholder=\"Filtrar pelo nome do influenciador...\"\r\n           value={busca}\r\n           onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"bg-[#140512] text-gray-300 max-w-xs\"\r\n+          className=\"bg-[#140512] .placeholder-gray-400::placeholder text-gray-300 max-w-xs\"\r\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641473662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n           placeholder=\"Filtrar pelo nome do influenciador...\"\r\n           value={busca}\r\n           onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"bg-[#140512] .placeholder-gray-400::placeholder text-gray-300 max-w-xs\"\r\n+          className=\"bg-[#140512] text-gray-400::placeholder text-gray-300 max-w-xs\"\r\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641528836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n           placeholder=\"Filtrar pelo nome do influenciador...\"\r\n           value={busca}\r\n           onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"bg-[#140512] text-gray-400::placeholder text-gray-300 max-w-xs\"\r\n+          className=\"bg-[#140512] placeholder-white text-gray-300 max-w-xs\"\r\n           />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641547695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n         <Input\r\n-          placeholder=\"Filtrar pelo nome do influenciador...\"\r\n+          placeholder=\"Filtrar pelo nome...\"\r\n           value={busca}\r\n           onChange={(e) => setBusca(e.target.value)}\r\n           className=\"bg-[#140512] placeholder-white text-gray-300 max-w-xs\"\r\n           />\r\n"
                },
                {
                    "date": 1746641561306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,13 +231,13 @@\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n         <Input\r\n-          placeholder=\"Filtrar pelo nome...\"\r\n-          value={busca}\r\n-          onChange={(e) => setBusca(e.target.value)}\r\n-          className=\"bg-[#140512] placeholder-white text-gray-300 max-w-xs\"\r\n-          />\r\n+  placeholder=\"Filtrar pelo nome...\"\r\n+  value={busca}\r\n+  onChange={(e) => setBusca(e.target.value)}\r\n+  className=\"bg-[#140512] placeholder-white text-gray-300 max-w-xs\"\r\n+/>\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n             <Button size=\"md\" variant={\"outline\"} className=\"flex items-center gap-2 bg-white text-black\">\r\n"
                },
                {
                    "date": 1746641590020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n   placeholder=\"Filtrar pelo nome...\"\r\n   value={busca}\r\n   onChange={(e) => setBusca(e.target.value)}\r\n-  className=\"bg-[#140512] placeholder-white text-gray-300 max-w-xs\"\r\n+  className=\" placeholder-white text-gray-300 max-w-xs\"\r\n />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641600595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n   placeholder=\"Filtrar pelo nome...\"\r\n   value={busca}\r\n   onChange={(e) => setBusca(e.target.value)}\r\n-  className=\" placeholder-white text-gray-300 max-w-xs\"\r\n+  className=\" text-gray-300 max-w-xs\"\r\n />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641606660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         <Input\r\n   placeholder=\"Filtrar pelo nome...\"\r\n   value={busca}\r\n   onChange={(e) => setBusca(e.target.value)}\r\n-  className=\" text-gray-300 max-w-xs\"\r\n+  className=\"max-w-xs\"\r\n />\r\n         <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n           <DialogTrigger asChild>\r\n             \r\n"
                },
                {
                    "date": 1746641618116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n     }\r\n   }\r\n \r\n   return (\r\n-    <div className=\"bg-[#230621] rounded-xlrounded-xl text-white p-6 w-full overflow-auto\">\r\n+    <div className=\"bg-[#230621] rounded-xl text-white p-6 w-full overflow-auto\">\r\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n         <Input\r\n"
                },
                {
                    "date": 1746641725087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n     }\r\n   }\r\n \r\n   return (\r\n-    <div className=\"bg-[#230621] rounded-xl text-white p-6 w-full overflow-auto\">\r\n+    <div className=\"bg-[#230621] min-h-[90vh] rounded-xl text-white p-6 w-full overflow-auto\">\r\n       <div className=\"flex justify-between items-center gap-4 flex-wrap mb-4\">\r\n         <h2 className=\"text-2xl font-semibold\">🎯 Participantes do Evento</h2>\r\n         <div className='flex justify-between items-center gap-4'>\r\n         <Input\r\n"
                },
                {
                    "date": 1746641786999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,9 +353,9 @@\n                 {page + 1}\r\n               </Button>\r\n             ))}\r\n             <Button\r\n-              variant=\"outline\"\r\n+              variant=\"default\"\r\n               size=\"icon\"\r\n               onClick={() => table.nextPage()}\r\n               disabled={!table.getCanNextPage()}\r\n               className=\"w-8 h-8\"\r\n"
                },
                {
                    "date": 1746641795717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,9 @@\n         {/* Paginação com botões numerados */}\r\n         <div className=\"flex items-center justify-end py-4 px-4\">\r\n           <div className=\"flex items-center gap-2\">\r\n             <Button\r\n-              variant=\"outline\"\r\n+              variant=\"default\"\r\n               size=\"icon\"\r\n               onClick={() => table.previousPage()}\r\n               disabled={!table.getCanPreviousPage()}\r\n               className=\"w-8 h-8\"\r\n"
                },
                {
                    "date": 1746641820704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n                   <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"outline\" onClick={() => handleEditar(p)}>\r\n+                    <Button size=\"icon\" variant=\"default\" onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n                     <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n"
                },
                {
                    "date": 1746641857221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n                   <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"default\" onClick={() => handleEditar(p)}>\r\n+                    <Button size=\"icon\" variant=\"default\" className='bg-[#441240]' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n                     <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n"
                },
                {
                    "date": 1746641900119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n                   <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"default\" className='bg-[#441240]' onClick={() => handleEditar(p)}>\r\n+                    <Button size=\"icon\" variant=\"default\" className='bg-[#380f34]' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n                     <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n"
                },
                {
                    "date": 1746641943487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n                   <div className=\"flex justify-end gap-2\">\r\n                     <Button size=\"icon\" variant=\"default\" className='bg-[#380f34]' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n-                    <Button size=\"icon\" className=\"bg-red-600 hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                    <Button size=\"icon\" className=\"bg-[aa2222] hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n                     </Button>\r\n                   </div>\r\n                 </td>\r\n"
                },
                {
                    "date": 1746641959388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n                   <div className=\"flex justify-end gap-2\">\r\n                     <Button size=\"icon\" variant=\"default\" className='bg-[#380f34]' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n-                    <Button size=\"icon\" className=\"bg-[aa2222] hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                    <Button size=\"icon\" className=\"bg-[#aa2222] hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n                     </Button>\r\n                   </div>\r\n                 </td>\r\n"
                },
                {
                    "date": 1746641970417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n                   <div className=\"flex justify-end gap-2\">\r\n                     <Button size=\"icon\" variant=\"default\" className='bg-[#380f34]' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n-                    <Button size=\"icon\" className=\"bg-[#aa2222] hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                    <Button size=\"icon\" className=\"hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n                     </Button>\r\n                   </div>\r\n                 </td>\r\n"
                },
                {
                    "date": 1746641977835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n                   <div className=\"flex justify-end gap-2\">\r\n                     <Button size=\"icon\" variant=\"default\" className='bg-[#380f34]' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n-                    <Button size=\"icon\" className=\"hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n+                    <Button size=\"icon\" className=\"bg-transparent hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n                     </Button>\r\n                   </div>\r\n                 </td>\r\n"
                },
                {
                    "date": 1746641991122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.atingido}</td>\r\n                 <td className=\"px-4 py-1.5 text-center align-middle\">{p.meta}</td>\r\n                 <td className=\"px-4 py-1.5 text-right align-middle\">\r\n                   <div className=\"flex justify-end gap-2\">\r\n-                    <Button size=\"icon\" variant=\"default\" className='bg-[#380f34]' onClick={() => handleEditar(p)}>\r\n+                    <Button size=\"icon\" variant=\"default\" className='bg-transparent' onClick={() => handleEditar(p)}>\r\n                       <Pencil className=\"h-4 w-4\" />\r\n                     </Button>\r\n                     <Button size=\"icon\" className=\"bg-transparent hover:bg-red-700 text-white\" onClick={() => handleStartDelete(p)}>\r\n                       <Trash2 className=\"h-4 w-4\" />\r\n"
                }
            ],
            "date": 1746573619147,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Button } from '@/components/ui/button'\r\nimport { PlusCircle, Loader2, Trash2 } from 'lucide-react'\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogTrigger,\r\n} from '@/components/ui/dialog'\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select'\r\nimport { Label } from '@/components/ui/label'\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\"\r\n\r\n\r\n// --- Interfaces (Mantidas) ---\r\ninterface Participante {\r\n  id: string\r\n  influencer_id: string\r\n  nome: string\r\n  imagem: string\r\n  atingido: number\r\n  meta: number\r\n}\r\n\r\ninterface InfluencerOption {\r\n  id: string\r\n  nome: string | null\r\n  imagem: string | null\r\n}\r\n\r\ninterface Props {\r\n  participantes: Participante[]\r\n  eventoId: string\r\n}\r\n\r\nexport default function ListaParticipantesEvento({ participantes: initialParticipantes, eventoId }: Props) {\r\n  const [participantes, setParticipantes] = useState<Participante[]>(initialParticipantes)\r\n  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add')\r\n  const [editingParticipant, setEditingParticipant] = useState<Participante | null>(null)\r\n\r\n  // --- Estados do Modal Adicionar/Editar ---\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [newInfluencerForm, setNewInfluencerForm] = useState({\r\n    influencer_id: '',\r\n    meta: 0,\r\n    atingido: 0,\r\n  })\r\n  const [isSaving, setIsSaving] = useState(false); // <-- NOVO ESTADO: Para controlar o salvamento\r\n\r\n  // --- Estados para a lista de Influenciadores Disponíveis ---\r\n  const [availableInfluencers, setAvailableInfluencers] = useState<InfluencerOption[]>([])\r\n  const [loadingInfluencers, setLoadingInfluencers] = useState(true)\r\n  const [errorLoadingInfluencers, setErrorLoadingInfluencers] = useState<string | null>(null)\r\n\r\n  // --- Estados para o Modal de Confirmação de Exclusão ---\r\n  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false);\r\n  const [participantToDelete, setParticipantToDelete] = useState<Participante | null>(null);\r\n\r\n\r\n  // --- Efeito para buscar a lista de influenciadores ---\r\n  useEffect(() => {\r\n    const fetchInfluencers = async () => {\r\n      try {\r\n        setLoadingInfluencers(true)\r\n        const res = await fetch('/api/influenciadores')\r\n        if (!res.ok) throw new Error(`Erro: ${res.statusText}`)\r\n        const data = await res.json() as any[]\r\n\r\n        const options: InfluencerOption[] = data.map((inf: any) => ({\r\n          id: inf.id,\r\n          nome: inf.nome || null,\r\n          imagem: inf.imagem || null,\r\n        }))\r\n        setAvailableInfluencers(options)\r\n      } catch (err: any) {\r\n        console.error(\"Erro ao buscar influenciadores:\", err)\r\n        setErrorLoadingInfluencers(err.message)\r\n      } finally {\r\n        setLoadingInfluencers(false)\r\n      }\r\n    }\r\n    fetchInfluencers()\r\n  }, [])\r\n\r\n  // --- Lógica para abrir modal de adição ---\r\n  const handleAddClick = () => {\r\n    setModalMode('add');\r\n    setEditingParticipant(null);\r\n    setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  // --- Lógica para abrir modal de edição ---\r\n  const handleEditar = (p: Participante) => {\r\n    setModalMode('edit')\r\n    setEditingParticipant(p)\r\n    setNewInfluencerForm({\r\n      influencer_id: p.influencer_id, // Manter o ID para referência, embora desabilitado no Select\r\n      meta: p.meta,\r\n      atingido: p.atingido,\r\n    })\r\n    setIsModalOpen(true)\r\n  }\r\n\r\n   // --- Lógica para fechar modal de adição/edição e resetar estado ---\r\n   const handleCloseModal = (open: boolean) => {\r\n      setIsModalOpen(open);\r\n      if (!open) { // Se estiver fechando o modal\r\n         setEditingParticipant(null);\r\n         setNewInfluencerForm({ influencer_id: '', meta: 0, atingido: 0 });\r\n         setModalMode('add');\r\n      }\r\n   };\r\n\r\n  // --- Lógica para fechar modal de confirmação de exclusão ---\r\n  const handleCloseConfirmDeleteDialog = (open: boolean) => {\r\n      setIsConfirmDeleteDialogOpen(open);\r\n      if (!open) { // Se estiver fechando o modal de confirmação\r\n          setParticipantToDelete(null); // Limpa o participante a ser excluído\r\n      }\r\n  };\r\n\r\n  // --- Lógica para selecionar influenciador no formulário de adição ---\r\n  const handleSelectInfluencer = (value: string) => {\r\n    setNewInfluencerForm(prev => ({ ...prev, influencer_id: value }))\r\n  }\r\n\r\n  // --- Lógica para atualizar campos Meta/Atingido no formulário ---\r\n  const handleNewFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type } = e.target\r\n    setNewInfluencerForm(prev => ({\r\n      ...prev,\r\n      [name]: type === 'number' ? +value : value,\r\n    }))\r\n  }\r\n\r\n  // --- Lógica para Salvar (Adicionar ou Editar) ---\r\n  const handleSave = async () => {\r\n    const { influencer_id, meta, atingido } = newInfluencerForm\r\n\r\n    // --- Validação e Verificação de Duplicidade (Modo Adicionar) ---\r\n    if (modalMode === 'add') {\r\n       if (!influencer_id) {\r\n           alert('Selecione um influenciador.');\r\n           return;\r\n       }\r\n       // <-- VERIFICAÇÃO DE DUPLICIDADE AQUI -->\r\n       const isDuplicate = participantes.some(p => p.influencer_id === influencer_id);\r\n       if (isDuplicate) {\r\n           alert('Este influenciador já participa deste evento.');\r\n           return; // Impede a continuação se for duplicado\r\n       }\r\n       // <------------------------------------>\r\n    }\r\n\r\n     if (isNaN(meta) || meta < 0 || isNaN(atingido) || atingido < 0) {\r\n       alert('Meta e Atingido devem ser números válidos e não negativos.');\r\n       return;\r\n     }\r\n    // --- Fim da Validação ---\r\n\r\n    setIsSaving(true); // <-- NOVO: Habilita estado de salvamento\r\n\r\n    try {\r\n      const method = modalMode === 'add' ? 'POST' : 'PATCH'\r\n      const url = `/api/eventos/${eventoId}/participantes`; // URL base para POST e PATCH\r\n\r\n      const body = modalMode === 'add'\r\n        ? newInfluencerForm // POST body\r\n        : {\r\n            participante_id: editingParticipant?.id, // PATCH body\r\n            meta,\r\n            atingido,\r\n          }\r\n\r\n      const res = await fetch(url, {\r\n        method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body),\r\n      })\r\n\r\n      if (!res.ok) {\r\n        const errorBody = await res.text();\r\n        throw new Error(`Erro ao salvar participante: ${res.status} - ${errorBody || res.statusText}`);\r\n      }\r\n\r\n      const response = await res.json();\r\n\r\n      if (modalMode === 'add') {\r\n        const selected = availableInfluencers.find(i => i.id === influencer_id);\r\n        const novoParticipante: Participante = {\r\n            id: response.id,\r\n            influencer_id: influencer_id,\r\n            nome: selected?.nome || `ID: ${influencer_id}`,\r\n            imagem: selected?.imagem || '',\r\n            meta: response.meta,\r\n            atingido: response.atingido,\r\n        };\r\n        setParticipantes(prev => [...prev, novoParticipante]);\r\n\r\n      } else { // Modo 'edit'\r\n        setParticipantes(prev => prev.map(p =>\r\n          p.id === editingParticipant?.id ? { ...p, meta: response.meta, atingido: response.atingido } : p\r\n        ));\r\n      }\r\n\r\n      handleCloseModal(false); // Fechar e resetar modal de adição/edição\r\n    } catch (err: any) {\r\n      console.error(\"Erro no handleSave:\", err); // Log mais detalhado\r\n      alert(err.message)\r\n    } finally {\r\n        setIsSaving(false); // <-- NOVO: Desabilita estado de salvamento (acontece sempre)\r\n    }\r\n  }\r\n\r\n    // --- Lógica para iniciar o processo de exclusão (mostrar confirmação) ---\r\n    const handleStartDelete = (p: Participante) => {\r\n        setParticipantToDelete(p);\r\n        setIsConfirmDeleteDialogOpen(true);\r\n    };\r\n\r\n    // --- Lógica para Excluir (após confirmação) ---\r\n    const handleDeleteParticipant = async () => {\r\n        if (!participantToDelete) return;\r\n\r\n        try {\r\n            const url = `/api/eventos/${eventoId}/participantes/${participantToDelete.id}`;\r\n\r\n            const res = await fetch(url, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n\r\n            if (!res.ok) {\r\n                const errorBody = await res.text();\r\n                throw new Error(`Erro ao excluir participante: ${res.status} - ${errorBody || res.statusText}`);\r\n            }\r\n\r\n            setParticipantes(prev => prev.filter(p => p.id !== participantToDelete.id));\r\n\r\n            handleCloseConfirmDeleteDialog(false);\r\n\r\n        } catch (err: any) {\r\n            console.error(\"Erro ao excluir participante:\", err);\r\n            alert(`Erro ao excluir participante: ${err.message}`);\r\n        }\r\n    };\r\n\r\n    // --- Calcula se o influenciador selecionado já está na lista (para desabilitar botão) ---\r\n    const isInfluencerAlreadyAdded = modalMode === 'add' &&\r\n                                     newInfluencerForm.influencer_id !== '' &&\r\n                                     participantes.some(p => p.influencer_id === newInfluencerForm.influencer_id);\r\n    // <------------------------------------------------------------------------>\r\n\r\n\r\n  // --- Renderização ---\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow p-4 w-full h-full overflow-auto\">\r\n      <div className='flex'>\r\n      <h2 className=\"text-xl font-bold mb-4\">Lista de Influenciadores</h2>\r\n      {/* Botão para Adicionar Influenciador - Trigger do Modal Adicionar/Editar */}\r\n      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\r\n        <DialogTrigger asChild>\r\n          <Button size=\"sm\" className=\"mb-4\" onClick={handleAddClick}>\r\n            <PlusCircle className=\"mr-2 h-4 w-4\" /> Adicionar Influenciador\r\n          </Button>\r\n        </DialogTrigger>\r\n\r\n        {/* Conteúdo do Modal Adicionar/Editar */}\r\n        <DialogContent className=\"sm:max-w-[425px]\">\r\n          <DialogHeader>\r\n            <DialogTitle>\r\n              {modalMode === 'add' ? 'Adicionar Novo Participante' : 'Editar Participante'}\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              {modalMode === 'add'\r\n                ? 'Selecione um influenciador e defina as métricas iniciais para este evento.'\r\n                : `Editando métricas para: ${editingParticipant?.nome ?? 'Participante'}.`}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n\r\n          <div className=\"grid gap-4 py-4\">\r\n            {/* Campo Influenciador (Select) */}\r\n            <div className=\"space-y-1.5\">\r\n              <Label className=\"text-right\">Influenciador</Label>\r\n              <div className=\"col-span-3\"> {/* Ajuste de layout, remova col-span-3 se não precisar */}\r\n                {loadingInfluencers ? (\r\n                  <div className=\"flex items-center gap-2 text-gray-500\">\r\n                    <Loader2 className=\"h-4 w-4 animate-spin\" /> Carregando...\r\n                  </div>\r\n                ) : errorLoadingInfluencers ? (\r\n                  <p className=\"text-red-500 text-sm\">{errorLoadingInfluencers}</p>\r\n                ) : (\r\n                  <Select\r\n                    onValueChange={handleSelectInfluencer}\r\n                    value={newInfluencerForm.influencer_id}\r\n                    disabled={modalMode === 'edit'} // Desabilita seleção em modo edição\r\n                  >\r\n                    <SelectTrigger>\r\n                      {newInfluencerForm.influencer_id\r\n                        ? availableInfluencers.find(i => i.id === newInfluencerForm.influencer_id)?.nome || `ID: ${newInfluencerForm.influencer_id}`\r\n                        : 'Selecione um influenciador'}\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {availableInfluencers.map((inf) => (\r\n                        <SelectItem key={inf.id} value={inf.id}>\r\n                           {inf.nome || `Sem nome - ID: ${inf.id}`}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                )}\r\n                {/* Mensagem de duplicidade opcional */}\r\n                {modalMode === 'add' && isInfluencerAlreadyAdded && (\r\n                    <p className=\"text-sm font-medium text-yellow-600 mt-1\">\r\n                        Este influenciador já está neste evento.\r\n                    </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Campos Meta e Atingido */}\r\n            <div className='grid grid-cols-2 items-center gap-4'>\r\n                <div className=\"space-y-1.5\">\r\n                  <Label className=\"text-right\">Meta</Label>\r\n                  <Input\r\n                    name=\"meta\"\r\n                    type=\"number\"\r\n                    value={newInfluencerForm.meta}\r\n                    onChange={handleNewFormChange}\r\n                    className=\"flex-grow\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-1.5\">\r\n                  <Label className=\"text-right\">Atingido</Label>\r\n                  <Input\r\n                    name=\"atingido\"\r\n                    type=\"number\"\r\n                    value={newInfluencerForm.atingido}\r\n                    onChange={handleNewFormChange}\r\n                    className=\"flex-grow\"\r\n                  />\r\n                </div>\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => handleCloseModal(false)}>Cancelar</Button>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={handleSave}\r\n              // <-- DESABILITAÇÃO DO BOTÃO AQUI -->\r\n              disabled={\r\n                isSaving || // Desabilita se estiver salvando\r\n                loadingInfluencers || // Opcional: desabilita se ainda carregando a lista de influenciadores\r\n                (modalMode === 'add' && !newInfluencerForm.influencer_id) || // Em modo adicionar, desabilita se nenhum influencer selecionado\r\n                isInfluencerAlreadyAdded // <-- NOVO: Desabilita se o influenciador selecionado já está na lista\r\n              }\r\n            >\r\n              {/* Ícone de loading condicional */}\r\n              {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n              {modalMode === 'add' ? 'Salvar Influenciador' : 'Atualizar'}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      </div>\r\n\r\n\r\n      {/* Modal de Confirmação de Exclusão (Mantido) */}\r\n      <AlertDialog open={isConfirmDeleteDialogOpen} onOpenChange={handleCloseConfirmDeleteDialog}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Tem certeza?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              Esta ação não pode ser desfeita. Isso removerá permanentemente o participante{' '}\r\n              <strong>{participantToDelete?.nome ?? `ID: ${participantToDelete?.influencer_id ?? ''}`}</strong>{' '}\r\n              deste evento.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel onClick={() => handleCloseConfirmDeleteDialog(false)}>Cancelar</AlertDialogCancel>\r\n            <AlertDialogAction onClick={handleDeleteParticipant}>Continuar</AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n\r\n\r\n      {/* Tabela de Participantes (Mantida) */}\r\n      <table className=\"w-full text-left border-separate border-spacing-y-2\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nome</th>\r\n            <th>Atingido</th>\r\n            <th>Meta</th>\r\n            <th>Ações</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {participantes.map(p => (\r\n            <tr key={p.id} className=\"bg-gray-100 rounded\">\r\n              <td>{p.nome ?? `ID: ${p.influencer_id}`}</td>\r\n              <td>{p.atingido}</td>\r\n              <td>{p.meta}</td>\r\n              <td className=\"flex gap-2\">\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"outline\"\r\n                  onClick={() => handleEditar(p)}\r\n                >\r\n                  Editar\r\n                </Button>\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"shadow\"\r\n                  onClick={() => handleStartDelete(p)}\r\n                >\r\n                   <Trash2 className=\"h-4 w-4\" />\r\n                 </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}"
        }
    ]
}