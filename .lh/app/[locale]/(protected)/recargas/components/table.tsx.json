{
    "sourceFile": "app/[locale]/(protected)/recargas/components/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1745345830045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745345905058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+'use client';\r\n+\r\n+import * as React from 'react';\r\n+import {\r\n+  ColumnFiltersState,\r\n+  SortingState,\r\n+  VisibilityState,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  useReactTable,\r\n+  flexRender,\r\n+} from '@tanstack/react-table';\r\n+\r\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Button } from '@/components/ui/button';\r\n+\r\n+import { getColumns, RecargaTabela } from './columns';\r\n+import { influenciadores } from '@/lib/influenciadores';\r\n+\r\n+function transformarParaRecargas(): RecargaTabela[] {\r\n+  return influenciadores.flatMap((inf) =>\r\n+    inf.relacoes.map((relacao, index) => ({\r\n+      id: inf.id + '-' + index,\r\n+      nome: inf.nome,\r\n+      imagem: inf.imagem,\r\n+      plataformaId: relacao.plataformaId,\r\n+      inicio: relacao.inicio,\r\n+      termino: relacao.termino,\r\n+      valor: relacao.salario ?? 0,\r\n+      meta: relacao.meta,\r\n+      atingido: relacao.atingido,\r\n+      statusMeta: relacao.atingido >= relacao.meta ? 'completo' : 'incompleto',\r\n+    }))\r\n+  );\r\n+}\r\n+\r\n+export function RecargaTable() {\r\n+  const data = transformarParaRecargas();\r\n+\r\n+  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n+  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n+  const [rowSelection, setRowSelection] = React.useState({});\r\n+\r\n+  const table = useReactTable({\r\n+    data,\r\n+    columns: getColumns(),\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    onSortingChange: setSorting,\r\n+    onColumnFiltersChange: setColumnFilters,\r\n+    onColumnVisibilityChange: setColumnVisibility,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    state: {\r\n+      sorting,\r\n+      columnFilters,\r\n+      columnVisibility,\r\n+      rowSelection,\r\n+    },\r\n+  });\r\n+\r\n+  return (\r\n+    <div>\r\n+      <div className=\"flex items-center py-4\">\r\n+        <Input\r\n+          placeholder=\"Filtrar por nome...\"\r\n+          value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n+          onChange={(event) => table.getColumn('nome')?.setFilterValue(event.target.value)}\r\n+          className=\"max-w-sm\"\r\n+        />\r\n+      </div>\r\n+\r\n+      <div className=\"rounded-md border\">\r\n+        <Table>\r\n+          <TableHeader>\r\n+            {table.getHeaderGroups().map((headerGroup) => (\r\n+              <TableRow key={headerGroup.id}>\r\n+                {headerGroup.headers.map((header) => (\r\n+                  <TableHead key={header.id}>\r\n+                    {header.isPlaceholder\r\n+                      ? null\r\n+                      : flexRender(header.column.columnDef.header, header.getContext())}\r\n+                  </TableHead>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))}\r\n+          </TableHeader>\r\n+\r\n+          <TableBody>\r\n+            {table.getRowModel().rows?.length ? (\r\n+              table.getRowModel().rows.map((row) => (\r\n+                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n+                  {row.getVisibleCells().map((cell) => (\r\n+                    <TableCell key={cell.id}>\r\n+                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                    </TableCell>\r\n+                  ))}\r\n+                </TableRow>\r\n+              ))\r\n+            ) : (\r\n+              <TableRow>\r\n+                <TableCell colSpan={10} className=\"h-24 text-center\">\r\n+                  Nenhuma recarga encontrada.\r\n+                </TableCell>\r\n+              </TableRow>\r\n+            )}\r\n+          </TableBody>\r\n+        </Table>\r\n+      </div>\r\n+\r\n+      <div className=\"flex items-center justify-end space-x-2 py-4\">\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => table.previousPage()}\r\n+          disabled={!table.getCanPreviousPage()}\r\n+        >\r\n+          Anterior\r\n+        </Button>\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => table.nextPage()}\r\n+          disabled={!table.getCanNextPage()}\r\n+        >\r\n+          Próxima\r\n+        </Button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1745347934440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,23 +20,23 @@\n import { getColumns, RecargaTabela } from './columns';\r\n import { influenciadores } from '@/lib/influenciadores';\r\n \r\n function transformarParaRecargas(): RecargaTabela[] {\r\n-  return influenciadores.flatMap((inf) =>\r\n-    inf.relacoes.map((relacao, index) => ({\r\n-      id: inf.id + '-' + index,\r\n-      nome: inf.nome,\r\n-      imagem: inf.imagem,\r\n-      plataformaId: relacao.plataformaId,\r\n-      inicio: relacao.inicio,\r\n-      termino: relacao.termino,\r\n-      valor: relacao.salario ?? 0,\r\n-      meta: relacao.meta,\r\n-      atingido: relacao.atingido,\r\n-      statusMeta: relacao.atingido >= relacao.meta ? 'completo' : 'incompleto',\r\n-    }))\r\n-  );\r\n-}\r\n+    return influenciadores.flatMap((inf) =>\r\n+      inf.recargas.map((recarga, index) => ({\r\n+        id: `${inf.id}-${index}`,\r\n+        nome: inf.nome,\r\n+        imagem: inf.imagem,\r\n+        plataformaId: recarga.plataformaId,\r\n+        inicio: recarga.inicio,\r\n+        termino: recarga.termino,\r\n+        valor: recarga.salario,\r\n+        meta: recarga.meta,\r\n+        atingido: recarga.atingido,\r\n+        statusMeta: recarga.statusMeta,\r\n+      }))\r\n+    );\r\n+  }\r\n \r\n export function RecargaTable() {\r\n   const data = transformarParaRecargas();\r\n \r\n"
                },
                {
                    "date": 1745468011357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n       }))\r\n     );\r\n   }\r\n \r\n-export function RecargaTable() {\r\n-  const data = transformarParaRecargas();\r\n+  export const RecargaTable = React.memo(function RecargaTable() {\r\n+    const data = React.useMemo(() => transformarParaRecargas(), []);\r\n \r\n   const [sorting, setSorting] = React.useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\r\n@@ -132,5 +132,5 @@\n         </Button>\r\n       </div>\r\n     </div>\r\n   );\r\n-}\r\n+});\r\n"
                },
                {
                    "date": 1745510463147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import { Button } from '@/components/ui/button';\r\n \r\n import { getColumns, RecargaTabela } from './columns';\r\n import { influenciadores } from '@/lib/influenciadores';\r\n+import TablePagination from './table-pagination';\r\n \r\n function transformarParaRecargas(): RecargaTabela[] {\r\n     return influenciadores.flatMap((inf) =>\r\n       inf.recargas.map((recarga, index) => ({\r\n@@ -113,24 +114,9 @@\n         </Table>\r\n       </div>\r\n \r\n       <div className=\"flex items-center justify-end space-x-2 py-4\">\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => table.previousPage()}\r\n-          disabled={!table.getCanPreviousPage()}\r\n-        >\r\n-          Anterior\r\n-        </Button>\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => table.nextPage()}\r\n-          disabled={!table.getCanNextPage()}\r\n-        >\r\n-          Próxima\r\n-        </Button>\r\n+              <TablePagination table={table} />\r\n       </div>\r\n     </div>\r\n   );\r\n });\r\n"
                },
                {
                    "date": 1745510566904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,12 +111,9 @@\n               </TableRow>\r\n             )}\r\n           </TableBody>\r\n         </Table>\r\n+        <TablePagination table={table} />\r\n       </div>\r\n-\r\n-      <div className=\"flex items-center justify-end space-x-2 py-4\">\r\n-              <TablePagination table={table} />\r\n-      </div>\r\n     </div>\r\n   );\r\n });\r\n"
                },
                {
                    "date": 1745510798439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     },\r\n   });\r\n \r\n   return (\r\n-    <div>\r\n+    <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4\">\r\n         <Input\r\n           placeholder=\"Filtrar por nome...\"\r\n           value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n"
                },
                {
                    "date": 1745510871155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,18 +66,21 @@\n   });\r\n \r\n   return (\r\n     <div className=\"w-full\">\r\n-      <div className=\"flex items-center py-4\">\r\n-        <Input\r\n-          placeholder=\"Filtrar por nome...\"\r\n-          value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n-          onChange={(event) => table.getColumn('nome')?.setFilterValue(event.target.value)}\r\n-          className=\"max-w-sm\"\r\n-        />\r\n-      </div>\r\n-\r\n-      <div className=\"rounded-md border\">\r\n+      <div className=\"flex items-center py-4 px-5\">\r\n+              <div className=\"flex-1 text-xl font-medium text-default-900\">Recargas</div>\r\n+              <div className=\"flex-none\">\r\n+                <Input\r\n+                  placeholder=\"Filtrar por nome...\"\r\n+                  value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n+                  onChange={(event) =>\r\n+                    table.getColumn('nome')?.setFilterValue(event.target.value)\r\n+                  }\r\n+                  className=\"max-w-sm\"\r\n+                />\r\n+              </div>\r\n+            </div>\r\n         <Table>\r\n           <TableHeader>\r\n             {table.getHeaderGroups().map((headerGroup) => (\r\n               <TableRow key={headerGroup.id}>\r\n@@ -112,8 +115,8 @@\n             )}\r\n           </TableBody>\r\n         </Table>\r\n         <TablePagination table={table} />\r\n-      </div>\r\n+      \r\n     </div>\r\n   );\r\n });\r\n"
                },
                {
                    "date": 1745510886932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n-              <div className=\"flex-1 text-xl font-medium text-default-900\">Recargas</div>\r\n+              <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n               <div className=\"flex-none\">\r\n                 <Input\r\n                   placeholder=\"Filtrar por nome...\"\r\n                   value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n"
                },
                {
                    "date": 1745510998087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,12 @@\n       rowSelection,\r\n     },\r\n   });\r\n \r\n+    function setModalOpen(arg0: boolean): void {\r\n+      throw new Error('Function not implemented.');\r\n+    }\r\n+\r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n               <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n@@ -77,8 +81,9 @@\n                     table.getColumn('nome')?.setFilterValue(event.target.value)\r\n                   }\r\n                   className=\"max-w-sm\"\r\n                 />\r\n+                  <Button onClick={() => setModalOpen(true)}>Nova Recarga</Button>\r\n               </div>\r\n             </div>\r\n         <Table>\r\n           <TableHeader>\r\n"
                },
                {
                    "date": 1745511078090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,23 @@\n \r\n import { getColumns, RecargaTabela } from './columns';\r\n import { influenciadores } from '@/lib/influenciadores';\r\n import TablePagination from './table-pagination';\r\n+import RecargasModal from \"@/components/RecargasModal\";\r\n+import { useState } from 'react';\r\n \r\n+const [modalOpen, setModalOpen] = useState(false);\r\n+const handleSaveRecarga = (recarga: {\r\n+  influenciadorId: string;\r\n+  plataformaId: string;\r\n+  valor: number;\r\n+  inicio: Date;\r\n+  termino: Date;\r\n+}) => {\r\n+  console.log(\"Recarga adicionada:\", recarga);\r\n+  setModalOpen(false);\r\n+  // Aqui você pode salvar no backend ou atualizar o estado global\r\n+};\r\n function transformarParaRecargas(): RecargaTabela[] {\r\n     return influenciadores.flatMap((inf) =>\r\n       inf.recargas.map((recarga, index) => ({\r\n         id: `${inf.id}-${index}`,\r\n@@ -64,12 +78,8 @@\n       rowSelection,\r\n     },\r\n   });\r\n \r\n-    function setModalOpen(arg0: boolean): void {\r\n-      throw new Error('Function not implemented.');\r\n-    }\r\n-\r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n               <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n"
                },
                {
                    "date": 1745511121382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,13 @@\n             )}\r\n           </TableBody>\r\n         </Table>\r\n         <TablePagination table={table} />\r\n-      \r\n+      <RecargasModal\r\n+              open={modalOpen}\r\n+              onClose={() => setModalOpen(false)}\r\n+              onSave={handleSaveRecarga}\r\n+              influenciadores={influenciadores}\r\n+            />\r\n     </div>\r\n   );\r\n });\r\n"
                },
                {
                    "date": 1745511198338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,20 +22,9 @@\n import TablePagination from './table-pagination';\r\n import RecargasModal from \"@/components/RecargasModal\";\r\n import { useState } from 'react';\r\n \r\n-const [modalOpen, setModalOpen] = useState(false);\r\n-const handleSaveRecarga = (recarga: {\r\n-  influenciadorId: string;\r\n-  plataformaId: string;\r\n-  valor: number;\r\n-  inicio: Date;\r\n-  termino: Date;\r\n-}) => {\r\n-  console.log(\"Recarga adicionada:\", recarga);\r\n-  setModalOpen(false);\r\n-  // Aqui você pode salvar no backend ou atualizar o estado global\r\n-};\r\n+\r\n function transformarParaRecargas(): RecargaTabela[] {\r\n     return influenciadores.flatMap((inf) =>\r\n       inf.recargas.map((recarga, index) => ({\r\n         id: `${inf.id}-${index}`,\r\n@@ -77,9 +66,20 @@\n       columnVisibility,\r\n       rowSelection,\r\n     },\r\n   });\r\n-\r\n+  const [modalOpen, setModalOpen] = useState(false);\r\n+  const handleSaveRecarga = (recarga: {\r\n+    influenciadorId: string;\r\n+    plataformaId: string;\r\n+    valor: number;\r\n+    inicio: Date;\r\n+    termino: Date;\r\n+  }) => {\r\n+    console.log(\"Recarga adicionada:\", recarga);\r\n+    setModalOpen(false);\r\n+    // Aqui você pode salvar no backend ou atualizar o estado global\r\n+  };\r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n               <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n"
                },
                {
                    "date": 1745511217145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n               <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n-              <div className=\"flex-none\">\r\n+              <div className=\"flex\">\r\n                 <Input\r\n                   placeholder=\"Filtrar por nome...\"\r\n                   value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n                   onChange={(event) =>\r\n"
                },
                {
                    "date": 1745511230174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n               <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n-              <div className=\"flex\">\r\n+              <div className=\"flex items-center space-x-2 ga-4\"> \r\n                 <Input\r\n                   placeholder=\"Filtrar por nome...\"\r\n                   value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n                   onChange={(event) =>\r\n"
                },
                {
                    "date": 1745511237284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n               <div className=\"flex-1 text-xl font-medium text-default-900\">Histórico de Recargas</div>\r\n-              <div className=\"flex items-center space-x-2 ga-4\"> \r\n+              <div className=\"flex items-center space-x-3 ga-4\"> \r\n                 <Input\r\n                   placeholder=\"Filtrar por nome...\"\r\n                   value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n                   onChange={(event) =>\r\n"
                },
                {
                    "date": 1745511339047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n 'use client';\r\n-\r\n-import * as React from 'react';\r\n import {\r\n   ColumnFiltersState,\r\n   SortingState,\r\n   VisibilityState,\r\n@@ -20,9 +18,9 @@\n import { getColumns, RecargaTabela } from './columns';\r\n import { influenciadores } from '@/lib/influenciadores';\r\n import TablePagination from './table-pagination';\r\n import RecargasModal from \"@/components/RecargasModal\";\r\n-import { useState } from 'react';\r\n+import React, { useState } from 'react';\r\n \r\n \r\n function transformarParaRecargas(): RecargaTabela[] {\r\n     return influenciadores.flatMap((inf) =>\r\n"
                }
            ],
            "date": 1745345830045,
            "name": "Commit-0",
            "content": ""
        }
    ]
}