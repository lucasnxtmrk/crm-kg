{
    "sourceFile": "app/[locale]/(protected)/recargas/components/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1745876431313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745876702244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,51 +19,47 @@\n import { getColumns, RecargaTabela } from './columns';\r\n import TablePagination from './table-pagination';\r\n import RecargasModal from \"@/components/RecargasModal\";\r\n import React, { useState, useEffect } from 'react';\r\n-import { Influenciador } from '@/lib/types'; // Tipos corretos!\r\n \r\n export const RecargaTable = React.memo(function RecargaTable() {\r\n   \r\n-  // Estado que vai guardar os dados reais da API\r\n   const [data, setData] = useState<RecargaTabela[]>([]);\r\n   \r\n   const [sorting, setSorting] = useState<SortingState>([]);\r\n   const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n   const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n   const [rowSelection, setRowSelection] = useState({});\r\n   const [modalOpen, setModalOpen] = useState(false);\r\n \r\n-  // Aqui buscamos a API ao montar o componente\r\n   useEffect(() => {\r\n-    async function fetchData() {\r\n+    async function fetchRecargas() {\r\n       try {\r\n-        const res = await fetch('/api/influenciadores'); // üß† Ajuste essa rota conforme seu backend\r\n-        const influenciadores: Influenciador[] = await res.json();\r\n+        const res = await fetch('/api/recargas');\r\n+        const recargas = await res.json();\r\n \r\n-        const recargasTransformadas = influenciadores.flatMap((inf) =>\r\n-          inf.recargas.map((recarga, index) => ({\r\n-            id: `${inf.id}-${index}`,\r\n-            nome: inf.nome,\r\n-            imagem: inf.imagem,\r\n-            plataformaId: recarga.plataformaId,\r\n-            inicio: recarga.inicio,\r\n-            termino: recarga.termino,\r\n-            valor: recarga.salario,\r\n-            meta: recarga.meta,\r\n-            atingido: recarga.atingido,\r\n-            statusMeta: recarga.statusMeta,\r\n-          }))\r\n-        );\r\n+        const recargasFormatadas: RecargaTabela[] = recargas.map((recarga: any) => ({\r\n+          id: recarga.id,\r\n+          nome: recarga.cadastros_influenciadores?.influenciadores?.nome ?? 'Sem Nome',\r\n+          imagem: recarga.cadastros_influenciadores?.influenciadores?.imagem ?? '',\r\n+          plataformaId: recarga.cadastros_influenciadores?.plataformas?.id ?? '',\r\n+          plataformaNome: recarga.cadastros_influenciadores?.plataformas?.nome ?? '',\r\n+          inicio: recarga.inicio,\r\n+          termino: recarga.termino,\r\n+          valor: recarga.salario,\r\n+          meta: recarga.meta,\r\n+          atingido: recarga.atingido,\r\n+          statusMeta: recarga.status_meta,\r\n+        }));\r\n \r\n-        setData(recargasTransformadas);\r\n+        setData(recargasFormatadas);\r\n       } catch (error) {\r\n         console.error('Erro ao buscar recargas:', error);\r\n       }\r\n     }\r\n \r\n-    fetchData();\r\n-  }, []); // Executa apenas uma vez\r\n+    fetchRecargas();\r\n+  }, []);\r\n \r\n   const table = useReactTable({\r\n     data,\r\n     columns: getColumns(),\r\n@@ -82,25 +78,18 @@\n       rowSelection,\r\n     },\r\n   });\r\n \r\n-  const handleSaveRecarga = (recarga: {\r\n-    influenciadorId: string;\r\n-    plataformaId: string;\r\n-    valor: number;\r\n-    inicio: Date;\r\n-    termino: Date;\r\n-  }) => {\r\n-    console.log(\"Recarga adicionada:\", recarga);\r\n+  const handleSaveRecarga = () => {\r\n+    // Depois configuramos adicionar recarga via modal\r\n     setModalOpen(false);\r\n-    // Atualizar o estado se quiser adicionar sem reload\r\n   };\r\n \r\n   return (\r\n     <div className=\"w-full\">\r\n       <div className=\"flex items-center py-4 px-5\">\r\n         <div className=\"flex-1 text-xl font-medium text-default-900\">Hist√≥rico de Recargas</div>\r\n-        <div className=\"flex items-center space-x-3\"> \r\n+        <div className=\"flex items-center space-x-3\">\r\n           <Input\r\n             placeholder=\"Filtrar por nome...\"\r\n             value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n             onChange={(event) =>\r\n@@ -110,8 +99,9 @@\n           />\r\n           <Button onClick={() => setModalOpen(true)}>Nova Recarga</Button>\r\n         </div>\r\n       </div>\r\n+\r\n       <Table>\r\n         <TableHeader className=\"bg-default-200\">\r\n           {table.getHeaderGroups().map((headerGroup) => (\r\n             <TableRow key={headerGroup.id}>\r\n@@ -147,13 +137,14 @@\n         </TableBody>\r\n       </Table>\r\n \r\n       <TablePagination table={table} />\r\n+\r\n       <RecargasModal\r\n         open={modalOpen}\r\n         onClose={() => setModalOpen(false)}\r\n         onSave={handleSaveRecarga}\r\n-        influenciadores={[]} // voc√™ pode passar influenciadores aqui se quiser!\r\n+        influenciadores={[]} // Se quiser, podemos puxar a lista aqui tamb√©m!\r\n       />\r\n     </div>\r\n   );\r\n });\r\n"
                },
                {
                    "date": 1745877779676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,8 @@\n       <RecargasModal\r\n         open={modalOpen}\r\n         onClose={() => setModalOpen(false)}\r\n         onSave={handleSaveRecarga}\r\n-        influenciadores={[]} // Se quiser, podemos puxar a lista aqui tamb√©m!\r\n       />\r\n     </div>\r\n   );\r\n });\r\n"
                }
            ],
            "date": 1745876431313,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport {\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  flexRender,\r\n} from '@tanstack/react-table';\r\n\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\n\r\nimport { getColumns, RecargaTabela } from './columns';\r\nimport TablePagination from './table-pagination';\r\nimport RecargasModal from \"@/components/RecargasModal\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Influenciador } from '@/lib/types'; // Tipos corretos!\r\n\r\nexport const RecargaTable = React.memo(function RecargaTable() {\r\n  \r\n  // Estado que vai guardar os dados reais da API\r\n  const [data, setData] = useState<RecargaTabela[]>([]);\r\n  \r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  // Aqui buscamos a API ao montar o componente\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await fetch('/api/influenciadores'); // üß† Ajuste essa rota conforme seu backend\r\n        const influenciadores: Influenciador[] = await res.json();\r\n\r\n        const recargasTransformadas = influenciadores.flatMap((inf) =>\r\n          inf.recargas.map((recarga, index) => ({\r\n            id: `${inf.id}-${index}`,\r\n            nome: inf.nome,\r\n            imagem: inf.imagem,\r\n            plataformaId: recarga.plataformaId,\r\n            inicio: recarga.inicio,\r\n            termino: recarga.termino,\r\n            valor: recarga.salario,\r\n            meta: recarga.meta,\r\n            atingido: recarga.atingido,\r\n            statusMeta: recarga.statusMeta,\r\n          }))\r\n        );\r\n\r\n        setData(recargasTransformadas);\r\n      } catch (error) {\r\n        console.error('Erro ao buscar recargas:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []); // Executa apenas uma vez\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns: getColumns(),\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n    },\r\n  });\r\n\r\n  const handleSaveRecarga = (recarga: {\r\n    influenciadorId: string;\r\n    plataformaId: string;\r\n    valor: number;\r\n    inicio: Date;\r\n    termino: Date;\r\n  }) => {\r\n    console.log(\"Recarga adicionada:\", recarga);\r\n    setModalOpen(false);\r\n    // Atualizar o estado se quiser adicionar sem reload\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center py-4 px-5\">\r\n        <div className=\"flex-1 text-xl font-medium text-default-900\">Hist√≥rico de Recargas</div>\r\n        <div className=\"flex items-center space-x-3\"> \r\n          <Input\r\n            placeholder=\"Filtrar por nome...\"\r\n            value={(table.getColumn('nome')?.getFilterValue() as string) ?? ''}\r\n            onChange={(event) =>\r\n              table.getColumn('nome')?.setFilterValue(event.target.value)\r\n            }\r\n            className=\"max-w-sm\"\r\n          />\r\n          <Button onClick={() => setModalOpen(true)}>Nova Recarga</Button>\r\n        </div>\r\n      </div>\r\n      <Table>\r\n        <TableHeader className=\"bg-default-200\">\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <TableHead key={header.id}>\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n                </TableHead>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n\r\n        <TableBody>\r\n          {table.getRowModel().rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={10} className=\"h-24 text-center\">\r\n                Nenhuma recarga encontrada.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      <TablePagination table={table} />\r\n      <RecargasModal\r\n        open={modalOpen}\r\n        onClose={() => setModalOpen(false)}\r\n        onSave={handleSaveRecarga}\r\n        influenciadores={[]} // voc√™ pode passar influenciadores aqui se quiser!\r\n      />\r\n    </div>\r\n  );\r\n});\r\n"
        }
    ]
}