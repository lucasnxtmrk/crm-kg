{
    "sourceFile": "app/[locale]/(protected)/recargas/components/columns.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1745345817150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745345827408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+'use client';\r\n+\r\n+import { ColumnDef } from '@tanstack/react-table';\r\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Eye } from 'lucide-react';\r\n+\r\n+export type RecargaTabela = {\r\n+  id: string;\r\n+  nome: string;\r\n+  imagem?: string;\r\n+  plataformaId: string;\r\n+  inicio?: string;\r\n+  termino?: string;\r\n+  valor: number;\r\n+  meta: number;\r\n+  atingido: number;\r\n+  statusMeta: 'completo' | 'incompleto';\r\n+};\r\n+\r\n+export const getColumns = (onView?: (id: string) => void): ColumnDef<RecargaTabela>[] => [\r\n+  {\r\n+    accessorKey: 'nome',\r\n+    header: 'Influenciador',\r\n+    cell: ({ row }) => {\r\n+      const { nome, imagem } = row.original;\r\n+      return (\r\n+        <div className=\"flex items-center gap-2\">\r\n+          <Avatar className=\"w-8 h-8\">\r\n+            <AvatarImage src={imagem} />\r\n+            <AvatarFallback>{nome[0]}</AvatarFallback>\r\n+          </Avatar>\r\n+          <span>{nome}</span>\r\n+        </div>\r\n+      );\r\n+    },\r\n+  },\r\n+  {\r\n+    accessorKey: 'plataformaId',\r\n+    header: 'Plataforma',\r\n+    cell: ({ row }) => <span className=\"capitalize\">{row.original.plataformaId}</span>,\r\n+  },\r\n+  {\r\n+    accessorKey: 'inicio',\r\n+    header: 'Início',\r\n+    cell: ({ row }) => {\r\n+      const data = row.original.inicio;\r\n+      if (!data) return '-';\r\n+      const [ano, mes, dia] = data.split('-');\r\n+      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n+    },\r\n+  },\r\n+  {\r\n+    accessorKey: 'termino',\r\n+    header: 'Término',\r\n+    cell: ({ row }) => {\r\n+      const data = row.original.termino;\r\n+      if (!data) return '-';\r\n+      const [ano, mes, dia] = data.split('-');\r\n+      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n+    },\r\n+  },\r\n+  {\r\n+    accessorKey: 'valor',\r\n+    header: 'Valor (R$)',\r\n+    cell: ({ row }) => `R$ ${Number(row.original.valor).toFixed(2)}`,\r\n+  },\r\n+  {\r\n+    accessorKey: 'meta',\r\n+    header: 'Meta',\r\n+    cell: ({ row }) => row.original.meta,\r\n+  },\r\n+  {\r\n+    accessorKey: 'atingido',\r\n+    header: 'Atingido',\r\n+    cell: ({ row }) => row.original.atingido,\r\n+  },\r\n+  {\r\n+    accessorKey: 'statusMeta',\r\n+    header: 'Status',\r\n+    cell: ({ row }) => {\r\n+      const status = row.original.statusMeta;\r\n+      return (\r\n+        <Badge variant={status === 'completo' ? 'success' : 'destructive'}>\r\n+          {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n+        </Badge>\r\n+      );\r\n+    },\r\n+  },\r\n+  {\r\n+    id: 'actions',\r\n+    header: '',\r\n+    cell: ({ row }) => (\r\n+      <Button variant=\"ghost\" size=\"icon\" onClick={() => onView?.(row.original.id)}>\r\n+        <Eye className=\"w-4 h-4\" />\r\n+      </Button>\r\n+    ),\r\n+  },\r\n+];\r\n"
                },
                {
                    "date": 1745347948833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n     header: 'Status',\r\n     cell: ({ row }) => {\r\n       const status = row.original.statusMeta;\r\n       return (\r\n-        <Badge variant={status === 'completo' ? 'success' : 'destructive'}>\r\n+        <Badge className={status === 'completo' ? 'bg-green-500' : 'bg-red-500'}>\r\n           {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n         </Badge>\r\n       );\r\n     },\r\n@@ -97,104 +97,4 @@\n       </Button>\r\n     ),\r\n   },\r\n ];\r\n-'use client';\r\n-\r\n-import { ColumnDef } from '@tanstack/react-table';\r\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Eye } from 'lucide-react';\r\n-\r\n-export type RecargaTabela = {\r\n-  id: string;\r\n-  nome: string;\r\n-  imagem?: string;\r\n-  plataformaId: string;\r\n-  inicio?: string;\r\n-  termino?: string;\r\n-  valor: number;\r\n-  meta: number;\r\n-  atingido: number;\r\n-  statusMeta: 'completo' | 'incompleto';\r\n-};\r\n-\r\n-export const getColumns = (onView?: (id: string) => void): ColumnDef<RecargaTabela>[] => [\r\n-  {\r\n-    accessorKey: 'nome',\r\n-    header: 'Influenciador',\r\n-    cell: ({ row }) => {\r\n-      const { nome, imagem } = row.original;\r\n-      return (\r\n-        <div className=\"flex items-center gap-2\">\r\n-          <Avatar className=\"w-8 h-8\">\r\n-            <AvatarImage src={imagem} />\r\n-            <AvatarFallback>{nome[0]}</AvatarFallback>\r\n-          </Avatar>\r\n-          <span>{nome}</span>\r\n-        </div>\r\n-      );\r\n-    },\r\n-  },\r\n-  {\r\n-    accessorKey: 'plataformaId',\r\n-    header: 'Plataforma',\r\n-    cell: ({ row }) => <span className=\"capitalize\">{row.original.plataformaId}</span>,\r\n-  },\r\n-  {\r\n-    accessorKey: 'inicio',\r\n-    header: 'Início',\r\n-    cell: ({ row }) => {\r\n-      const data = row.original.inicio;\r\n-      if (!data) return '-';\r\n-      const [ano, mes, dia] = data.split('-');\r\n-      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n-    },\r\n-  },\r\n-  {\r\n-    accessorKey: 'termino',\r\n-    header: 'Término',\r\n-    cell: ({ row }) => {\r\n-      const data = row.original.termino;\r\n-      if (!data) return '-';\r\n-      const [ano, mes, dia] = data.split('-');\r\n-      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n-    },\r\n-  },\r\n-  {\r\n-    accessorKey: 'valor',\r\n-    header: 'Valor (R$)',\r\n-    cell: ({ row }) => `R$ ${Number(row.original.valor).toFixed(2)}`,\r\n-  },\r\n-  {\r\n-    accessorKey: 'meta',\r\n-    header: 'Meta',\r\n-    cell: ({ row }) => row.original.meta,\r\n-  },\r\n-  {\r\n-    accessorKey: 'atingido',\r\n-    header: 'Atingido',\r\n-    cell: ({ row }) => row.original.atingido,\r\n-  },\r\n-  {\r\n-    accessorKey: 'statusMeta',\r\n-    header: 'Status',\r\n-    cell: ({ row }) => {\r\n-      const status = row.original.statusMeta;\r\n-      return (\r\n-        <Badge variant={status === 'completo' ? 'success' : 'destructive'}>\r\n-          {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n-        </Badge>\r\n-      );\r\n-    },\r\n-  },\r\n-  {\r\n-    id: 'actions',\r\n-    header: '',\r\n-    cell: ({ row }) => (\r\n-      <Button variant=\"ghost\" size=\"icon\" onClick={() => onView?.(row.original.id)}>\r\n-        <Eye className=\"w-4 h-4\" />\r\n-      </Button>\r\n-    ),\r\n-  },\r\n-];\r\n"
                },
                {
                    "date": 1745471525418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,14 +68,14 @@\n   },\r\n   {\r\n     accessorKey: 'meta',\r\n     header: 'Meta',\r\n-    cell: ({ row }) => row.original.meta,\r\n+    cell: ({ row }) => `R$ ${Number(row.original.meta).toFixed(2)}`,\r\n   },\r\n   {\r\n     accessorKey: 'atingido',\r\n     header: 'Atingido',\r\n-    cell: ({ row }) => row.original.atingido,\r\n+    cell: ({ row }) => `R$ ${Number(row.original.atingido).toFixed(2)}`,\r\n   },\r\n   {\r\n     accessorKey: 'statusMeta',\r\n     header: 'Status',\r\n"
                },
                {
                    "date": 1745471557961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,19 +63,19 @@\n   },\r\n   {\r\n     accessorKey: 'valor',\r\n     header: 'Valor (R$)',\r\n-    cell: ({ row }) => `R$ ${Number(row.original.valor).toFixed(2)}`,\r\n+    cell: ({ row }) => `R$ ${Number(row.original.valor)}`,\r\n   },\r\n   {\r\n     accessorKey: 'meta',\r\n     header: 'Meta',\r\n-    cell: ({ row }) => `R$ ${Number(row.original.meta).toFixed(2)}`,\r\n+    cell: ({ row }) => `R$ ${Number(row.original.meta)}`,\r\n   },\r\n   {\r\n     accessorKey: 'atingido',\r\n     header: 'Atingido',\r\n-    cell: ({ row }) => `R$ ${Number(row.original.atingido).toFixed(2)}`,\r\n+    cell: ({ row }) => `R$ ${Number(row.original.atingido)}`,\r\n   },\r\n   {\r\n     accessorKey: 'statusMeta',\r\n     header: 'Status',\r\n"
                },
                {
                    "date": 1745471583798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,15 +86,6 @@\n           {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n         </Badge>\r\n       );\r\n     },\r\n-  },\r\n-  {\r\n-    id: 'actions',\r\n-    header: '',\r\n-    cell: ({ row }) => (\r\n-      <Button variant=\"ghost\" size=\"icon\" onClick={() => onView?.(row.original.id)}>\r\n-        <Eye className=\"w-4 h-4\" />\r\n-      </Button>\r\n-    ),\r\n-  },\r\n+  }\r\n ];\r\n"
                }
            ],
            "date": 1745345817150,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { ColumnDef } from '@tanstack/react-table';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye } from 'lucide-react';\r\n\r\nexport type RecargaTabela = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  plataformaId: string;\r\n  inicio?: string;\r\n  termino?: string;\r\n  valor: number;\r\n  meta: number;\r\n  atingido: number;\r\n  statusMeta: 'completo' | 'incompleto';\r\n};\r\n\r\nexport const getColumns = (onView?: (id: string) => void): ColumnDef<RecargaTabela>[] => [\r\n  {\r\n    accessorKey: 'nome',\r\n    header: 'Influenciador',\r\n    cell: ({ row }) => {\r\n      const { nome, imagem } = row.original;\r\n      return (\r\n        <div className=\"flex items-center gap-2\">\r\n          <Avatar className=\"w-8 h-8\">\r\n            <AvatarImage src={imagem} />\r\n            <AvatarFallback>{nome[0]}</AvatarFallback>\r\n          </Avatar>\r\n          <span>{nome}</span>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'plataformaId',\r\n    header: 'Plataforma',\r\n    cell: ({ row }) => <span className=\"capitalize\">{row.original.plataformaId}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'inicio',\r\n    header: 'Início',\r\n    cell: ({ row }) => {\r\n      const data = row.original.inicio;\r\n      if (!data) return '-';\r\n      const [ano, mes, dia] = data.split('-');\r\n      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'termino',\r\n    header: 'Término',\r\n    cell: ({ row }) => {\r\n      const data = row.original.termino;\r\n      if (!data) return '-';\r\n      const [ano, mes, dia] = data.split('-');\r\n      return <span>{`${dia}/${mes}/${ano}`}</span>;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'valor',\r\n    header: 'Valor (R$)',\r\n    cell: ({ row }) => `R$ ${Number(row.original.valor).toFixed(2)}`,\r\n  },\r\n  {\r\n    accessorKey: 'meta',\r\n    header: 'Meta',\r\n    cell: ({ row }) => row.original.meta,\r\n  },\r\n  {\r\n    accessorKey: 'atingido',\r\n    header: 'Atingido',\r\n    cell: ({ row }) => row.original.atingido,\r\n  },\r\n  {\r\n    accessorKey: 'statusMeta',\r\n    header: 'Status',\r\n    cell: ({ row }) => {\r\n      const status = row.original.statusMeta;\r\n      return (\r\n        <Badge variant={status === 'completo' ? 'success' : 'destructive'}>\r\n          {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n        </Badge>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    id: 'actions',\r\n    header: '',\r\n    cell: ({ row }) => (\r\n      <Button variant=\"ghost\" size=\"icon\" onClick={() => onView?.(row.original.id)}>\r\n        <Eye className=\"w-4 h-4\" />\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n"
        }
    ]
}