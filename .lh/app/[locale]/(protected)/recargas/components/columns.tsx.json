{
    "sourceFile": "app/[locale]/(protected)/recargas/components/columns.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745877020115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745877256047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,17 +87,17 @@\n     accessorKey: 'atingido',\r\n     header: 'Atingido',\r\n     cell: ({ row }) => `R$ ${Number(row.original.atingido).toLocaleString('pt-BR')}`,\r\n   },\r\n-  {\r\n-    accessorKey: 'statusMeta',\r\n-    header: 'Status',\r\n-    cell: ({ row }) => {\r\n-      const status = row.original.statusMeta;\r\n-      return (\r\n-        <Badge className={status === 'completo' ? 'bg-green-500' : 'bg-red-500'}>\r\n-          {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n-        </Badge>\r\n-      );\r\n-    },\r\n-  }\r\n+  // {\r\n+  //   accessorKey: 'statusMeta',\r\n+  //   header: 'Status',\r\n+  //   cell: ({ row }) => {\r\n+  //     const status = row.original.statusMeta;\r\n+  //     return (\r\n+  //       <Badge className={status === 'completo' ? 'bg-green-500' : 'bg-red-500'}>\r\n+  //         {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n+  //       </Badge>\r\n+  //     );\r\n+  //   },\r\n+  // }\r\n ];\r\n"
                }
            ],
            "date": 1745877020115,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { ColumnDef } from '@tanstack/react-table';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye } from 'lucide-react';\r\n\r\nexport type RecargaTabela = {\r\n  id: string;\r\n  nome: string;\r\n  imagem?: string;\r\n  plataformaId: string;\r\n  inicio?: string;\r\n  termino?: string;\r\n  valor: number;\r\n  meta: number;\r\n  atingido: number;\r\n  statusMeta: 'completo' | 'incompleto';\r\n};\r\n\r\nexport const getColumns = (onView?: (id: string) => void): ColumnDef<RecargaTabela>[] => [\r\n  {\r\n    accessorKey: 'nome',\r\n    header: 'Influenciador',\r\n    cell: ({ row }) => {\r\n      const { nome, imagem } = row.original;\r\n      return (\r\n        <div className=\"flex items-center gap-2\">\r\n          <Avatar className=\"w-8 h-8\">\r\n            <AvatarImage src={imagem} />\r\n            <AvatarFallback>{nome[0]}</AvatarFallback>\r\n          </Avatar>\r\n          <span>{nome}</span>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'plataformaId',\r\n    header: 'Plataforma',\r\n    cell: ({ row }) => <span className=\"capitalize\">{row.original.plataformaId}</span>,\r\n  },\r\n  {\r\n    accessorKey: 'inicio',\r\n    header: 'Início',\r\n    cell: ({ row }) => {\r\n      const data = row.original.inicio;\r\n      if (!data) return '-';\r\n      const dataObj = new Date(data);\r\n      return (\r\n        <span>\r\n          {String(dataObj.getDate()).padStart(2, '0')}/\r\n          {String(dataObj.getMonth() + 1).padStart(2, '0')}/\r\n          {dataObj.getFullYear()}\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'termino',\r\n    header: 'Término',\r\n    cell: ({ row }) => {\r\n      const data = row.original.termino;\r\n      if (!data) return '-';\r\n      const dataObj = new Date(data);\r\n      return (\r\n        <span>\r\n          {String(dataObj.getDate()).padStart(2, '0')}/\r\n          {String(dataObj.getMonth() + 1).padStart(2, '0')}/\r\n          {dataObj.getFullYear()}\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'valor',\r\n    header: 'Valor (R$)',\r\n    cell: ({ row }) => `R$ ${Number(row.original.valor).toLocaleString('pt-BR')}`,\r\n  },\r\n  {\r\n    accessorKey: 'meta',\r\n    header: 'Meta',\r\n    cell: ({ row }) => `R$ ${Number(row.original.meta).toLocaleString('pt-BR')}`,\r\n  },\r\n  {\r\n    accessorKey: 'atingido',\r\n    header: 'Atingido',\r\n    cell: ({ row }) => `R$ ${Number(row.original.atingido).toLocaleString('pt-BR')}`,\r\n  },\r\n  {\r\n    accessorKey: 'statusMeta',\r\n    header: 'Status',\r\n    cell: ({ row }) => {\r\n      const status = row.original.statusMeta;\r\n      return (\r\n        <Badge className={status === 'completo' ? 'bg-green-500' : 'bg-red-500'}>\r\n          {status === 'completo' ? 'Meta batida' : 'Não bateu'}\r\n        </Badge>\r\n      );\r\n    },\r\n  }\r\n];\r\n"
        }
    ]
}