{
    "sourceFile": "middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1746829534699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746829602337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     defaultLocale,\r\n   });\r\n \r\n   const response = handleI18nRouting(request);\r\n-  response.headers.set(\"dashcode-locale\", defaultLocale);\r\n+response.headers.set(\"kg-locale\", defaultLocale);\r\n \r\n   return response;\r\n }\r\n \r\n"
                },
                {
                    "date": 1746829680832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n // Protege essas rotas\r\n const protectedRoutes = [\"/dashboard\", \"/recargas\", \"/eventos\", \"/influenciadores\", \"/blacklist\"];\r\n \r\n export default async function middleware(request: NextRequest) {\r\n-  const token = await getToken({ req: request });\r\n+const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });\r\n \r\n   const pathname = request.nextUrl.pathname;\r\n   const defaultLocale = request.headers.get(\"dashcode-locale\") || \"pt\";\r\n \r\n"
                },
                {
                    "date": 1746830123334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n export default async function middleware(request: NextRequest) {\r\n const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });\r\n \r\n   const pathname = request.nextUrl.pathname;\r\n-  const defaultLocale = request.headers.get(\"dashcode-locale\") || \"pt\";\r\n+  const defaultLocale = request.headers.get(\"kg-locale\") || \"pt\";\r\n \r\n   // ‚ö†Ô∏è Redireciona se for rota protegida e n√£o tiver token\r\n   const isProtected = protectedRoutes.some((path) => pathname.startsWith(`/${defaultLocale}${path}`));\r\n \r\n"
                },
                {
                    "date": 1746830860595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,32 +2,35 @@\n import { getToken } from \"next-auth/jwt\";\r\n import createMiddleware from \"next-intl/middleware\";\r\n import { locales } from \"@/config\";\r\n \r\n-// Protege essas rotas\r\n+// Define as rotas protegidas\r\n const protectedRoutes = [\"/dashboard\", \"/recargas\", \"/eventos\", \"/influenciadores\", \"/blacklist\"];\r\n \r\n export default async function middleware(request: NextRequest) {\r\n-const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });\r\n+  const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });\r\n \r\n   const pathname = request.nextUrl.pathname;\r\n   const defaultLocale = request.headers.get(\"kg-locale\") || \"pt\";\r\n \r\n-  // ‚ö†Ô∏è Redireciona se for rota protegida e n√£o tiver token\r\n-  const isProtected = protectedRoutes.some((path) => pathname.startsWith(`/${defaultLocale}${path}`));\r\n+  // üîê Protege rotas com ou sem locale\r\n+  const isProtected = protectedRoutes.some((path) =>\r\n+    pathname.startsWith(path) || pathname.startsWith(`/${defaultLocale}${path}`)\r\n+  );\r\n \r\n+  // ‚ùå Redireciona se n√£o tiver token e tentar acessar rota protegida\r\n   if (isProtected && !token) {\r\n     return NextResponse.redirect(new URL(`/${defaultLocale}/auth/login`, request.url));\r\n   }\r\n \r\n-  // Internacionaliza√ß√£o (next-intl)\r\n+  // üåê Internacionaliza√ß√£o com next-intl\r\n   const handleI18nRouting = createMiddleware({\r\n     locales,\r\n     defaultLocale,\r\n   });\r\n \r\n   const response = handleI18nRouting(request);\r\n-response.headers.set(\"kg-locale\", defaultLocale);\r\n+  response.headers.set(\"kg-locale\", defaultLocale);\r\n \r\n   return response;\r\n }\r\n \r\n"
                }
            ],
            "date": 1746829534699,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getToken } from \"next-auth/jwt\";\r\nimport createMiddleware from \"next-intl/middleware\";\r\nimport { locales } from \"@/config\";\r\n\r\n// Protege essas rotas\r\nconst protectedRoutes = [\"/dashboard\", \"/recargas\", \"/eventos\", \"/influenciadores\", \"/blacklist\"];\r\n\r\nexport default async function middleware(request: NextRequest) {\r\n  const token = await getToken({ req: request });\r\n\r\n  const pathname = request.nextUrl.pathname;\r\n  const defaultLocale = request.headers.get(\"dashcode-locale\") || \"pt\";\r\n\r\n  // ‚ö†Ô∏è Redireciona se for rota protegida e n√£o tiver token\r\n  const isProtected = protectedRoutes.some((path) => pathname.startsWith(`/${defaultLocale}${path}`));\r\n\r\n  if (isProtected && !token) {\r\n    return NextResponse.redirect(new URL(`/${defaultLocale}/auth/login`, request.url));\r\n  }\r\n\r\n  // Internacionaliza√ß√£o (next-intl)\r\n  const handleI18nRouting = createMiddleware({\r\n    locales,\r\n    defaultLocale,\r\n  });\r\n\r\n  const response = handleI18nRouting(request);\r\n  response.headers.set(\"dashcode-locale\", defaultLocale);\r\n\r\n  return response;\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/\", \"/(ar|en|pt)/:path*\"],\r\n};\r\n"
        }
    ]
}